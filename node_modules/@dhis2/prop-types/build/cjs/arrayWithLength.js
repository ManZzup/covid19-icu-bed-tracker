"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayWithLength = arrayWithLength;

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var arrayWithLengthFactory = function arrayWithLengthFactory(_ref) {
  var _ref$min = _ref.min,
      min = _ref$min === void 0 ? 0 : _ref$min,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? Infinity : _ref$max,
      propType = _ref.propType,
      isRequired = _ref.isRequired;
  return function (props, propSelector, // normally a propName, but when wrapped in arrayOf an index
  componentName, location, propFullName // normally null but a string like "propName[index]" when wrapped in arrayOf
  ) {
    var arr = props[propSelector];
    var propName = propFullName || propSelector;
    var baseMsg = "Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`,");
    var insideArrayOf = !!propFullName;

    if (isRequired && typeof arr === 'undefined') {
      return new Error("".concat(baseMsg, " this prop is required but no value was found."));
    }

    if (arr && !Array.isArray(arr)) {
      return new Error("".concat(baseMsg, " prop value is not an array."));
    }

    if (arr && arr.length > max) {
      return new Error("".concat(baseMsg, " array has a length of ").concat(arr.length, ", but the maximum is ").concat(max));
    }

    if (arr && arr.length < min) {
      return new Error("".concat(baseMsg, " array has a length of ").concat(arr.length, ", but the minimum is ").concat(min));
    }

    if (arr && propType) {
      var checkPropName = insideArrayOf ? location : propName;
      var checkPropType = insideArrayOf ? // array should be array containing only the given type
      _propTypes.default.arrayOf(_propTypes.default.arrayOf(propType)) : // array should contain only the given type
      _propTypes.default.arrayOf(propType);

      var checkPropTypes = _defineProperty({}, checkPropName, checkPropType);

      var checkProps = insideArrayOf ? _defineProperty({}, location, props) : props; // When not inside an array, the error message only reads correctly
      // when using "prop"

      var checkProp = insideArrayOf ? propName : 'prop';

      _propTypes.default.checkPropTypes(checkPropTypes, checkProps, checkProp, componentName);
    }

    return null;
  };
};
/**
 * Ensure the prop value is an array with a length between a minimum and maximum.
 * If a third `propType` argument is passed each item in the array needs to be of that prop-type
 * @param {number} [min=0] - The minimal array length
 * @param {number} [max=Infinity] - The maximal array length
 * @param {function} [propType] - The prop-type that each array item needs to conform to
 * @return {Error|null} Returns null if all conditions are met, or an error
 * @example
 * import React from 'react'
 * import { arrayWithLength } from '@dhis2/prop-types'
 *
 * const LotsOfLists = props => <div {...props}>Does nothing</div>
 *
 * LotsOfLists.propTypes = {
 *     arrayWithMaxThreeNumbers: arrayWithLength(0, 3, propTypes.number),
 *     arrayWithAtLeastSixStrings: arrayWithLength(6, undefined, propTypes.string),
 *     arrayWithAtLeastTenItems: arrayWithLength(10),
 *     mandatoryArrayBetweenOneAndTen: arrayWithLength(1,10).isRequired,
 * }
 */


function arrayWithLength(min, max, propType) {
  var fn = arrayWithLengthFactory({
    min: min,
    max: max,
    propType: propType,
    isRequired: false
  });
  fn.isRequired = arrayWithLengthFactory({
    min: min,
    max: max,
    propType: propType,
    isRequired: true
  });
  return fn;
}