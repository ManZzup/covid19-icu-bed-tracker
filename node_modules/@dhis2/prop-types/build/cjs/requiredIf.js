"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requiredIf = requiredIf;

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isEmpty = function isEmpty(value) {
  return typeof value === 'undefined' || value === null || value === '';
};

var requiredIfFactory = function requiredIfFactory(condition, propType, isRequired) {
  return function (props, propName, componentName) {
    var propValue = props[propName]; // Usage errors

    if (isRequired) {
      return new Error("Property `".concat(propName, "` on component `").concat(componentName, "` is using the `requiredIf` prop-validator combined with `.isRequired`. This is an invalid combination."));
    }

    if (typeof condition !== 'function') {
      return new Error("The `condition` argument passed to the `requiredIf` prop-validator was not a function.");
    }

    if (typeof propType !== 'function') {
      return new Error("The `propType` argument passed to the `requiredIf` prop-validator was not a function.");
    } // Validation errors


    if (condition(props) && isEmpty(propValue)) {
      return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`, this prop is conditionally required but has value `").concat(propValue, "`."));
    } // This is how to programatically invoke a propTypes check
    // https://github.com/facebook/prop-types#proptypescheckproptypes


    _propTypes.default.checkPropTypes(_defineProperty({}, propName, propType), props, 'prop', componentName);

    return null;
  };
};
/**
 * Ensure the prop has a value (i.e. treat it as required) when a given sibling prop
 * also has a value, and ensure the prop is of the correct prop-type
 * @param {function} siblingPropName - The name of the sibling prop
 * @return {Error|null} Returns null if all conditions are met, or an error
 * @example
 * import React from 'react'
 * import { requiredIf } from '@dhis2/prop-types'
 *
 * const Test = ({ someBool, someString }) => (
 *     <div>
 *         <h1>someBool: {someBool ? 'true' : 'false'}</h1>
 *         <h1>someString: {someString}</h1>
 *     </div>
 * )
 * Test.propTypes = {
 *     someBool: propTypes.bool,
 *     someString: requiredIf(props => props.someBool, propTypes.string),
 * }
 */


function requiredIf(condition, propType) {
  var fn = requiredIfFactory(condition, propType, false);
  fn.isRequired = requiredIfFactory(condition, propType, true);
  return fn;
}