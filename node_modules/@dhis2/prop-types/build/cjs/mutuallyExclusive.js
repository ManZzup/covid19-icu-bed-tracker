"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mutuallyExclusive = mutuallyExclusive;

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var mutuallyExclusiveFactory = function mutuallyExclusiveFactory(exlusivePropNames, propType, isRequired) {
  return function (props, propName, componentName) {
    var baseMsg = "Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`,");
    var isDefined = typeof props[propName] !== 'undefined'; // Usage errors

    if (exlusivePropNames.length === 0) {
      return new Error("mutuallyExclusive was called without any arguments for property `".concat(propName, "` on component `").concat(componentName, "`. Please add the required arguments."));
    } // Validation errors


    if (isRequired && !isDefined) {
      return new Error("".concat(baseMsg, " this prop is required but no value was found."));
    } // This is how to programatically invoke a propTypes check
    // https://github.com/facebook/prop-types#proptypescheckproptypes


    _propTypes.default.checkPropTypes(_defineProperty({}, propName, propType), props, 'prop', componentName);

    if (props[propName]) {
      var thruthySiblingPropName = exlusivePropNames.find(function (name) {
        return props[name] && name !== propName;
      });

      if (thruthySiblingPropName) {
        return new Error("".concat(baseMsg, " Property '").concat(propName, "' is mutually exclusive with '").concat(thruthySiblingPropName, "', but both have a thruthy value."));
      }
    }

    return null;
  };
};
/**
 * Ensure that only one property within a specified list is thruthy
 * This function will also check if the current property value is of the specified type
 * @param {array<string>} exlusivePropNames - The prop names to be checked
 * @param {function} propType - The prop-type that the current prop-value needs to conform to
 * @return {Error|null} Returns null if all conditions are met, or an error
 * @example
 * import React from 'react'
 * import cx from 'classnames'
 * import propTypes from 'prop-types'
 * import { mutuallyExclusive } from '@dhis2/prop-types'
 *
 * const Alert = ({ danger, warning, success, children }) => (
 *     <div className={cx({danger, warning, success})}>
 *         {children}
 *     </div>
 * )
 *
 * const statusPropType = mutuallyExclusive(['danger', 'warning', 'success'], propTypes.bool)
 *
 * Alert.propTypes = {
 *     children: propTypes.node,
 *     danger: statusPropType,
 *     warning: statusPropType,
 *     success: statusPropType,
 * }
 */


function mutuallyExclusive(exlusivePropNames, propType) {
  var fn = mutuallyExclusiveFactory(exlusivePropNames, propType, false);
  fn.isRequired = mutuallyExclusiveFactory(exlusivePropNames, propType, true);
  return fn;
}