"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.instanceOfComponent = instanceOfComponent;

var instanceOfComponentFactory = function instanceOfComponentFactory(Component, isRequired) {
  return function (props, propSelector, // normally a propName, but when wrapped in arrayOf an index
  componentName, _location, propFullName // normally null but a string like "propName[index]" when wrapped in arrayOf
  ) {
    var child = props[propSelector];
    var propName = propFullName || propSelector;
    var hasRenderableChild = child === 0 || !!child;
    var baseMsg = "Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`,");

    if (Array.isArray(child)) {
      return new Error("".concat(baseMsg, " expected a single component instance but received an array."));
    }

    if (!hasRenderableChild) {
      if (isRequired) {
        return new Error("".concat(baseMsg, " this is a required property but its value is `").concat(child, "`."));
      } else {
        return null;
      }
    }

    var expectedComponentName = typeof Component === 'string' ? Component : Component.name || Component.displayName;
    var foundComponentName = typeof child.type !== 'string' ? child.type && child.type.name ? child.type.name : child.type : child.type && (child.type.name || child.type.displayName);

    if (!foundComponentName) {
      return new Error("".concat(baseMsg, " could not read component name. Property value does not look like a component instance."));
    }

    if (child.type !== Component) {
      return new Error("".concat(baseMsg, " expected an instance of `").concat(expectedComponentName, "` but found an instance of `").concat(foundComponentName, "`."));
    }

    return null;
  };
};
/**
 * Ensure the prop value is an instance of a certain component
 * @param {function|string} Component - The component that is expected. Can either be a React component,
 * or a string for built-in components, such as 'span', 'div', etc.
 * @return {Error|null} Returns null if all conditions are met, or an error
 * @example
 * import React from 'react'
 * import { instanceOfComponent } from '@dhis2/prop-types'
 * import { Button } from './Button'
 *
 * const ButtonWrap = ({ children }) => <div>{children}</div>
 * // This would allow the ButtonWrap to be empty
 * ButtonWrap.propTypes = {
 *     children: instanceOfComponent(Button)
 * }
 *
 * // Enforce presence of a Button instance
 * ButtonWrap.propTypes = {
 *     children: instanceOfComponent(Button).isRequired
 * }
 *
 * // Enforce presence of a multiple children, all Button instances
 * ButtonWrap.propTypes = {
 *     children: proptypes.arrayOf(instanceOfComponent(Button)).isRequired
 * }
 */


function instanceOfComponent(Component) {
  var fn = instanceOfComponentFactory(Component, false);
  fn.isRequired = instanceOfComponentFactory(Component, true);
  return fn;
}