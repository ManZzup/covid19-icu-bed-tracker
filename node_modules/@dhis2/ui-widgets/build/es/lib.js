/* eslint-disable */
import _JSXStyle from 'styled-jsx/style';
import React, { useEffect, useState } from 'react';
import propTypes from '@dhis2/prop-types';
import { colors, InputField, theme, Card, Divider, MenuItem, LogoIconWhite, spacers, Checkbox, Node, CircularLoader } from '@dhis2/ui-core';
import i18n from '@dhis2/d2-i18n';
import { useDataQuery } from '@dhis2/app-runtime';
import propTypes$1 from 'prop-types';
import cx from 'classnames';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function Settings(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    className: className
  }, React.createElement("path", {
    d: "M0 0h48v48H0z",
    fill: "none"
  }), React.createElement("path", {
    d: "M38.86 25.95c.08-.64.14-1.29.14-1.95s-.06-1.31-.14-1.95l4.23-3.31c.38-.3.49-.84.24-1.28l-4-6.93c-.25-.43-.77-.61-1.22-.43l-4.98 2.01c-1.03-.79-2.16-1.46-3.38-1.97L29 4.84c-.09-.47-.5-.84-1-.84h-8c-.5 0-.91.37-.99.84l-.75 5.3c-1.22.51-2.35 1.17-3.38 1.97L9.9 10.1c-.45-.17-.97 0-1.22.43l-4 6.93c-.25.43-.14.97.24 1.28l4.22 3.31C9.06 22.69 9 23.34 9 24s.06 1.31.14 1.95l-4.22 3.31c-.38.3-.49.84-.24 1.28l4 6.93c.25.43.77.61 1.22.43l4.98-2.01c1.03.79 2.16 1.46 3.38 1.97l.75 5.3c.08.47.49.84.99.84h8c.5 0 .91-.37.99-.84l.75-5.3c1.22-.51 2.35-1.17 3.38-1.97l4.98 2.01c.45.17.97 0 1.22-.43l4-6.93c.25-.43.14-.97-.24-1.28l-4.22-3.31zM24 31c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z"
  }));
}
Settings.propTypes = {
  className: propTypes.string
};

function Apps(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    className: className
  }, React.createElement("path", {
    d: "M8 16h8V8H8v8zm12 24h8v-8h-8v8zM8 40h8v-8H8v8zm0-12h8v-8H8v8zm12 0h8v-8h-8v8zM32 8v8h8V8h-8zm-12 8h8V8h-8v8zm12 12h8v-8h-8v8zm0 12h8v-8h-8v8z"
  }), React.createElement("path", {
    d: "M0 0h48v48H0z",
    fill: "none"
  }));
}
Apps.propTypes = {
  className: propTypes.string
};

function Cancel(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    className: className
  }, React.createElement("path", {
    d: "M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm10 27.17L31.17 34 24 26.83 16.83 34 14 31.17 21.17 24 14 16.83 16.83 14 24 21.17 31.17 14 34 16.83 26.83 24 34 31.17z"
  }), React.createElement("path", {
    d: "M0 0h48v48H0z",
    fill: "none"
  }));
}
Cancel.propTypes = {
  className: propTypes.string
};

var appIcon = {
  styles: React.createElement(_JSXStyle, {
    id: "255544020"
  }, ["svg.jsx-255544020{fill:".concat(colors.white, ";cursor:pointer;height:24px;width:24px;}")]),
  className: "jsx-255544020"
};
var trailIcon = {
  styles: React.createElement(_JSXStyle, {
    id: "4078879535"
  }, ["svg.jsx-4078879535{fill:".concat(colors.grey900, ";cursor:pointer;height:24px;width:24px;margin-right:8px;margin-top:4px;}")]),
  className: "jsx-4078879535"
};
var settingsIcon = {
  styles: React.createElement(_JSXStyle, {
    id: "4285170702"
  }, ["svg.jsx-4285170702{margin:8px 8px 0 16px;color:".concat(colors.grey900, ";height:24px;width:24px;cursor:pointer;}")]),
  className: "jsx-4285170702"
};

function TrailIcon(_ref) {
  var onClick = _ref.onClick;
  return React.createElement("a", {
    onClick: onClick
  }, React.createElement(Cancel, {
    className: trailIcon.className
  }));
}

TrailIcon.propTypes = {
  onClick: propTypes.func
};

function Search(_ref2) {
  var value = _ref2.value,
      onChange = _ref2.onChange,
      onIconClick = _ref2.onIconClick,
      contextPath = _ref2.contextPath;
  return React.createElement("div", {
    className: "jsx-2764723183"
  }, React.createElement("span", {
    className: "jsx-2764723183"
  }, React.createElement(InputField, {
    value: value,
    name: "filter",
    placeholder: i18n.t('Search apps'),
    onChange: onChange,
    trailIcon: React.createElement(TrailIcon, {
      onClick: onIconClick
    }),
    initialFocus: true
  })), React.createElement("span", {
    className: "jsx-2764723183"
  }, React.createElement("a", {
    href: "".concat(contextPath, "/dhis-web-menu-management"),
    className: "jsx-2764723183"
  }, React.createElement(Settings, {
    className: settingsIcon.className
  }))), trailIcon.styles, settingsIcon.styles, React.createElement(_JSXStyle, {
    id: "2764723183"
  }, ["div.jsx-2764723183{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;height:52px;margin:8px;}", "span.jsx-2764723183{-webkit-flex:1 100%;-ms-flex:1 100%;flex:1 100%;}", "span.jsx-2764723183:last-child{-webkit-flex:1 auto;-ms-flex:1 auto;flex:1 auto;}"]));
}

Search.defaultProps = {
  onIconClick: null
};
Search.propTypes = {
  contextPath: propTypes.string.isRequired,
  value: propTypes.string.isRequired,
  onChange: propTypes.func.isRequired,
  onIconClick: propTypes.func
};

function Item(_ref3) {
  var name = _ref3.name,
      path = _ref3.path,
      img = _ref3.img;
  return React.createElement("a", {
    href: path,
    className: _JSXStyle.dynamic([["3670725638", [theme.primary050]]])
  }, React.createElement("img", {
    src: img,
    alt: "app logo",
    className: _JSXStyle.dynamic([["3670725638", [theme.primary050]]])
  }), React.createElement("div", {
    className: _JSXStyle.dynamic([["3670725638", [theme.primary050]]])
  }, name), React.createElement(_JSXStyle, {
    id: "3670725638",
    dynamic: [theme.primary050]
  }, ["a.__jsx-style-dynamic-selector{display:inline-block;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;width:96px;margin:8px;padding:8px;border-radius:12px;-webkit-text-decoration:none;text-decoration:none;cursor:pointer;}", "a.__jsx-style-dynamic-selector:hover,a.__jsx-style-dynamic-selector:focus{background-color:".concat(theme.primary050, ";cursor:pointer;}"), "a.__jsx-style-dynamic-selector:hover>div.__jsx-style-dynamic-selector{font-weight:500;cursor:pointer;}", "img.__jsx-style-dynamic-selector{width:48px;height:48px;cursor:pointer;}", "div.__jsx-style-dynamic-selector{margin-top:14px;color:rgba(0,0,0,0.87);font-size:12px;-webkit-letter-spacing:0.01em;-moz-letter-spacing:0.01em;-ms-letter-spacing:0.01em;letter-spacing:0.01em;line-height:14px;text-align:center;cursor:pointer;}"]));
}

Item.propTypes = {
  img: propTypes.string,
  name: propTypes.string,
  path: propTypes.string
};

function List(_ref4) {
  var apps = _ref4.apps,
      filter = _ref4.filter;
  return React.createElement("div", {
    "data-test": "headerbar-apps-menu-list",
    className: "jsx-2076871745"
  }, apps.filter(function (_ref5) {
    var displayName = _ref5.displayName,
        name = _ref5.name;
    var appName = displayName || name;
    return filter.length > 0 ? appName.toLowerCase().match(filter.toLowerCase()) : true;
  }).map(function (_ref6, idx) {
    var displayName = _ref6.displayName,
        name = _ref6.name,
        defaultAction = _ref6.defaultAction,
        icon = _ref6.icon;
    return React.createElement(Item, {
      key: "app-".concat(name, "-").concat(idx),
      name: displayName || name,
      path: defaultAction,
      img: icon
    });
  }), React.createElement(_JSXStyle, {
    id: "2076871745"
  }, ["div.jsx-2076871745{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-align-content:flex-start;-ms-flex-line-pack:start;align-content:flex-start;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;width:30vw;min-width:300px;max-width:560px;min-height:200px;max-height:465px;margin:0 8px 8px 8px;overflow:auto;overflow-x:hidden;}"]));
}

List.propTypes = {
  apps: propTypes.array,
  filter: propTypes.string
};

var Apps$1 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Apps$1, _React$Component);

  function Apps$1() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Apps$1);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Apps$1)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      show: false,
      filter: ''
    });

    _defineProperty(_assertThisInitialized(_this), "onDocClick", function (evt) {
      if (_this.elContainer && !_this.elContainer.contains(evt.target)) {
        _this.setState({
          show: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onToggle", function () {
      return _this.setState({
        show: !_this.state.show
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (_ref7) {
      var value = _ref7.value;
      return _this.setState({
        filter: value
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onIconClick", function () {
      return _this.setState({
        filter: ''
      });
    });

    _defineProperty(_assertThisInitialized(_this), "AppMenu", function (apps) {
      return React.createElement("div", {
        "data-test": "headerbar-apps-menu",
        className: "jsx-1740460911"
      }, React.createElement(Card, null, React.createElement(Search, {
        value: _this.state.filter,
        onChange: _this.onChange,
        onIconClick: _this.onIconClick,
        contextPath: _this.props.contextPath
      }), React.createElement(List, {
        apps: apps,
        filter: _this.state.filter
      })), React.createElement(_JSXStyle, {
        id: "1740460911"
      }, ["div.jsx-1740460911{z-index:10000;position:absolute;top:28px;right:-6px;border-top:4px solid transparent;}"]));
    });

    return _this;
  }

  _createClass(Apps$1, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('click', this.onDocClick);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.onDocClick);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var apps = this.props.apps;
      return React.createElement("div", {
        ref: function ref(c) {
          return _this2.elContainer = c;
        },
        "data-test": "headerbar-apps",
        className: "jsx-1265754857"
      }, React.createElement("a", {
        onClick: this.onToggle,
        "data-test": "headerbar-apps-icon",
        className: "jsx-1265754857"
      }, React.createElement(Apps, {
        className: appIcon.className
      })), this.state.show && this.AppMenu(apps), appIcon.styles, React.createElement(_JSXStyle, {
        id: "1265754857"
      }, ["a.jsx-1265754857{display:block;}", "div.jsx-1265754857{position:relative;width:24px;height:30px;margin:8px 0 0 0;}"]));
    }
  }]);

  return Apps$1;
}(React.Component);
Apps$1.propTypes = {
  apps: propTypes.array.isRequired,
  contextPath: propTypes.string.isRequired
};

function Info(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    className: className
  }, React.createElement("path", {
    d: "M0 0h48v48H0z",
    fill: "none"
  }), React.createElement("path", {
    d: "M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm2 30h-4V22h4v12zm0-16h-4v-4h4v4z"
  }));
}
Info.propTypes = {
  className: propTypes.string
};

function Help(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    className: className
  }, React.createElement("path", {
    d: "M0 0h48v48H0z",
    fill: "none"
  }), React.createElement("path", {
    d: "M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm2 34h-4v-4h4v4zm4.13-15.49l-1.79 1.84C26.9 25.79 26 27 26 30h-4v-1c0-2.21.9-4.21 2.34-5.66l2.49-2.52C27.55 20.1 28 19.1 28 18c0-2.21-1.79-4-4-4s-4 1.79-4 4h-4c0-4.42 3.58-8 8-8s8 3.58 8 8c0 1.76-.71 3.35-1.87 4.51z"
  }));
}
Help.propTypes = {
  className: propTypes.string
};

function Exit(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    className: className
  }, React.createElement("path", {
    d: "M0 0h48v48H0z",
    fill: "none"
  }), React.createElement("path", {
    d: "M20.17 31.17L23 34l10-10-10-10-2.83 2.83L25.34 22H6v4h19.34l-5.17 5.17zM38 6H10c-2.21 0-4 1.79-4 4v8h4v-8h28v28H10v-8H6v8c0 2.21 1.79 4 4 4h28c2.21 0 4-1.79 4-4V10c0-2.21-1.79-4-4-4z"
  }));
}
Exit.propTypes = {
  className: propTypes.string
};

function Account(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    className: className
  }, React.createElement("path", {
    d: "M6 10v28c0 2.21 1.79 4 4 4h28c2.21 0 4-1.79 4-4V10c0-2.21-1.79-4-4-4H10c-2.21 0-4 1.79-4 4zm24 8c0 3.32-2.69 6-6 6s-6-2.68-6-6c0-3.31 2.69-6 6-6s6 2.69 6 6zM12 34c0-4 8-6.2 12-6.2S36 30 36 34v2H12v-2z"
  }), React.createElement("path", {
    d: "M0 0h48v48H0z",
    fill: "none"
  }));
}
Account.propTypes = {
  className: propTypes.string
};

var TextIcon = function TextIcon(_ref) {
  var name = _ref.name,
      onClick = _ref.onClick,
      dataTestId = _ref.dataTestId;
  var title = name[0];

  if (name.indexOf(' ') > 0) {
    title += name.split(' ')[1][0];
  }

  return React.createElement("div", {
    onClick: onClick,
    "data-test": dataTestId,
    className: "jsx-1795768421"
  }, React.createElement("p", {
    className: "jsx-1795768421"
  }, title), React.createElement(_JSXStyle, {
    id: "1795768421"
  }, ["div.jsx-1795768421{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;width:36px;height:36px;overflow:hidden;border-radius:50%;background-color:rgba(0,0,0,0.3);color:#fff;cursor:pointer;}", "p.jsx-1795768421{font-size:14px;font-weight:500;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;text-align:center;text-transform:uppercase;}"]));
};
TextIcon.defaultProps = {
  onClick: undefined
};
TextIcon.propTypes = {
  name: propTypes.string.isRequired,
  dataTestId: propTypes.string,
  onClick: propTypes.func
};

var ImageIcon = function ImageIcon(_ref) {
  var src = _ref.src,
      onClick = _ref.onClick,
      dataTestId = _ref.dataTestId;
  return React.createElement("div", {
    onClick: onClick,
    "data-test": dataTestId,
    className: "jsx-4170436681"
  }, React.createElement("img", {
    src: src,
    alt: "user avatar",
    className: "jsx-4170436681"
  }), React.createElement(_JSXStyle, {
    id: "4170436681"
  }, ["img.jsx-4170436681{max-width:100%;max-height:100%;}", "div.jsx-4170436681{width:48px;height:48px;}"]));
};
ImageIcon.defaultProps = {
  onClick: undefined
};
ImageIcon.propTypes = {
  src: propTypes.string.isRequired,
  dataTestId: propTypes.string,
  onClick: propTypes.func
};

var ProfileName = function ProfileName(_ref) {
  var children = _ref.children;
  return React.createElement("div", {
    "data-test": "headerbar-profile-username",
    className: "jsx-2223023701"
  }, children, React.createElement(_JSXStyle, {
    id: "2223023701"
  }, ["div.jsx-2223023701{margin-bottom:3px;font-size:16px;line-height:19px;}"]));
};

ProfileName.propTypes = {
  children: propTypes.string
};

var ProfileEmail = function ProfileEmail(_ref2) {
  var children = _ref2.children;
  return React.createElement("div", {
    "data-test": "headerbar-profile-user-email",
    className: "jsx-1072768994"
  }, children, React.createElement(_JSXStyle, {
    id: "1072768994"
  }, ["div.jsx-1072768994{margin-bottom:6px;font-size:14px;line-height:16px;}"]));
};

ProfileEmail.propTypes = {
  children: propTypes.string
};

var ProfileEdit = function ProfileEdit(_ref3) {
  var children = _ref3.children,
      contextPath = _ref3.contextPath;
  return React.createElement("a", {
    href: "".concat(contextPath, "/dhis-web-user-profile/#/profile"),
    "data-test": "headerbar-profile-edit-profile-link",
    className: "jsx-3477773315"
  }, children, React.createElement(_JSXStyle, {
    id: "3477773315"
  }, ["a.jsx-3477773315{color:rgba(0,0,0,0.87);font-size:12px;line-height:14px;-webkit-text-decoration:underline;text-decoration:underline;cursor:pointer;}"]));
};

ProfileEdit.propTypes = {
  children: propTypes.string,
  contextPath: propTypes.string
};

var ProfileDetails = function ProfileDetails(_ref4) {
  var name = _ref4.name,
      email = _ref4.email,
      contextPath = _ref4.contextPath;
  return React.createElement("div", {
    className: "jsx-3814112749"
  }, React.createElement(ProfileName, null, name), React.createElement(ProfileEmail, null, email), React.createElement(ProfileEdit, {
    contextPath: contextPath
  }, i18n.t('Edit profile')), React.createElement(_JSXStyle, {
    id: "3814112749"
  }, ["div.jsx-3814112749{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;margin-left:20px;color:#000;font-size:14px;font-weight:400;}"]));
};

ProfileDetails.propTypes = {
  contextPath: propTypes.string,
  email: propTypes.string,
  name: propTypes.string
};
var ProfileHeader = function ProfileHeader(_ref5) {
  var name = _ref5.name,
      email = _ref5.email,
      img = _ref5.img,
      contextPath = _ref5.contextPath;
  return React.createElement("div", {
    className: "jsx-3625287538"
  }, img ? React.createElement(ImageIcon, {
    src: img
  }) : React.createElement(TextIcon, {
    name: name
  }), React.createElement(ProfileDetails, {
    name: name,
    email: email,
    contextPath: contextPath
  }), React.createElement(_JSXStyle, {
    id: "3625287538"
  }, ["div.jsx-3625287538{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;margin-left:24px;padding-top:20px;}"]));
};
ProfileHeader.propTypes = {
  contextPath: propTypes.string.isRequired,
  email: propTypes.string,
  img: propTypes.string,
  name: propTypes.string
};

var iconStyle = {
  styles: React.createElement(_JSXStyle, {
    id: "2224778647"
  }, ["svg.jsx-2224778647{fill:".concat(colors.grey700, ";cursor:pointer;height:24px;width:24px;}")]),
  className: "jsx-2224778647"
};
var list = [{
  icon: React.createElement(Settings, {
    className: iconStyle.className
  }),
  label: i18n.t('Settings'),
  value: 'settings',
  link: "/dhis-web-user-profile/#/settings"
}, {
  icon: React.createElement(Account, {
    className: iconStyle.className
  }),
  label: i18n.t('Account'),
  value: 'account',
  link: "/dhis-web-user-profile/#/account"
}, {
  icon: React.createElement(Help, {
    className: iconStyle.className
  }),
  label: i18n.t('Help'),
  value: 'help',
  link: 'https://docs.dhis2.org/master/en/user/html/dhis2_user_manual_en.html',
  nobase: true
}, {
  icon: React.createElement(Info, {
    className: iconStyle.className
  }),
  label: i18n.t('About DHIS2'),
  value: 'about',
  link: "/dhis-web-user-profile/#/aboutPage"
}, {
  icon: React.createElement(Exit, {
    className: iconStyle.className
  }),
  label: i18n.t('Logout'),
  value: 'logout',
  link: "/dhis-web-commons-security/logout.action"
}];

var ProfileContents = function ProfileContents(_ref) {
  var name = _ref.name,
      email = _ref.email,
      avatar = _ref.avatar,
      contextPath = _ref.contextPath;
  return React.createElement(Card, null, React.createElement("div", {
    className: "jsx-374793399"
  }, React.createElement(ProfileHeader, {
    name: name,
    email: email,
    img: avatar,
    contextPath: contextPath
  }), React.createElement(Divider, {
    margin: "13px 0 7px 0"
  }), React.createElement("ul", {
    "data-test": "headerbar-profile-menu",
    className: "jsx-374793399"
  }, list.map(function (_ref2) {
    var label = _ref2.label,
        value = _ref2.value,
        icon = _ref2.icon,
        link = _ref2.link,
        nobase = _ref2.nobase;
    return React.createElement(MenuItem, {
      href: nobase ? link : "".concat(contextPath).concat(link),
      key: "h-mi-".concat(value),
      label: label,
      value: value,
      icon: icon
    });
  }))), iconStyle.styles, React.createElement(_JSXStyle, {
    id: "374793399"
  }, ["div.jsx-374793399{width:100%;padding:0;}", "ul.jsx-374793399{padding:0;margin:0;}", "a.jsx-374793399,a.jsx-374793399:hover,a.jsx-374793399:focus,a.jsx-374793399:active,a.jsx-374793399:visited{-webkit-text-decoration:none;text-decoration:none;display:block;}"]));
};

ProfileContents.propTypes = {
  avatar: propTypes.element,
  contextPath: propTypes.string,
  email: propTypes.string,
  name: propTypes.string
};
var ProfileMenu = function ProfileMenu(_ref3) {
  var avatar = _ref3.avatar,
      name = _ref3.name,
      email = _ref3.email,
      contextPath = _ref3.contextPath;
  return React.createElement("div", {
    "data-test": "headerbar-profile-menu",
    className: "jsx-3620236321"
  }, React.createElement(ProfileContents, {
    name: name,
    email: email,
    avatar: avatar,
    contextPath: contextPath
  }), React.createElement(_JSXStyle, {
    id: "3620236321"
  }, ["div.jsx-3620236321{z-index:10000;position:absolute;top:34px;right:-6px;width:310px;border-top:4px solid transparent;}"]));
};
ProfileMenu.propTypes = {
  avatar: propTypes.element,
  contextPath: propTypes.string,
  email: propTypes.string,
  name: propTypes.string
};

function avatarPath(avatar, contextPath) {
  if (!avatar) {
    return null;
  }

  return "".concat(contextPath, "/api/fileResources/").concat(avatar.id, "/data");
}

var Profile =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Profile, _React$Component);

  function Profile() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Profile);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Profile)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      show: false
    });

    _defineProperty(_assertThisInitialized(_this), "onDocClick", function (evt) {
      if (_this.elContainer && !_this.elContainer.contains(evt.target)) {
        _this.setState({
          show: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onToggle", function () {
      return _this.setState({
        show: !_this.state.show
      });
    });

    return _this;
  }

  _createClass(Profile, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('click', this.onDocClick);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.onDocClick);
    }
  }, {
    key: "userIcon",
    value: function userIcon(me, contextPath) {
      var avatar = avatarPath(me.avatar, contextPath);

      if (avatar) {
        return React.createElement(ImageIcon, {
          src: avatar,
          onClick: this.onToggle,
          dataTestId: "headerbar-profile-icon-image"
        });
      }

      return React.createElement(TextIcon, {
        name: me.name,
        onClick: this.onToggle,
        dataTestId: "headerbar-profile-icon-text"
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          user = _this$props.user,
          contextPath = _this$props.contextPath;
      return React.createElement("div", {
        ref: function ref(c) {
          return _this2.elContainer = c;
        },
        "data-test": "headerbar-profile",
        className: "jsx-661915851"
      }, this.userIcon(user, contextPath), this.state.show ? React.createElement(ProfileMenu, {
        avatar: avatarPath(user.avatar, contextPath),
        name: user.name,
        email: user.email,
        contextPath: contextPath
      }) : null, React.createElement(_JSXStyle, {
        id: "661915851"
      }, ["div.jsx-661915851{position:relative;width:36px;height:36px;margin:2px 12px 0 24px;}"]));
    }
  }]);

  return Profile;
}(React.Component);
Profile.propTypes = {
  contextPath: propTypes.string.isRequired,
  user: propTypes.object.isRequired
};

var logoStyles = {
  styles: React.createElement(_JSXStyle, {
    id: "3467673193"
  }, ["svg.jsx-3467673193{height:25px;width:27px;}", "img.jsx-3467673193{max-height:100%;min-height:auto;width:auto;}"]),
  className: "jsx-3467673193"
};
var query = {
  customLogo: {
    resource: 'staticContent/logo_banner'
  }
};

var pathExists = function pathExists(data) {
  return data && data.customLogo && data.customLogo.images && data.customLogo.images.png;
};

var LogoImage = function LogoImage() {
  var _useDataQuery = useDataQuery(query),
      loading = _useDataQuery.loading,
      error = _useDataQuery.error,
      data = _useDataQuery.data;

  if (loading) return null;
  var Logo;

  if (!error && pathExists(data)) {
    Logo = React.createElement("img", {
      alt: "Headerbar Logo",
      src: data.customLogo.images.png,
      className: logoStyles.className
    });
  } else {
    Logo = React.createElement(LogoIconWhite, {
      className: logoStyles.className
    });
  }

  return React.createElement("div", {
    className: "jsx-3930434724"
  }, Logo, logoStyles.styles, React.createElement(_JSXStyle, {
    id: "3930434724"
  }, ["div.jsx-3930434724{padding:4px;min-width:48px;max-width:250px;height:48px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;overflow:hidden;}"]));
};

var Logo = function Logo(_ref) {
  var baseUrl = _ref.baseUrl;
  return React.createElement("div", {
    "data-test": "headerbar-logo",
    className: "jsx-3075771711"
  }, React.createElement("a", {
    href: baseUrl,
    className: "jsx-3075771711"
  }, React.createElement(LogoImage, null)), React.createElement(_JSXStyle, {
    id: "3075771711"
  }, ["div.jsx-3075771711{box-sizing:border-box;min-width:49px;max-height:48px;margin:0 12px 0 0;border-right:1px solid rgba(32,32,32,0.15);}", "a.jsx-3075771711,a.jsx-3075771711:hover,a.jsx-3075771711:focus,a.jsx-3075771711:active,a.jsx-3075771711:visited{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}"]));
};
Logo.propTypes = {
  baseUrl: propTypes.string.isRequired
};

var Title = function Title(_ref) {
  var app = _ref.app,
      instance = _ref.instance;
  return React.createElement("div", {
    "data-test": "headerbar-title",
    className: "jsx-2721515324"
  }, app ? "".concat(instance, " - ").concat(app) : "".concat(instance), React.createElement(_JSXStyle, {
    id: "2721515324"
  }, ["div.jsx-2721515324{overflow:hidden;text-overflow:ellipsis;font-size:14px;font-weight:500;-webkit-letter-spacing:0.01em;-moz-letter-spacing:0.01em;-ms-letter-spacing:0.01em;letter-spacing:0.01em;white-space:nowrap;}"]));
};
Title.propTypes = {
  app: propTypes.string,
  instance: propTypes.string
};

function Email(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    className: className
  }, React.createElement("path", {
    d: "M40 8H8c-2.21 0-3.98 1.79-3.98 4L4 36c0 2.21 1.79 4 4 4h32c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zm0 8L24 26 8 16v-4l16 10 16-10v4z"
  }), React.createElement("path", {
    d: "M0 0h48v48H0z",
    fill: "none"
  }));
}
Email.propTypes = {
  className: propTypes.string
};

function Message(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "48",
    height: "48",
    viewBox: "0 0 48 48",
    className: className
  }, React.createElement("path", {
    d: "M40 4H8C5.79 4 4.02 5.79 4.02 8L4 44l8-8h28c2.21 0 4-1.79 4-4V8c0-2.21-1.79-4-4-4zm-4 24H12v-4h24v4zm0-6H12v-4h24v4zm0-6H12v-4h24v4z"
  }), React.createElement("path", {
    d: "M0 0h48v48H0z",
    fill: "none"
  }));
}
Message.propTypes = {
  className: propTypes.string
};

var messageIcon = {
  styles: React.createElement(_JSXStyle, {
    id: "255544020"
  }, ["svg.jsx-255544020{fill:".concat(colors.white, ";cursor:pointer;height:24px;width:24px;}")]),
  className: "jsx-255544020"
};
var interpretationIcon = {
  styles: React.createElement(_JSXStyle, {
    id: "255544020"
  }, ["svg.jsx-255544020{fill:".concat(colors.white, ";cursor:pointer;height:24px;width:24px;}")]),
  className: "jsx-255544020"
};

function icon(kind) {
  if (kind === 'message') {
    return React.createElement(Message, {
      className: messageIcon.className
    }, messageIcon.styles);
  } else {
    return React.createElement(Email, {
      className: interpretationIcon.className
    }, interpretationIcon.styles);
  }
}

var NotificationIcon = function NotificationIcon(_ref) {
  var count = _ref.count,
      href = _ref.href,
      kind = _ref.kind,
      dataTestId = _ref.dataTestId;
  return React.createElement("a", {
    href: href,
    "data-test": dataTestId,
    className: _JSXStyle.dynamic([["1854025327", [theme.secondary300]]]) + " " + (kind || "")
  }, icon(kind), count > 0 && React.createElement("span", {
    "data-test": "".concat(dataTestId, "-count"),
    className: _JSXStyle.dynamic([["1854025327", [theme.secondary300]]])
  }, count), React.createElement(_JSXStyle, {
    id: "1854025327",
    dynamic: [theme.secondary300]
  }, ["a.__jsx-style-dynamic-selector{position:relative;margin:8px 24px 0 0;cursor:pointer;}", "span.__jsx-style-dynamic-selector{z-index:1;position:absolute;top:-6px;right:-10px;width:16px;height:16px;border-radius:50%;background-color:".concat(theme.secondary300, ";color:#fff;font-size:9px;font-weight:500;line-height:16px;text-align:center;cursor:inherit;}")]));
};
NotificationIcon.defaultProps = {
  count: 0
};
NotificationIcon.propTypes = {
  href: propTypes.string.isRequired,
  count: propTypes.number,
  dataTestId: propTypes.string,
  kind: propTypes.oneOf(['interpretation', 'message'])
};

var Notifications = function Notifications(_ref) {
  var interpretations = _ref.interpretations,
      messages = _ref.messages,
      contextPath = _ref.contextPath;
  return React.createElement("div", {
    "data-test": "headerbar-notifications",
    className: "jsx-1272882457"
  }, React.createElement(NotificationIcon, {
    count: interpretations,
    href: "".concat(contextPath, "/dhis-web-interpretation"),
    kind: "message",
    dataTestId: "headerbar-interpretations"
  }), React.createElement(NotificationIcon, {
    message: "email",
    count: messages,
    href: "".concat(contextPath, "/dhis-web-messaging"),
    kind: "interpretation",
    dataTestId: "headerbar-messages"
  }), React.createElement(_JSXStyle, {
    id: "1272882457"
  }, ["div.jsx-1272882457{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}"]));
};
Notifications.propTypes = {
  contextPath: propTypes.string,
  interpretations: propTypes.number,
  messages: propTypes.number
};

var query$1 = {
  systemInfo: {
    resource: 'system/info'
  },
  user: {
    resource: 'me'
  },
  apps: {
    resource: 'action::menu/getModules'
  },
  notifications: {
    resource: 'me/dashboard'
  }
};
var HeaderBar = function HeaderBar(_ref) {
  var appName = _ref.appName,
      className = _ref.className;

  var _useDataQuery = useDataQuery(query$1),
      loading = _useDataQuery.loading,
      error = _useDataQuery.error,
      data = _useDataQuery.data;

  useEffect(function () {
    var getPath = function getPath(path) {
      return path.startsWith('http:') || path.startsWith('https:') ? path : "".concat(data.systemInfo.contextPath, "/api/").concat(path);
    };

    if (!loading && !error) data.apps.modules.forEach(function (app) {
      app.icon = getPath(app.icon);
      app.defaultAction = getPath(app.defaultAction);
    });
  }, [data]);

  if (!loading && !error) {
    // TODO: This will run every render which is probably wrong!  Also, setting the global locale shouldn't be done in the headerbar
    var locale = data.user.settings.keyUiLocale || 'en';
    i18n.changeLanguage(locale);
  }

  return React.createElement("header", {
    className: _JSXStyle.dynamic([["1335571883", [colors.white]]]) + " " + (className || "")
  }, !loading && !error && React.createElement(React.Fragment, null, React.createElement(Logo, {
    baseUrl: data.systemInfo.contextPath
  }), React.createElement(Title, {
    app: appName,
    instance: data.systemInfo.systemName
  }), React.createElement("div", {
    className: _JSXStyle.dynamic([["1335571883", [colors.white]]]) + " " + "right-control-spacer"
  }), React.createElement(Notifications, {
    interpretations: data.notifications.unreadInterpretations,
    messages: data.notifications.unreadMessageConversations,
    contextPath: data.systemInfo.contextPath
  }), React.createElement(Apps$1, {
    apps: data.apps.modules,
    contextPath: data.systemInfo.contextPath
  }), React.createElement(Profile, {
    user: data.user,
    contextPath: data.systemInfo.contextPath
  })), React.createElement(_JSXStyle, {
    id: "1335571883",
    dynamic: [colors.white]
  }, ["header.__jsx-style-dynamic-selector{background-color:#2c6693;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:48px;border-bottom:1px solid rgba(32,32,32,0.15);color:".concat(colors.white, ";}"), ".right-control-spacer.__jsx-style-dynamic-selector{margin-left:auto;}"]));
};
HeaderBar.propTypes = {
  appName: propTypes.string,
  className: propTypes.string
};

var ErrorMessage = function ErrorMessage(_ref) {
  var children = _ref.children,
      dataTest = _ref.dataTest;
  return React.createElement("span", {
    "data-test": "".concat(dataTest, "-error"),
    className: _JSXStyle.dynamic([["3198585030", [colors.grey800, spacers.dp4, theme.error]]])
  }, children, React.createElement(_JSXStyle, {
    id: "3198585030",
    dynamic: [colors.grey800, spacers.dp4, theme.error]
  }, ["span.__jsx-style-dynamic-selector{font-size:14px;color:".concat(colors.grey800, ";margin:").concat(spacers.dp4, ";color:").concat(theme.error, ";}")]));
};
ErrorMessage.propTypes = {
  children: propTypes$1.any.isRequired,
  dataTest: propTypes$1.string.isRequired
};

/**
 * @module
 * @returns {React.Component}
 */

var FolderOpen = function FolderOpen(_ref) {
  var dataTest = _ref.dataTest;
  return React.createElement("svg", {
    width: "18px",
    height: "18px",
    viewBox: "0 0 18 18",
    version: "1.1",
    "data-test": "".concat(dataTest, "-iconfolderopen"),
    className: "jsx-2091325045"
  }, React.createElement("g", {
    id: "icon/folder/open",
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd",
    className: "jsx-2091325045"
  }, React.createElement("g", {
    id: "Group",
    transform: "translate(0.000000, 3.000000)",
    stroke: "#6E7A8A",
    className: "jsx-2091325045"
  }, React.createElement("path", {
    d: "M2,0.5 C1.17157288,0.5 0.5,1.17157288 0.5,2 L0.5,10 C0.5,10.8284271 1.17157288,11.5 2,11.5 L12,11.5 C12.8284271,11.5 13.5,10.8284271 13.5,10 L13.5,4 C13.5,3.17157288 12.8284271,2.5 12,2.5 L6.69098301,2.5 L5.82917961,0.776393202 C5.7444836,0.607001188 5.57135204,0.5 5.38196601,0.5 L2,0.5 Z",
    id: "Path-2",
    fill: "#A0ADBA",
    className: "jsx-2091325045"
  }), React.createElement("path", {
    d: "M1.53632259,10.7093809 C1.47575089,10.7941813 1.44318932,10.8957885 1.44318932,11 C1.44318932,11.2761424 1.66704695,11.5 1.94318932,11.5 L12.4853821,11.5 C12.6468577,11.5 12.7983931,11.4220172 12.8922488,11.2906191 L16.4636774,6.2906191 C16.5242491,6.20581872 16.5568107,6.10421149 16.5568107,6 C16.5568107,5.72385763 16.3329531,5.5 16.0568107,5.5 L5.5146179,5.5 C5.35314234,5.5 5.20160692,5.57798284 5.10775116,5.7093809 L1.53632259,10.7093809 Z",
    id: "Path-3",
    fill: "#FBFCFD",
    className: "jsx-2091325045"
  }))), React.createElement(_JSXStyle, {
    id: "2091325045"
  }, ["svg.jsx-2091325045{margin:3px 0;display:block;}"]));
};
FolderOpen.propTypes = {
  dataTest: propTypes.string.isRequired
};

/**
 * @module
 * @returns {React.Component}
 */

var FolderClosed = function FolderClosed(_ref) {
  var dataTest = _ref.dataTest;
  return React.createElement("svg", {
    width: "18px",
    height: "18px",
    viewBox: "0 0 18 18",
    version: "1.1",
    "data-test": "".concat(dataTest, "-iconfolderclosed"),
    className: "jsx-3201893673"
  }, React.createElement("g", {
    id: "icon/folder/closed",
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd",
    className: "jsx-3201893673"
  }, React.createElement("path", {
    d: "M2,3.5 C1.17157288,3.5 0.5,4.17157288 0.5,5 L0.5,13 C0.5,13.8284271 1.17157288,14.5 2,14.5 L12,14.5 C12.8284271,14.5 13.5,13.8284271 13.5,13 L13.5,7 C13.5,6.17157288 12.8284271,5.5 12,5.5 L6.69098301,5.5 L5.82917961,3.7763932 C5.7444836,3.60700119 5.57135204,3.5 5.38196601,3.5 L2,3.5 Z",
    id: "Path-2",
    stroke: "#6E7A8A",
    fill: "#D5DDE5",
    className: "jsx-3201893673"
  })), React.createElement(_JSXStyle, {
    id: "3201893673"
  }, ["svg.jsx-3201893673{display:block;margin:3px 0;}"]));
};
FolderClosed.propTypes = {
  dataTest: propTypes.string.isRequired
};

/**
 * @module
 * @returns {React.Component}
 */

var Single = function Single(_ref) {
  var dataTest = _ref.dataTest;
  return React.createElement("svg", {
    height: "18px",
    version: "1.1",
    viewBox: "0 0 18 18",
    width: "18px",
    "data-test": "".concat(dataTest, "-iconsingle"),
    className: "jsx-3201893673"
  }, React.createElement("g", {
    fill: "none",
    fillRule: "evenodd",
    id: "icon/single",
    stroke: "none",
    strokeWidth: "1",
    className: "jsx-3201893673"
  }, React.createElement("rect", {
    fill: "#A0ADBA",
    height: "4",
    id: "Rectangle",
    rx: "1",
    width: "4",
    x: "7",
    y: "7",
    className: "jsx-3201893673"
  })), React.createElement(_JSXStyle, {
    id: "3201893673"
  }, ["svg.jsx-3201893673{display:block;margin:3px 0;}"]));
};
Single.propTypes = {
  dataTest: propTypes.string.isRequired
};

/**
 * @module
 * @returns {React.Component}
 */

var Empty = function Empty(_ref) {
  var dataTest = _ref.dataTest;
  return React.createElement("svg", {
    height: "18px",
    version: "1.1",
    viewBox: "0 0 18 18",
    width: "18px",
    "data-test": "".concat(dataTest, "-iconempty"),
    className: "jsx-3201893673"
  }, React.createElement("g", {
    fill: "none",
    fillRule: "evenodd",
    id: "icon/empty",
    stroke: "none",
    strokeWidth: "1",
    className: "jsx-3201893673"
  }), React.createElement(_JSXStyle, {
    id: "3201893673"
  }, ["svg.jsx-3201893673{display:block;margin:3px 0;}"]));
};
Empty.propTypes = {
  dataTest: propTypes.string.isRequired
};

var UNIT_ID_PATTERN = '[a-zA-Z][a-zA-Z0-9]{10}';
/* eslint-disable */

var orgUnitPathPropType = function orgUnitPathPropType(propValue, key, compName, location, propFullName) {
  if (!new RegExp("(/".concat(UNIT_ID_PATTERN, ")+")).test(propValue[key])) {
    return new Error("Invalid org unit path `".concat(propValue[key], "` supplied to `").concat(compName, ".").concat(propFullName, "`"));
  }
};
/* eslint-enable */

/**
 * @param {Object} props
 * @param {string} props.label
 * @param {Function} props.onToggleOpen
 * @param {bool} [props.loading]
 * @returns {React.Component}
 */

var DisabledSelectionLabel = function DisabledSelectionLabel(_ref) {
  var label = _ref.label,
      loading = _ref.loading,
      onToggleOpen = _ref.onToggleOpen;
  return React.createElement(SingleSelectionLabel, {
    checked: false,
    loading: loading,
    label: label,
    onChange: onToggleOpen
  });
};

DisabledSelectionLabel.propTypes = {
  label: propTypes$1.string.isRequired,
  onToggleOpen: propTypes$1.func.isRequired,
  loading: propTypes$1.bool
};
/**
 * @param {Object} props
 * @param {string} props.label
 * @param {bool} [props.checked]
 * @param {bool} [props.loading]
 * @param {Function} [props.onChange]
 * @returns {React.Component}
 */

var SingleSelectionLabel = function SingleSelectionLabel(_ref2) {
  var checked = _ref2.checked,
      label = _ref2.label,
      onChange = _ref2.onChange,
      loading = _ref2.loading;
  return React.createElement("span", {
    onClick: function onClick(event) {
      var payload = {
        checked: !checked
      };
      onChange(payload, event);
    },
    className: _JSXStyle.dynamic([["321503310", [colors.grey900, colors.teal700]]]) + " " + (cx({
      checked: checked,
      loading: loading
    }) || "")
  }, label, React.createElement(_JSXStyle, {
    id: "321503310",
    dynamic: [colors.grey900, colors.teal700]
  }, ["span.__jsx-style-dynamic-selector{background:transparent;border-radius:3px;color:".concat(colors.grey900, ";cursor:pointer;display:inline-block;font-size:14px;line-height:24px;padding:0 5px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;white-space:nowrap;}"), ".checked.__jsx-style-dynamic-selector{background:".concat(colors.teal700, ";color:white;}"), ".loading.__jsx-style-dynamic-selector{cursor:auto;}"]));
};

SingleSelectionLabel.propTypes = {
  label: propTypes$1.string.isRequired,
  checked: propTypes$1.bool,
  loading: propTypes$1.bool,
  onChange: propTypes$1.func
};
/**
 * @param {Object} props
 * @param {bool} props.highlighted
 * @param {React.Component|React.Component[]} props.children
 * @returns {React.Component}
 */

var LabelContainer = function LabelContainer(_ref3) {
  var highlighted = _ref3.highlighted,
      children = _ref3.children;
  return React.createElement("div", {
    className: _JSXStyle.dynamic([["495975020", [colors.teal200]]]) + " " + (cx({
      highlighted: highlighted
    }) || "")
  }, React.createElement("span", {
    className: _JSXStyle.dynamic([["495975020", [colors.teal200]]])
  }, children), React.createElement(_JSXStyle, {
    id: "495975020",
    dynamic: [colors.teal200]
  }, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", "span.__jsx-style-dynamic-selector{display:block;}", ".highlighted.__jsx-style-dynamic-selector{background:".concat(colors.teal200, ";padding-right:4px;}")]));
};

LabelContainer.propTypes = {
  children: propTypes$1.node,
  highlighted: propTypes$1.bool
};
/**
 * @param {Object} props
 * @param {bool} props.hasChildren
 * @param {bool} props.open
 * @returns {React.Component}
 */

var Icon = function Icon(_ref4) {
  var loading = _ref4.loading,
      hasChildren = _ref4.hasChildren,
      open = _ref4.open,
      dataTest = _ref4.dataTest;

  if (loading) {
    return React.createElement(Empty, {
      dataTest: dataTest
    });
  }

  if (!hasChildren) {
    return React.createElement(Single, {
      dataTest: dataTest
    });
  }

  if (open) {
    return React.createElement(FolderOpen, {
      dataTest: dataTest
    });
  }

  return React.createElement(FolderClosed, {
    dataTest: dataTest
  });
};

Icon.propTypes = {
  dataTest: propTypes$1.string.isRequired,
  hasChildren: propTypes$1.bool,
  loading: propTypes$1.bool,
  open: propTypes$1.bool
};

var IconizedCheckbox = function IconizedCheckbox(_ref5) {
  var checked = _ref5.checked,
      dataTest = _ref5.dataTest,
      hasChildren = _ref5.hasChildren,
      indeterminate = _ref5.indeterminate,
      label = _ref5.label,
      loading = _ref5.loading,
      name = _ref5.name,
      open = _ref5.open,
      value = _ref5.value,
      onChange = _ref5.onChange;
  var icon = React.createElement(Icon, {
    loading: loading,
    open: open,
    hasChildren: hasChildren,
    dataTest: dataTest
  });
  var checkboxLabel = React.createElement(React.Fragment, null, React.createElement("span", {
    className: "jsx-3097236308"
  }, icon), label, React.createElement(_JSXStyle, {
    id: "3097236308"
  }, ["span.jsx-3097236308{display:inline-block;margin-right:4px;}"]));
  return React.createElement(React.Fragment, null, React.createElement(Checkbox, {
    dense: true,
    checked: checked,
    name: name,
    value: value,
    label: checkboxLabel,
    indeterminate: indeterminate,
    onChange: onChange
  }));
};

IconizedCheckbox.propTypes = {
  checked: propTypes$1.bool.isRequired,
  dataTest: propTypes$1.string.isRequired,
  hasChildren: propTypes$1.bool.isRequired,
  indeterminate: propTypes$1.bool.isRequired,
  label: propTypes$1.string.isRequired,
  loading: propTypes$1.bool.isRequired,
  name: propTypes$1.string.isRequired,
  open: propTypes$1.bool.isRequired,
  value: propTypes$1.string.isRequired,
  onChange: propTypes$1.func.isRequired
};

var createNewSelected = function createNewSelected(_ref6) {
  var selected = _ref6.selected,
      path = _ref6.path,
      checked = _ref6.checked,
      singleSelection = _ref6.singleSelection;
  var pathIndex = selected.indexOf(path);
  if (checked && pathIndex !== -1) return selected;
  if (singleSelection && checked) return [path];
  if (checked) return [].concat(_toConsumableArray(selected), [path]);
  if (pathIndex === -1) return selected;
  if (singleSelection) return [];
  if (selected.indexOf(path) === 0) return selected.slice(1);
  var prevSlice = selected.slice(0, pathIndex);
  var nextSlice = selected.slice(pathIndex + 1);
  return [].concat(_toConsumableArray(prevSlice), _toConsumableArray(nextSlice));
};
/**
 * @module
 * @param {Label.PropTypes} props
 * @returns {React.Component}
 */


var Label = function Label(_ref7) {
  var id = _ref7.id,
      path = _ref7.path,
      open = _ref7.open,
      loading = _ref7.loading,
      checked = _ref7.checked,
      onChange = _ref7.onChange,
      dataTest = _ref7.dataTest,
      selected = _ref7.selected,
      hasChildren = _ref7.hasChildren,
      highlighted = _ref7.highlighted,
      displayName = _ref7.displayName,
      onToggleOpen = _ref7.onToggleOpen,
      disableSelection = _ref7.disableSelection,
      singleSelection = _ref7.singleSelection,
      hasSelectedDescendants = _ref7.hasSelectedDescendants;

  var onClick = function onClick(_ref8, event) {
    var checked = _ref8.checked;
    var newSelected = createNewSelected({
      selected: selected,
      path: path,
      checked: checked,
      singleSelection: singleSelection
    });
    onChange({
      id: id,
      path: path,
      checked: checked,
      selected: newSelected
    }, event);
  };

  if (disableSelection) {
    return React.createElement(LabelContainer, {
      highlighted: highlighted
    }, React.createElement(DisabledSelectionLabel, {
      label: displayName,
      loading: loading,
      onToggleOpen: onToggleOpen
    }));
  }

  if (singleSelection) {
    return React.createElement(LabelContainer, {
      highlighted: highlighted
    }, React.createElement(SingleSelectionLabel, {
      checked: checked,
      label: displayName,
      onChange: onClick,
      loading: loading
    }, displayName));
  }

  return React.createElement(LabelContainer, {
    highlighted: highlighted
  }, React.createElement(IconizedCheckbox, {
    dataTest: dataTest,
    checked: checked,
    name: "org-unit",
    value: id,
    label: displayName,
    loading: loading,
    indeterminate: !checked && hasSelectedDescendants,
    onChange: onClick,
    open: open,
    hasChildren: hasChildren
  }));
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} id
 * @prop {string} path
 * @prop {string} displayName
 * @prop {bool} open
 * @prop {bool} loading
 * @prop {bool} hasChildren
 * @prop {Function} [onChange]
 * @prop {Function} [onToggleOpen]
 * @prop {bool} [checked]
 * @prop {bool} [highlighted]
 * @prop {bool} [disableSelection]
 * @prop {bool} [singleSelection]
 * @prop {bool} [hasSelectedDescendants]
 */


Label.propTypes = {
  dataTest: propTypes$1.string.isRequired,
  displayName: propTypes$1.string.isRequired,
  hasChildren: propTypes$1.bool.isRequired,
  id: propTypes$1.string.isRequired,
  loading: propTypes$1.bool.isRequired,
  open: propTypes$1.bool.isRequired,
  path: propTypes$1.string.isRequired,
  onChange: propTypes$1.func.isRequired,
  onToggleOpen: propTypes$1.func.isRequired,
  checked: propTypes$1.bool,
  disableSelection: propTypes$1.bool,
  hasSelectedDescendants: propTypes$1.bool,
  highlighted: propTypes$1.bool,
  selected: propTypes$1.arrayOf(orgUnitPathPropType),
  singleSelection: propTypes$1.bool
};

/**
 * @param {string[]} includedPaths
 * @param {string} path
 * @returns {bool}
 */
var isPathIncluded = function isPathIncluded(includedPaths, path) {
  var isIncluded = includedPaths.some(function (includedPath) {
    if (path === includedPath) return true;
    return includedPath.indexOf("".concat(path, "/")) === 0;
  });
  return isIncluded;
};
/**
 * Returns all the childrenIds that should be rendered.
 * An id will be included if it's parent's path + the id is inside
 * the "filter" or the parent's path + id is a substring
 * of the paths in "filter" (then it's a parent path of
 * the units that should be included itself)
 *
 * @param {Object} node
 * @param {{ id: String }[]} node.children
 * @param {string[]} includedPaths
 * @returns {string[]}
 */


var computeChildNodes = function computeChildNodes(node, filter) {
  if (!filter.length) {
    return node.children;
  }

  return node.children.filter(function (child) {
    return isPathIncluded(filter, "".concat(node.path, "/").concat(child.id));
  });
};

/**
 * Checks wether there are descendants of a path in the
 * array of selected paths
 *
 * @param {string} path
 * @param {string[]} selected
 * @returns {bool}
 */
var hasDescendantSelectedPaths = function hasDescendantSelectedPaths(path, selected) {
  return selected.some(function (selectedPath) {
    return selectedPath !== path && selectedPath.indexOf(path) === 0;
  });
};

/**
 * @param {Object} args
 * @param {string} args.path
 * @param {string} [args.errorMessage]
 * @param {string} [args.autoExpandLoadingError]
 * @param {string[]} args.expanded
 * @param {Function} [args.onExpand]
 * @param {Function} [args.onCollapse]
 * @returns {Object}
 */

var useOpenState = function useOpenState(_ref) {
  var path = _ref.path,
      expanded = _ref.expanded,
      onExpand = _ref.onExpand,
      onCollapse = _ref.onCollapse,
      errorMessage = _ref.errorMessage,
      autoExpandLoadingError = _ref.autoExpandLoadingError;
  var autoExpand = autoExpandLoadingError && !!errorMessage;

  var _useState = useState(!!errorMessage),
      _useState2 = _slicedToArray(_useState, 2),
      openedOnceDueToError = _useState2[0],
      setOpenedOnce = _useState2[1];

  var _useState3 = useState(autoExpand || expanded.includes(path)),
      _useState4 = _slicedToArray(_useState3, 2),
      open = _useState4[0],
      setOpen = _useState4[1];

  useEffect(function () {
    if (autoExpand && !openedOnceDueToError) {
      setOpen(true);
      setOpenedOnce(true);
    }
  }, [autoExpand, openedOnceDueToError]);

  var onToggleOpen = function onToggleOpen() {
    var newOpen = !open;
    var payload = {
      path: path
    };
    setOpen(newOpen);

    if (onExpand && newOpen) {
      onExpand(payload);
    } else if (onCollapse && !newOpen) {
      onCollapse(payload);
    }
  };

  return {
    open: open,
    onToggleOpen: onToggleOpen
  };
};

var fromEntries = function fromEntries(entries) {
  return entries.reduce(function (collection, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        name = _ref2[1];

    return _objectSpread2({}, collection, _defineProperty({}, key, name));
  }, {});
};

var withChildrenFields = 'children[path,displayName,id],displayName,path,id';
var withoutChildrenFields = 'displayName,path,id';
var createOrgUnitQuery = function createOrgUnitQuery(id) {
  return {
    resource: "organisationUnits/".concat(id),
    params: function params(_ref) {
      var withChildren = _ref.withChildren,
          isUserDataViewFallback = _ref.isUserDataViewFallback;
      return {
        isUserDataViewFallback: isUserDataViewFallback,
        fields: withChildren ? withChildrenFields : withoutChildrenFields,
        paging: false
      };
    }
  };
};
var createQuery = function createQuery(ids) {
  return ids.reduce(function (query, id) {
    return _objectSpread2({}, query, _defineProperty({}, id, createOrgUnitQuery(id)));
  }, {});
};
/**
 * @param {Object.<string, Object>[]} nodes
 * @returns {}
 */

var addMissingDisplayNameProps = function addMissingDisplayNameProps(nodes) {
  var nodeEntries = Object.entries(nodes);
  var nodesWithDisplayName = nodeEntries.map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        id = _ref3[0],
        node = _ref3[1];

    var displayName = node.displayName || '';
    return [id, _objectSpread2({}, node, {
      displayName: displayName
    })];
  });
  return fromEntries(nodesWithDisplayName);
};

/**
 * @param {string[]} ids
 * @param {Object} [options]
 * @param {boolean} [options.withChildren]
 * @param {boolean} [options.isUserDataViewFallback]
 * @returns {Object}
 */

var useOrgData = function useOrgData(ids) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$withChildren = _ref.withChildren,
      withChildren = _ref$withChildren === void 0 ? true : _ref$withChildren,
      isUserDataViewFallback = _ref.isUserDataViewFallback;

  var query = createQuery(ids);
  var variables = {
    withChildren: withChildren,
    isUserDataViewFallback: isUserDataViewFallback
  };

  var _useDataQuery = useDataQuery(query, {
    variables: variables
  }),
      loading = _useDataQuery.loading,
      error = _useDataQuery.error,
      data = _useDataQuery.data,
      refetch = _useDataQuery.refetch;

  var nodes = data ? addMissingDisplayNameProps(data) : {};
  return {
    loading: loading,
    error: error,
    data: nodes,
    refetch: refetch
  };
};

var loadingSpinnerStyles = {
  styles: React.createElement(_JSXStyle, {
    id: "1427691812"
  }, [".small.jsx-1427691812{display:block;margin:3px 0;width:18px;height:18px;}"]),
  className: "jsx-1427691812"
};

var LoadingSpinner = function LoadingSpinner() {
  return React.createElement("div", {
    className: "jsx-2503342345"
  }, React.createElement(CircularLoader, {
    small: true,
    className: loadingSpinnerStyles.className
  }), React.createElement("style", null, loadingSpinnerStyles.styles), React.createElement(_JSXStyle, {
    id: "2503342345"
  }, ["div.jsx-2503342345{width:24px;}"]));
};

var OrganisationUnitNode = function OrganisationUnitNode(_ref) {
  var autoExpandLoadingError = _ref.autoExpandLoadingError,
      dataTest = _ref.dataTest,
      disableSelection = _ref.disableSelection,
      displayName = _ref.displayName,
      expanded = _ref.expanded,
      highlighted = _ref.highlighted,
      id = _ref.id,
      isUserDataViewFallback = _ref.isUserDataViewFallback,
      path = _ref.path,
      selected = _ref.selected,
      singleSelection = _ref.singleSelection,
      filter = _ref.filter,
      onChange = _ref.onChange,
      onChildrenLoaded = _ref.onChildrenLoaded,
      onCollapse = _ref.onCollapse,
      onExpand = _ref.onExpand;

  var _useOrgData = useOrgData([id], {
    isUserDataViewFallback: isUserDataViewFallback
  }),
      loading = _useOrgData.loading,
      error = _useOrgData.error,
      data = _useOrgData.data;

  var childNodes = !loading && !error ? computeChildNodes(data[id], filter) : [];
  var hasChildren = !!childNodes.length;
  var hasSelectedDescendants = hasDescendantSelectedPaths(path, selected);
  var isHighlighted = highlighted.includes(path);

  var _useOpenState = useOpenState({
    autoExpandLoadingError: autoExpandLoadingError,
    errorMessage: error && error.toString(),
    path: path,
    expanded: expanded,
    onExpand: onExpand,
    onCollapse: onCollapse
  }),
      open = _useOpenState.open,
      onToggleOpen = _useOpenState.onToggleOpen;

  var isSelected = selected.includes(path);
  useEffect(function () {
    if (!loading && !error && onChildrenLoaded) {
      onChildrenLoaded(data);
    }
  }, [loading, error, onChildrenLoaded]);
  var label = React.createElement(Label, {
    checked: isSelected,
    dataTest: "".concat(dataTest, "-label"),
    disableSelection: disableSelection,
    displayName: displayName,
    hasChildren: hasChildren,
    hasSelectedDescendants: hasSelectedDescendants,
    highlighted: isHighlighted,
    id: id,
    loading: loading,
    onChange: onChange,
    selected: selected,
    onToggleOpen: onToggleOpen,
    open: open,
    path: path,
    singleSelection: singleSelection
  });
  /**
   * No children means no arrow, therefore we have to provide something.
   * While "loading" is true, "hasChildren" is false
   * There are some possible children variants as content of this node:
   *
   * 1. Nothing; There are no children
   * 2. Placeholder: There are children, but the Node is closed (show arrow)
   * 3. Error: There are children and loading information somehow failed
   * 4. Child nodes: There are children and the node is open
   */

  var showPlaceholder = hasChildren && !open && !error;
  var showChildNodes = hasChildren && open && !error;
  return React.createElement(Node, {
    dataTest: "".concat(dataTest, "-node"),
    open: open,
    onOpen: onToggleOpen,
    onClose: onToggleOpen,
    component: label,
    icon: loading && React.createElement(LoadingSpinner, null)
  }, error && React.createElement(ErrorMessage, {
    dataTest: dataTest
  }, i18n.t('Could not load children')), showPlaceholder && React.createElement("span", {
    "data-test": "".concat(dataTest, "-placeholder")
  }), showChildNodes && childNodes.map(function (child) {
    var childPath = "".concat(path, "/").concat(child.id);
    var grandChildNodes = computeChildNodes(child, filter);
    return React.createElement(OrganisationUnitNode, {
      key: childPath,
      autoExpandLoadingError: autoExpandLoadingError,
      childNodes: grandChildNodes,
      dataTest: dataTest,
      disableSelection: disableSelection,
      displayName: child.displayName,
      expanded: expanded,
      filter: filter,
      highlighted: highlighted,
      id: child.id,
      isUserDataViewFallback: isUserDataViewFallback,
      path: childPath,
      selected: selected,
      singleSelection: singleSelection,
      onChange: onChange,
      onChildrenLoaded: onChildrenLoaded,
      onCollapse: onCollapse,
      onExpand: onExpand
    });
  }));
};
OrganisationUnitNode.propTypes = {
  dataTest: propTypes.string.isRequired,
  id: propTypes.string.isRequired,
  onChange: propTypes.func.isRequired,
  autoExpandLoadingError: propTypes.bool,
  disableSelection: propTypes.bool,
  displayName: propTypes.string,
  expanded: propTypes.arrayOf(orgUnitPathPropType),
  filter: propTypes.arrayOf(orgUnitPathPropType),

  /**
   * The parent already knows whether this node has children or not
   * before we load the children's details, so we can use this information
   * even during the loading phase
   */
  hasChildren: propTypes.bool,
  highlighted: propTypes.arrayOf(orgUnitPathPropType),
  isUserDataViewFallback: propTypes.bool,
  path: orgUnitPathPropType,
  selected: propTypes.arrayOf(orgUnitPathPropType),
  singleSelection: propTypes.bool,
  onCollapse: propTypes.func,
  onExpand: propTypes.func,
  onChildrenLoaded: propTypes.func
};

var RootError = function RootError(_ref) {
  var dataTest = _ref.dataTest,
      error = _ref.error;
  return React.createElement("div", {
    "data-test": "".concat(dataTest, "-loading")
  }, i18n.t('Error: '), error);
};
RootError.propTypes = {
  dataTest: propTypes$1.string.isRequired,
  error: propTypes$1.string.isRequired
};

var RootLoading = function RootLoading(_ref) {
  var dataTest = _ref.dataTest;
  return React.createElement("div", {
    "data-test": "".concat(dataTest, "-loading"),
    className: "jsx-814846266"
  }, React.createElement(CircularLoader, {
    small: true
  }), React.createElement(_JSXStyle, {
    id: "814846266"
  }, ["div.jsx-814846266{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}"]));
};
RootLoading.propTypes = {
  dataTest: propTypes$1.string.isRequired
};

/**
 * @param {string} path
 * @returns {string[]}
 */
var extractAllPathsFromPath = function extractAllPathsFromPath(path) {
  // remove leading slash and split by path delimiter/slashes
  var segments = path.replace(/^\//, '').split('/');
  var withSubPaths = segments.map(function (segment, index) {
    // take all segments from 0 to index and join them with the delimiter
    return "/".concat(segments.slice(0, index + 1).join('/'));
  });
  return withSubPaths;
};
/**
 * @param {string[]} initiallyExpanded
 * @returns {string[]}
 */

var getInitiallyExpandedPaths = function getInitiallyExpandedPaths(initiallyExpanded) {
  return initiallyExpanded.reduce(function (all, curPath) {
    var allPathsInCurPath = extractAllPathsFromPath(curPath);
    return [].concat(_toConsumableArray(all), _toConsumableArray(allPathsInCurPath));
  }, []);
};
/**
 * @param {Object} args
 * @param {string[]} args.expanded
 * @param {Function} args.setExpanded
 * @param {Function} [args.onExpand]
 * @param {Function} [args.onCollapse]
 * @returns {{ handleExpand: Function, handleCollapse: Function }}
 */

var createExpandHandlers = function createExpandHandlers(_ref) {
  var expanded = _ref.expanded,
      setExpanded = _ref.setExpanded,
      onExpand = _ref.onExpand,
      onCollapse = _ref.onCollapse;

  var handleExpand = function handleExpand(_ref2) {
    var path = _ref2.path,
        rest = _objectWithoutProperties(_ref2, ["path"]);

    if (!expanded.includes(path)) {
      setExpanded([].concat(_toConsumableArray(expanded), [path]));

      if (onExpand) {
        onExpand(_objectSpread2({
          path: path
        }, rest));
      }
    }
  };

  var handleCollapse = function handleCollapse(_ref3) {
    var path = _ref3.path,
        rest = _objectWithoutProperties(_ref3, ["path"]);

    var pathIndex = expanded.indexOf(path);

    if (pathIndex !== -1) {
      var updatedExpanded = pathIndex === 0 ? expanded.slice(1) : [].concat(_toConsumableArray(expanded.slice(0, pathIndex)), _toConsumableArray(expanded.slice(pathIndex + 1)));
      setExpanded(updatedExpanded);

      if (onCollapse) {
        onCollapse(_objectSpread2({
          path: path
        }, rest));
      }
    }
  };

  return {
    handleExpand: handleExpand,
    handleCollapse: handleCollapse
  };
};

/**
 * @param {string[]} initiallyExpanded
 * @param {Function} [onExpand]
 * @param {Function} [onCollapse]
 * @returns {{ expanded: string[], handleExpand: Function, handleCollapse: Function }}
 */

var useExpanded = function useExpanded(initiallyExpanded, onExpand, onCollapse) {
  var allInitiallyExpandedPaths = getInitiallyExpandedPaths(initiallyExpanded);

  var _useState = useState(allInitiallyExpandedPaths),
      _useState2 = _slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  var _createExpandHandlers = createExpandHandlers({
    expanded: expanded,
    setExpanded: setExpanded,
    onExpand: onExpand,
    onCollapse: onCollapse
  }),
      handleExpand = _createExpandHandlers.handleExpand,
      handleCollapse = _createExpandHandlers.handleCollapse;

  return {
    expanded: expanded,
    handleExpand: handleExpand,
    handleCollapse: handleCollapse
  };
};

/**
 * This will create a new reloadId everytime "forceReload" changes to true,
 * which can be used as the "key" prop on the org unit tree.
 * When that id changes, the whole tree rerenders
 * and therefore triggers all "useDataQuery"s to
 * run the query again
 *
 * @param {bool} forceReload
 * @returns {Int}
 */

var useForceReload = function useForceReload(forceReload) {
  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      reloadId = _useState2[0],
      setReloadId = _useState2[1];

  useEffect(function () {
    forceReload === true && setReloadId(reloadId + 1);
  }, [forceReload]);
  return reloadId;
};

/**
 * @module
 * @param {OrganisationUnitTree.PropTypes} props
 * @returns {React.Component}
 *
 * @example
 * import { OrganisationUnitTree } from '@dhis2/ui-widgets'
 *
 * @example
 * <OrganisationUnitTree
 *     name="Root org unit"
 *     roots="A0000000000"
 *     onChange={onChange}
 *     onExpand={onExpand}
 *     onCollapse={onCollapse}
 *     onChildrenLoaded={onChildrenLoaded}
 *     initiallyExpanded={['/A0000000000/A0000000001']}
 *     filter={['/A0000000000/A0000000001/A0000000003']}
 * />
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/organisms/organisation-unit-tree/org-unit-tree.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/organisationunittree--collapsed|Storybook}
 */

var OrganisationUnitTree = function OrganisationUnitTree(_ref) {
  var onChange = _ref.onChange,
      roots = _ref.roots,
      autoExpandLoadingError = _ref.autoExpandLoadingError,
      dataTest = _ref.dataTest,
      disableSelection = _ref.disableSelection,
      forceReload = _ref.forceReload,
      highlighted = _ref.highlighted,
      isUserDataViewFallback = _ref.isUserDataViewFallback,
      initiallyExpanded = _ref.initiallyExpanded,
      filter = _ref.filter,
      selected = _ref.selected,
      singleSelection = _ref.singleSelection,
      onExpand = _ref.onExpand,
      onCollapse = _ref.onCollapse,
      onChildrenLoaded = _ref.onChildrenLoaded;
  var rootIds = Array.isArray(roots) ? roots : [roots];
  var reloadId = useForceReload(forceReload);

  var _useOrgData = useOrgData(rootIds, {
    withChildren: false,
    isUserDataViewFallback: isUserDataViewFallback
  }),
      loading = _useOrgData.loading,
      error = _useOrgData.error,
      data = _useOrgData.data,
      refetch = _useOrgData.refetch;

  var _useExpanded = useExpanded(initiallyExpanded, onExpand, onCollapse),
      expanded = _useExpanded.expanded,
      handleExpand = _useExpanded.handleExpand,
      handleCollapse = _useExpanded.handleCollapse;

  useEffect(function () {
    // do not refetch on initial render
    if (refetch && reloadId > 0) {
      refetch();
    }
  }, [reloadId, refetch]);
  return React.createElement("div", {
    "data-test": dataTest
  }, error && React.createElement(RootError, {
    error: error,
    dataTest: dataTest
  }), loading && React.createElement(RootLoading, {
    dataTest: dataTest
  }), !error && !loading && rootIds.map(function (rootId) {
    var rootNode = data[rootId];
    var rootPath = "/".concat(rootId);
    return React.createElement(OrganisationUnitNode, {
      key: rootPath,
      autoExpandLoadingError: autoExpandLoadingError,
      dataTest: dataTest,
      disableSelection: disableSelection,
      displayName: rootNode.displayName,
      expanded: expanded,
      highlighted: highlighted,
      id: rootId,
      isUserDataViewFallback: isUserDataViewFallback,
      filter: filter,
      path: rootPath,
      selected: selected,
      singleSelection: singleSelection,
      onChange: onChange,
      onChildrenLoaded: onChildrenLoaded,
      onCollapse: handleCollapse,
      onExpand: handleExpand
    });
  }));
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string|string[]} roots
 * Root org unit id(s)
 *
 * @prop {Function} onChange
 * Will be called with the following object
 * { id: string; path: string; checked: boolean; }
 *
 * @prop {bool} [autoExpandLoadingError]
 * When set, the error when loading children
 * fails will be shown automaticlly
 *
 * @prop {bool} [singleSelection]
 * When set, no checkboxes will be displayed and only the first selected path
 * in `selected` will be highlighted
 *
 * @prop {bool} [disableSelection]
 * When set to true, no unit can be selected
 *
 * @prop {string[]} [filter]
 * All organisation units with a path that inclused the provided
 * paths will be shown. All others will not be rendered.
 * When not provided, all org units will be shown.
 *
 * @prop {bool} [forceReload]
 * When set to "true", everything will be reloaded.
 * In order to load it again after reloading,
 * "forceReload" has to be set to false and then to true again
 *
 * @prop {string[]} [selected]
 * An array of paths of selected OUs.
 * The path of an OU is the UIDs of the OU and all its parent OUs separated
 * by slashes (/)
 *
 * @prop {string[]} [initiallyExpanded]
 * An array of OU paths that will be expanded automatically
 * as soon as they are encountered.
 * The path of an OU is the UIDs of the OU
 * and all its parent OUs separated by slashes (/)
 * Note: This replaces "openFirstLevel" as that's redundant
 *
 * @prop {bool} [isUserDataViewFallback]
 * When provided, the "isUserDataViewFallback" option will be send when
 * requesting the org units
 *
 * @prop {string[]} [highlighted]
 * All units provided to "highlighted" as path will be visually
 * highlighted.
 * Note:
 * The d2-ui component used two props for this:
 * * searchResults
 * * highlightSearchResults
 *
 * @prop {Function} [onExpand]
 * Called with { path: string }
 * with the path of the parent of the level opened
 *
 * @prop {Function} [onCollapse]
 * Called with { path: string }
 * with the path of the parent of the level closed
 *
 * @prop {Function} [onChildrenLoaded]
 * Called with the children's data that was loaded
 */


OrganisationUnitTree.propTypes = {
  roots: propTypes$1.oneOfType([propTypes$1.string, propTypes$1.arrayOf(propTypes$1.string)]).isRequired,
  onChange: propTypes$1.func.isRequired,
  autoExpandLoadingError: propTypes$1.bool,
  dataTest: propTypes$1.string,
  disableSelection: propTypes$1.bool,
  filter: propTypes$1.arrayOf(orgUnitPathPropType),
  forceReload: propTypes$1.bool,
  highlighted: propTypes$1.arrayOf(orgUnitPathPropType),
  initiallyExpanded: propTypes$1.arrayOf(orgUnitPathPropType),
  isUserDataViewFallback: propTypes$1.bool,
  selected: propTypes$1.arrayOf(orgUnitPathPropType),
  singleSelection: propTypes$1.bool,
  onChildrenLoaded: propTypes$1.func,
  onCollapse: propTypes$1.func,
  onExpand: propTypes$1.func
  /**
   * @prop {string[]} [idsThatShouldBeReloaded]
   * All units with ids (not paths!) provided
   * to "idsThatShouldBeReloaded" will be reloaded
   * In order to reload an id twice, the array must be changed
   * while keeping the id to reload in the array
   *
   * NOTE: This is currently not working due to a limitation
   * of the data engine (we can't force specific resource to reload,
   * we'd have to reload the sibling nodes currently as well)
   */
  //idsThatShouldBeReloaded: propTypes.arrayOf(orgUnitIdPropType),

};
OrganisationUnitTree.defaultProps = {
  dataTest: 'dhis2-uiwidgets-orgunittree',
  filter: [],
  highlighted: [],
  initiallyExpanded: [],
  selected: []
};

export { HeaderBar, OrganisationUnitTree };
//# sourceMappingURL=lib.js.map
