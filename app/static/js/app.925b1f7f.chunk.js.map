{"version":3,"sources":["D2App/state/appState.js","D2App/components/OrgUnits.js","D2App/state/apiActions.js","D2App/components/ICUTable.js","D2App/state/store.js","D2App/components/ICUBed.js","D2App/components/ConfigureBedModal.js","D2App/components/useConfirmationHook.js","D2App/components/RegisterPatientModal.js","D2App/components/ICUMap.js","D2App/App.js"],"names":["appSlice","createSlice","name","initialState","activeOrgUnit","activeICU","metaData","icuList","ICUEventId","reducers","setActiveOrgUnit","state","action","payload","setActiveICU","setMetaData","setICUBeds","id","icuId","beds","updateBedStatus","bedIndex","findIndex","b","trackedEntityInstance","bedId","status","updateFilteredICUList","updateICUStat","icuIndex","i","available","stat","total","actions","query","organisationUnits","resource","params","paging","fields","OrgUnits","loading","error","data","refetch","useDataQuery","orgRoot","setOrgRoot","useState","cursor","setCursor","dispatch","useDispatch","traverseResults","useEffect","orgData","root","filter","o","level","children","processList","_children","child","childOrg","length","push","active","_prunedChildren","traverse","selectOU","node","icus","icu","distance","geometry","lat","lng","onToggle","toggled","Object","assign","ICU_EVENT","bedEventHelper","eventType","dataValue","dataElement","value","getEventStatus","event","dataValues","getICUBeds","program","async","getState","dhisEngine","results","ou","trackedEntityInstances","bed","getBedStatus","console","log","instanceId","events","lastEvent","bedEventIndex","dv","app","dataElements","addBedEvent","teId","programId","programStageId","additionalData","eventResponse","updateMutation","type","moment","format","mutate","mutation","getICUStat","filters","filtersQuery","values","map","f","join","substr","orgUnit","filteredTEI","response","te","sortData","field","setLocationData","sortedBy","setSortedBy","sortOrder","setSortOrder","result","slice","sort","locOne","locTwo","propertyOne","propertyTwo","comparison","ICUTable","onSelectICU","locationData","stateData","primary","onClick","loc","key","href","rootReducer","combineReducers","appReducer","configureStore","reducer","ICUBed","onView","onOccupy","onDischarge","onReserve","ref","useRef","open","setOpen","className","createPortal","transparent","placement","reference","document","body","booleanSelections","label","findAttribute","attributes","search","a","attribute","findOption","optionSet","code","ConfigureBedModal","onClose","selectedBed","editable","useSelector","bedAttributes","setBedAttributtes","formState","setFormState","useDataEngine","_bedAttributes","trackedEntityType","trackedEntityTypeAttributes","_formState","attrib","bedValue","valueType","options","option","displayName","updateField","onChange","val","selected","disabled","sel","getAttributeInput","end","secondary","updateBed","teID","importSummaries","createBed","useConfirmation","show","onOk","onCancel","confirm","patientFieldset","RegisterPatientModal","programStage","getFormField","mapContainerStyle","height","width","center","infoWindowInitData","visible","ICUMap","props","onMarkerClick","infoWindowData","setInfoWindowData","handleMarkerOnHover","ICUEntry","markerAvailableOptions","icon","path","fillColor","fillOpacity","strokeColor","strokeWeight","markerUnavailableOptions","googleMapsApiKey","zoom","index","position","onMouseOver","onMouseOut","closeBoxURL","style","backgroundColor","opacity","padding","fontSize","fontColor","getAttributeByName","ViewOrgICU","bedData","bedTypeData","covidTypeData","find","setFilters","ViewICUBeds","placeholder","showConfigure","setShowConfigure","bedModalOpen","setBedModalOpen","patientModalOpen","setPatientModalOpen","setSelectedBed","confirmation","ViewConfigureBeds","onBack","onViewBed","onOccupyBed","onDischargeBed","onReserveBed","onRemoveBed","enrollmentId","enrollments","enrollment","onSelectBed","destructive","ContainerView","trackedEntityAttribute","_dataElements","de","startsWith","elem","MyApp","customizedMiddleware","getDefaultMiddleware","thunk","extraArgument","store","middleware"],"mappings":"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","file":"static/js/app.925b1f7f.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nconst initState = {\n  // activeOrgUnit: null,\n  activeOrgUnit: null,\n  activeICU: null,\n  metaData: null,\n  icuList: [],\n  ICUEventId: \"fKXrko0yhua\"\n};\nconst appSlice = createSlice({\n  name: \"app\",\n  initialState: initState,\n  reducers: {\n    setActiveOrgUnit(state, action) {\n      state.activeOrgUnit = action.payload;\n    },\n\n    setActiveICU(state, action) {\n      state.activeICU = action.payload;\n    },\n\n    setMetaData(state, action) {\n      state.metaData = action.payload;\n    },\n\n    setICUBeds(state, action) {\n      if (state.activeICU && state.activeICU.id === action.payload.icuId) {\n        state.activeICU.beds = action.payload.beds;\n      }\n    },\n\n    updateBedStatus(state, action) {\n      const bedIndex = state.activeICU.beds.findIndex(b => b.trackedEntityInstance === action.payload.bedId);\n      state.activeICU.beds[bedIndex].status = action.payload.status;\n    },\n\n    updateFilteredICUList(state, action) {\n      state.icuList = action.payload;\n    },\n\n    updateICUStat(state, action) {\n      const icuIndex = state.icuList.findIndex(i => i.id === action.payload.icuId);\n      state.icuList[icuIndex].available = action.payload.stat.available;\n      state.icuList[icuIndex].total = action.payload.stat.total;\n    }\n\n  }\n});\nexport const {\n  setActiveOrgUnit,\n  setActiveICU,\n  setMetaData,\n  setICUBeds,\n  updateBedStatus,\n  updateFilteredICUList,\n  updateICUStat\n} = appSlice.actions;\nexport default appSlice.reducer;","import React, { useEffect, useState } from 'react';\nimport { Card } from '@dhis2/ui-core';\nimport { useDispatch } from 'react-redux';\nimport { DataQuery, useDataQuery } from '@dhis2/app-runtime';\nimport { Treebeard } from 'react-treebeard';\nimport { setActiveOrgUnit, updateFilteredICUList, setActiveICU } from '../state/appState';\nconst query = {\n  organisationUnits: {\n    resource: 'organisationUnits.json',\n    params: {\n      paging: 'false',\n      fields: \"id,name,level,children\"\n    }\n  }\n};\nexport default function OrgUnits() {\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query);\n  const [orgRoot, setOrgRoot] = useState(null);\n  const [cursor, setCursor] = useState(false);\n  const dispatch = useDispatch();\n  var traverseResults = [];\n\n  function processList(orgData, children) {\n    let _children = [];\n\n    for (var child of children) {\n      let childOrg = orgData.filter(o => o.id === child.id);\n\n      if (childOrg.length === 1) {\n        childOrg = childOrg[0];\n\n        if (childOrg.children.length === 0) {\n          childOrg.children = null;\n        } else {\n          childOrg.children = processList(orgData, childOrg.children);\n        }\n\n        _children.push({ ...childOrg,\n          active: false\n        });\n      }\n    }\n\n    let _prunedChildren = [];\n\n    for (var child of _children) {\n      traverseResults = [];\n      traverse(child, 6);\n\n      if (traverseResults.length > 0) {\n        _prunedChildren.push(child);\n      }\n    }\n\n    return _prunedChildren;\n  } // function pruneTree(root){\n  //     traverseResults = [];\n  //     traverse(root, 6);\n  //     if(traverseResults)\n  // }\n\n\n  useEffect(() => {\n    if (data) {\n      const orgData = data.organisationUnits.organisationUnits;\n      const root = data.organisationUnits.organisationUnits.filter(o => o.level === 1)[0];\n      root.children = processList(orgData, root.children);\n      setOrgRoot(root);\n    }\n  }, [loading]);\n\n  const onToggle = (node, toggled) => {\n    if (cursor) {\n      cursor.active = false;\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n\n    setCursor(node);\n    setOrgRoot(Object.assign({}, orgRoot));\n    selectOU(node);\n  };\n\n  function traverse(root, level) {\n    if (root.level === level) {\n      traverseResults.push({ ...root\n      });\n      return;\n    }\n\n    if (root.children) {\n      for (var child of root.children) {\n        traverse(child, level);\n      }\n    }\n  }\n\n  const selectOU = node => {\n    traverseResults = []; // traverse the tree and find level 6 bois\n\n    traverse(node, 6);\n    let icus = [];\n\n    for (var icu of traverseResults) {\n      icus.push({ ...icu,\n        distance: 0,\n        total: null,\n        available: null,\n        geometry: {\n          lat: 0,\n          lng: 0\n        }\n      });\n    }\n\n    dispatch(updateFilteredICUList(icus));\n    dispatch(setActiveOrgUnit({\n      id: node.id,\n      name: node.name,\n      level: node.level\n    }));\n\n    if (node.level === 6) {\n      dispatch(setActiveICU({\n        id: node.id,\n        beds: []\n      }));\n    }\n  };\n\n  return <Card>\n            {orgRoot && <Treebeard data={orgRoot} onToggle={onToggle} />}\n        </Card>;\n}","import { setICUBeds, setMetaData, updateBedStatus, updateICUStat } from './appState';\nimport * as moment from 'moment';\nconst ICU_EVENT = \"ICU - Bed Event\";\nexport function test() {\n  return async (dispatch, getState, dhisEngine) => {\n    console.log(dhisEngine);\n  };\n}\n\nfunction bedEventHelper(metaData, eventType) {\n  let dataValue = {};\n\n  if (eventType === \"Discharged\") {\n    dataValue = {\n      dataElement: metaData[ICU_EVENT].id,\n      value: \"Discharged\"\n    };\n  } else if (eventType === \"Admitted\") {\n    dataValue = {\n      dataElement: metaData[ICU_EVENT].id,\n      value: \"Admitted\"\n    };\n  } else if (eventType === \"Reserved\") {\n    dataValue = {\n      dataElement: metaData[ICU_EVENT].id,\n      value: \"Reserved\"\n    };\n  }\n\n  return dataValue;\n}\n\nfunction getEventStatus(event) {\n  if (event.dataValues.length > 0) {\n    switch (event.dataValues[0].value) {\n      case \"Discharged\":\n        return \"AVAILABLE\";\n\n      case \"Admitted\":\n        return \"OCCUPIED\";\n\n      case \"Reserved\":\n        return \"RESERVED\";\n    }\n  }\n\n  return \"\";\n}\n\nexport function getMetaData() {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        program: {\n          resource: 'programs/C1wTfmmMQUn',\n          params: {\n            fields: \"id,name,trackedEntityType[id, displayName, trackedEntityTypeAttributes[trackedEntityAttribute[id, displayName, valueType, optionSet[options[displayName, id, code]]]]]\"\n          }\n        },\n        dataElements: {\n          resource: 'dataElements',\n          params: {\n            paging: \"false\",\n            program: \"C1wTfmmMQUn\",\n            fields: \"id,displayName,optionSet[options[id, displayName,code]]\"\n          }\n        }\n      };\n      const {\n        program,\n        dataElements\n      } = await dhisEngine.query(query);\n      let metaData = {\n        id: program.id,\n        name: program.name,\n        trackedEntityType: {\n          id: program.trackedEntityType.id,\n          displayName: program.trackedEntityType.displayName,\n          trackedEntityTypeAttributes: []\n        }\n      };\n\n      for (var attrib of program.trackedEntityType.trackedEntityTypeAttributes) {\n        metaData.trackedEntityType.trackedEntityTypeAttributes.push(attrib.trackedEntityAttribute);\n      }\n\n      let _dataElements = {};\n\n      for (var de of dataElements.dataElements) {\n        if (de.displayName.startsWith(\"ICU\")) {\n          let elem = {\n            id: de.id,\n            displayName: de.displayName\n          };\n\n          if (de.optionSet) {\n            elem[\"options\"] = de.optionSet.options;\n          }\n\n          _dataElements[de.displayName] = elem;\n        }\n      }\n\n      metaData[\"dataElements\"] = _dataElements;\n      dispatch(setMetaData(metaData));\n    } catch (error) {\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getICUBeds(icuId, program) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        results: {\n          resource: 'trackedEntityInstances',\n          params: {\n            ou: icuId,\n            fields: \"trackedEntityInstance,attributes[attribute,displayName,value],enrollments\",\n            program: program\n          }\n        }\n      };\n      const response = await dhisEngine.query(query);\n      const beds = response.results.trackedEntityInstances; // now get status of each\n\n      for (var bed of beds) {\n        dispatch(getBedStatus(bed.trackedEntityInstance));\n      }\n\n      dispatch(setICUBeds({\n        icuId,\n        beds\n      }));\n    } catch (error) {\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getBedStatus(instanceId) {\n  return async (dispatch, getState, dhisEngine) => {\n    const query = {\n      events: {\n        resource: 'events',\n        params: {\n          trackedEntityInstance: instanceId,\n          paging: \"false\",\n          status: \"ACTIVE\"\n        }\n      }\n    };\n    const response = await dhisEngine.query(query);\n    const events = response.events.events;\n    let status = \"\";\n\n    if (events.length > 0) {\n      const lastEvent = events[0];\n      const bedEventIndex = lastEvent.dataValues.findIndex(dv => dv.dataElement === getState().app.metaData.dataElements[ICU_EVENT].id);\n\n      if (bedEventIndex > -1) {\n        switch (lastEvent.dataValues[bedEventIndex].value) {\n          case \"Discharged\":\n            status = \"AVAILABLE\";\n            break;\n\n          case \"Admitted\":\n            status = \"OCCUPIED\";\n            break;\n\n          case \"Reserved\":\n            status = \"RESERVED\";\n            break;\n        }\n      }\n\n      dispatch(updateBedStatus({\n        bedId: instanceId,\n        status: status,\n        lastEvent: lastEvent\n      }));\n    }\n  };\n}\nexport function createBed(teID, icuId, programId, attributes) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {\n        \"trackedEntityType\": teID,\n        \"orgUnit\": icuId,\n        \"attributes\": attributes,\n        \"enrollments\": [{\n          \"orgUnit\": icuId,\n          \"program\": programId,\n          \"enrollmentDate\": moment().format(\"YYYY-MM-DD\"),\n          \"incidentDate\": moment().format(\"YYYY-MM-DD\")\n        }]\n      };\n      const mutation = {\n        resource: 'trackedEntityInstances',\n        type: 'create',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      const instanceId = response.response.importSummaries[0].reference; // add new event to make the bed available\n\n      dispatch(addBedEvent(instanceId, programId, getState().app.ICUEventId, icuId, \"Discharged\"));\n      dispatch(getICUBeds(icuId, programId));\n    } catch (error) {\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function updateBed(icuId, bedId, attributes) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {\n        \"orgUnit\": icuId,\n        \"attributes\": attributes\n      };\n      const mutation = {\n        resource: 'trackedEntityInstances/' + bedId,\n        type: 'update',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getICUBeds(icuId, getState().app.metaData.id));\n    } catch (error) {\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function removeBed(icuId, enrollmentId) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {};\n      const mutation = {\n        resource: 'enrollments/' + enrollmentId,\n        type: 'delete'\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getICUBeds(icuId, getState().app.metaData.id));\n    } catch (error) {\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function addBedEvent(teId, programId, programStageId, icuId, eventType, additionalData = []) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      // first we complete last event\n      const query = {\n        events: {\n          resource: 'events',\n          params: {\n            trackedEntityInstance: teId,\n            paging: \"false\",\n            status: \"ACTIVE\"\n          }\n        }\n      };\n      const eventResponse = await dhisEngine.query(query);\n\n      if (eventResponse.events.events.length > 0) {\n        const lastEvent = eventResponse.events.events[0];\n        const updatePayload = {\n          \"event\": lastEvent.event,\n          \"trackedEntityInstance\": teId,\n          \"program\": programId,\n          \"programStage\": programStageId,\n          \"enrollment\": icuId,\n          \"orgUnit\": icuId,\n          \"completedDate\": moment().format(\"YYYY-MM-DD\"),\n          \"status\": \"COMPLETED\"\n        };\n        const updateMutation = {\n          resource: 'events',\n          type: 'create',\n          data: updatePayload\n        };\n        await dhisEngine.mutate(updateMutation);\n      }\n\n      const dataValues = [bedEventHelper(getState().app.metaData.dataElements, eventType), ...additionalData];\n      const payload = {\n        \"trackedEntityInstance\": teId,\n        \"program\": programId,\n        \"programStage\": programStageId,\n        \"enrollment\": icuId,\n        \"orgUnit\": icuId,\n        \"dataValues\": dataValues,\n        \"eventDate\": moment().format(\"YYYY-MM-DD\"),\n        \"status\": \"ACTIVE\"\n      };\n      const mutation = {\n        resource: 'events',\n        type: 'create',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getBedStatus(teId));\n    } catch (error) {\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function getICUStat(icu, filters = {}) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      let filtersQuery = \"\";\n\n      for (var filter in filters) {\n        if (filters[filter].length === 0) {\n          continue;\n        }\n\n        const values = filters[filter].map(f => f.value);\n        filtersQuery += `${filter}:IN:${values.join(\";\")},`;\n      }\n\n      filtersQuery = filtersQuery.substr(0, filtersQuery.length - 1); // first we complete last event\n\n      const query = {\n        events: {\n          resource: 'events',\n          params: {\n            orgUnit: icu.id,\n            paging: \"false\",\n            status: \"ACTIVE\"\n          }\n        },\n        filteredTEI: {\n          resource: 'trackedEntityInstances',\n          params: {\n            ou: icu.id,\n            paging: 'false',\n            fields: 'trackedEntityInstance',\n            filter: filtersQuery\n          }\n        }\n      };\n      const response = await dhisEngine.query(query);\n      let stat = {\n        available: 0,\n        total: 0\n      };\n\n      for (var event of response.events.events) {\n        let teIndex = response.filteredTEI.trackedEntityInstances.findIndex(te => te.trackedEntityInstance === event.trackedEntityInstance);\n\n        if (teIndex === -1) {\n          // filtered TE doesn't have this\n          continue;\n        }\n\n        let status = getEventStatus(event);\n\n        if (status === \"AVAILABLE\") {\n          stat.available++;\n        }\n\n        stat.total++;\n      }\n\n      dispatch(updateICUStat({\n        icuId: icu.id,\n        stat: stat\n      }));\n    } catch (error) {\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}","import React, { useEffect, useState } from 'react';\nimport { Table, TableHead, TableBody, TableRow, TableCellHead, TableCell, Button, DropdownButton } from '@dhis2/ui-core';\nimport { useDispatch } from 'react-redux';\nimport { getICUStat } from '../state/apiActions';\n\nfunction sortData(field, data, state) {\n  const {\n    setLocationData,\n    sortedBy,\n    setSortedBy,\n    sortOrder,\n    setSortOrder\n  } = state;\n\n  const compare = (locOne, locTwo) => {\n    let propertyOne = locOne[field];\n    let propertyTwo = locTwo[field];\n    let comparison = 0;\n\n    if (propertyOne > propertyTwo) {\n      comparison = 1;\n    } else if (propertyOne < propertyTwo) {\n      comparison = -1;\n    }\n\n    if (sortedBy === field) {\n      comparison = comparison * -1 * sortOrder; //inverts the order\n    }\n\n    return comparison;\n  };\n\n  let result = data.slice();\n  result = result.sort(compare);\n  setLocationData(result);\n  setSortedBy(field);\n  setSortOrder(sortOrder * -1);\n}\n\nexport default function ICUTable({\n  data,\n  onSelectICU\n}) {\n  const [locationData, setLocationData] = useState([]);\n  const [sortedBy, setSortedBy] = useState('distance');\n  const [sortOrder, setSortOrder] = useState(1);\n  const dispatch = useDispatch();\n  const stateData = {\n    setLocationData,\n    sortedBy,\n    setSortedBy,\n    sortOrder,\n    setSortOrder\n  };\n  useEffect(() => {\n    sortData(sortedBy, data, stateData);\n  }, [data]);\n\n  if (!data) {\n    return <div></div>;\n  }\n\n  return <Table>\n            <TableHead>\n                <TableRow>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'name'} onClick={() => {\n            sortData('name', locationData, stateData);\n          }}> \n                            ICU\n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'distance'} onClick={() => {\n            sortData('distance', locationData, stateData);\n          }}> \n                            Distance \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'total'} onClick={() => {\n            sortData('total', locationData, stateData);\n          }}> \n                            TotalBeds \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'available'} onClick={() => {\n            sortData('available', locationData, stateData);\n          }}> \n                            AvailableBeds \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  Contact </TableCellHead>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {locationData.map((loc, key) => <TableRow key={key}>\n                    <TableCell><a href=\"#\" onClick={() => onSelectICU(loc)}>{loc.name}</a></TableCell>\n                    <TableCell>{loc.distance}</TableCell>\n                    <TableCell>{loc.total}</TableCell>\n                    <TableCell>{loc.available}</TableCell>\n                    <TableCell>\n                        <p>Dr. John Doe</p>\n                        <p>+94771234568</p>\n                        <p>+94717894562</p>\n                    </TableCell>\n                </TableRow>)}\n            </TableBody>\n        </Table>;\n}","import { configureStore, combineReducers, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport appReducer from './appState';\nexport const rootReducer = combineReducers({\n  app: appReducer\n});\nexport const store = configureStore({\n  reducer: rootReducer\n});","import React, { useEffect, useState, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Popper, ScreenCover } from '@dhis2/ui-core';\nexport default function ICUBed({\n  name,\n  status,\n  onView,\n  onOccupy,\n  onDischarge,\n  onReserve\n}) {\n  const ref = useRef(null);\n  const [open, setOpen] = useState(false);\n\n  const getClassName = () => {\n    if (status === \"AVAILABLE\") {\n      return \"available\";\n    }\n\n    if (status === \"OCCUPIED\") {\n      return \"occupied\";\n    }\n\n    if (status === \"RESERVED\") {\n      return \"reserved\";\n    }\n\n    return \"\";\n  };\n\n  const onToggle = () => {\n    setOpen(!open);\n  };\n\n  return <div className={`icu-bed ${getClassName()}`} ref={ref} onClick={onToggle}>\n            <span>{name}</span>\n            {open && createPortal(<ScreenCover onClick={onToggle} transparent>\n                        <Popper placement=\"right\" reference={ref}>\n                            <div className=\"bed-options\">\n                                {(status === \"AVAILABLE\" || status === \"RESERVED\") && <div onClick={() => {\n            setOpen(false);\n            onOccupy();\n          }}>Occupy</div>}\n                                {status === \"AVAILABLE\" && <div onClick={() => {\n            setOpen(false);\n            onReserve();\n          }}>Reserve</div>}\n                                {status !== \"AVAILABLE\" && <div onClick={() => {\n            setOpen(false);\n            onDischarge();\n          }}>Discharge</div>}\n                                <div onClick={onView}>View</div>\n                            </div>\n                        </Popper>\n                    </ScreenCover>, document.body)}\n        </div>;\n}","import React, { useState, useEffect } from 'react';\nimport { Modal, ModalTitle, ModalActions, ModalContent, ButtonStrip, Button, InputField, SingleSelect, RadioGroup, Radio, RadioGroupField, SingleSelectOption, SingleSelectField } from '@dhis2/ui-core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as moment from 'moment';\nimport { useDataMutation, useDataEngine } from '@dhis2/app-runtime';\nimport { test, createBed, updateBed } from '../state/apiActions';\nconst booleanSelections = [{\n  label: \"No\",\n  value: 'false'\n}, {\n  label: \"Yes\",\n  value: 'true'\n}];\n\nfunction findAttribute(attributes, id) {\n  const search = attributes.filter(a => a.attribute === id);\n  return search.length > 0 ? search[0].value : null;\n}\n\nfunction findOption(optionSet, code) {\n  const search = optionSet.filter(o => o.code === code);\n  return search[0];\n}\n\nexport default function ConfigureBedModal({\n  open,\n  onClose,\n  selectedBed,\n  editable\n}) {\n  const metaData = useSelector(state => state.app.metaData);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const [bedAttributes, setBedAttributtes] = useState([]);\n  const [formState, setFormState] = useState({});\n  const engine = useDataEngine();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (metaData) {\n      let _bedAttributes = metaData.trackedEntityType.trackedEntityTypeAttributes;\n      let _formState = {};\n\n      for (var attrib of _bedAttributes) {\n        // check if this is a update thing\n        let bedValue = null;\n\n        if (selectedBed) {\n          bedValue = findAttribute(selectedBed.attributes, attrib.id);\n        }\n\n        if (attrib.valueType === \"TEXT\") {\n          if (attrib.optionSet && attrib.optionSet.options && attrib.optionSet.options.length > 0) {\n            if (bedValue) {\n              const option = findOption(attrib.optionSet.options, bedValue);\n              _formState[attrib.id] = {\n                \"label\": option.displayName,\n                \"value\": option.code\n              };\n            } else {\n              _formState[attrib.id] = {\n                \"label\": attrib.optionSet.options[0].displayName,\n                \"value\": attrib.optionSet.options[0].code\n              };\n            }\n          } else {\n            _formState[attrib.id] = bedValue ? bedValue : \"\";\n          }\n        } else if (attrib.valueType === \"BOOLEAN\") {\n          _formState[attrib.id] = {\n            \"label\": bedValue && bedValue === \"true\" ? \"Yes\" : \"No\",\n            \"value\": bedValue ? bedValue : \"false\"\n          };\n        }\n      }\n\n      setFormState(_formState);\n      setBedAttributtes(_bedAttributes);\n    }\n  }, [metaData]);\n\n  if (!open) {\n    return <></>;\n  }\n\n  const updateField = (field, value) => {\n    setFormState({ ...formState,\n      [field]: value\n    });\n  };\n\n  const getAttributeInput = (attrib, key) => {\n    if (attrib.optionSet && attrib.optionSet.options && attrib.optionSet.options.length > 0) {\n      return <SingleSelectField key={key} label={attrib.displayName} name={attrib.id} onChange={val => updateField(attrib.id, val.selected)} selected={formState[attrib.id]} disabled={!editable}>\n                        {attrib.optionSet.options.map((sel, key) => <SingleSelectOption key={key} label={sel.displayName} value={sel.code} />)}\n                </SingleSelectField>;\n    }\n\n    if (attrib.valueType === \"TEXT\") {\n      return <InputField key={key} label={attrib.displayName} name={attrib.id} type=\"text\" onChange={val => updateField(attrib.id, val.value)} value={formState[attrib.id]} disabled={!editable} />;\n    }\n\n    if (attrib.valueType === \"BOOLEAN\") {\n      return <SingleSelectField key={key} label={attrib.displayName} name={attrib.id} onChange={val => updateField(attrib.id, val.selected)} selected={formState[attrib.id]} disabled={!editable}>\n                        {booleanSelections.map((sel, key) => <SingleSelectOption key={key} label={sel.label} value={sel.value} />)}\n                </SingleSelectField>;\n      return <></>;\n    }\n  };\n\n  const addBed = async () => {\n    const attributes = [];\n\n    for (var attrib in formState) {\n      attributes.push({\n        \"attribute\": attrib,\n        \"value\": formState[attrib].value ? formState[attrib].value : formState[attrib]\n      });\n    }\n\n    if (selectedBed) {\n      // update existing bed\n      dispatch(updateBed(activeICU.id, selectedBed.trackedEntityInstance, attributes));\n    } else {\n      //create new bed\n      dispatch(createBed(metaData.trackedEntityType.id, activeICU.id, metaData.id, attributes));\n    }\n\n    onClose();\n  };\n\n  return <Modal open>\n            <ModalTitle>\n                {!editable ? \"View\" : selectedBed ? \"Update\" : \"Add\"} ICU Bed\n            </ModalTitle>\n            <ModalContent>\n                <div className=\"form\">\n                    {bedAttributes.map((attrib, key) => getAttributeInput(attrib, key))}\n                </div>\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button onClick={onClose} secondary type=\"button\">\n                        Close\n                    </Button>\n                    {editable && <Button onClick={addBed} primary type=\"button\">\n                            {selectedBed ? \"Update Bed\" : \"Add New Bed\"}\n                        </Button>}\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n}","import React from 'react';\nexport default function useConfirmation() {\n  const show = (query, onOk, onCancel) => {\n    const isOk = confirm(query);\n\n    if (isOk) {\n      onOk();\n    } else {\n      onCancel();\n    }\n  };\n\n  return {\n    show\n  };\n}","import React, { useState, useEffect } from 'react';\nimport { Modal, ModalTitle, ModalActions, ModalContent, ButtonStrip, Button, InputField, SingleSelect, RadioGroup, Radio, RadioGroupField, SingleSelectOption, SingleSelectField } from '@dhis2/ui-core';\nimport { addBedEvent } from '../state/apiActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useConfirmation from './useConfirmationHook';\nconst patientFieldset = [{\n  type: \"TEXT\",\n  label: \"ICU - BHT Number\",\n  id: \"j1hbO7zzRgV\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Patient Name\",\n  id: \"sK09QRLNyAA\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Consultant In-charge\",\n  id: \"malZQqUEzi9\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Patient Diagnosis\",\n  id: \"qh9bc6jlauE\"\n}];\nexport default function RegisterPatientModal({\n  open,\n  onClose,\n  selectedBed\n}) {\n  const [formState, setFormState] = useState({});\n  const dispatch = useDispatch();\n  const metaData = useSelector(state => state.app.metaData);\n  const programStage = useSelector(state => state.app.ICUEventId);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const confirmation = useConfirmation();\n  useEffect(() => {\n    let _formState = {};\n\n    for (var field of patientFieldset) {\n      if (field.type === \"TEXT\") {\n        _formState[field.id] = \"\";\n      }\n    }\n\n    setFormState(_formState);\n  }, []);\n\n  const updateField = (field, value) => {\n    setFormState({ ...formState,\n      [field]: value\n    });\n  };\n\n  const getFormField = (field, key) => {\n    if (field.type === \"TEXT\") {\n      return <InputField key={key} label={field.label} name={field.id} onChange={val => updateField(field.id, val.value)} value={formState[field.id]} />;\n    }\n  };\n\n  const admitPatient = () => {\n    let dataValues = [];\n\n    for (var field in formState) {\n      dataValues.push({\n        dataElement: field,\n        value: formState[field]\n      });\n    }\n\n    dispatch(addBedEvent(selectedBed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Admitted\", dataValues));\n    onClose();\n  };\n\n  return <Modal open>\n            <ModalTitle>\n                Admit New Patient\n            </ModalTitle>\n            <ModalContent>\n                {patientFieldset.map((field, key) => getFormField(field, key))}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button onClick={onClose} secondary type=\"button\">\n                        Close\n                    </Button>\n                    <Button onClick={admitPatient} primary type=\"button\">\n                        Admit Patient\n                    </Button>\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n}","import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoBox } from '@react-google-maps/api';\nconst mapContainerStyle = {\n  height: \"600px\",\n  width: \"100%\"\n};\nconst center = {\n  lat: 8.11,\n  lng: 80.77\n};\nconst infoWindowInitData = {\n  visible: false,\n  ...center\n};\nexport default function ICUMap(props) {\n  const {\n    onMarkerClick,\n    data\n  } = props;\n  const [infoWindowData, setInfoWindowData] = useState(infoWindowInitData);\n\n  const handleMarkerOnHover = ICUEntry => {\n    setInfoWindowData({\n      visible: true,\n      ...ICUEntry\n    });\n  };\n\n  const infoBoxOptions = {\n    closeBoxURL: ''\n  };\n  const markerAvailableOptions = {\n    icon: {\n      path: 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z',\n      fillColor: '#00802b',\n      fillOpacity: 1,\n      strokeColor: '',\n      strokeWeight: 0\n    }\n  };\n  const markerUnavailableOptions = {\n    icon: {\n      path: 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z',\n      fillColor: '#DC143C',\n      fillOpacity: 1,\n      strokeColor: '',\n      strokeWeight: 0\n    }\n  };\n  return <LoadScript id=\"script-loader\" googleMapsApiKey=\"AIzaSyBjlDmwuON9lJbPMDlh_LI3zGpGtpK9erc\">\n            <GoogleMap id='example-map' mapContainerStyle={mapContainerStyle} zoom={7.6} center={center}>\n                {data.map((ICUEntry, index) => {\n        return <Marker position={{\n          lat: ICUEntry.geometry.lat,\n          lng: ICUEntry.geometry.lng\n        }} onClick={() => {\n          onMarkerClick(ICUEntry);\n        }} onMouseOver={() => {\n          handleMarkerOnHover(ICUEntry);\n        }} onMouseOut={() => {\n          handleMarkerOnHover(infoWindowInitData);\n        }} options={ICUEntry.available > 0 ? markerAvailableOptions : markerUnavailableOptions} key={index} />;\n      })}\n                {infoWindowData.visible && <InfoBox position={infoWindowData} options={infoBoxOptions}>\n                        <div style={{\n          backgroundColor: 'white',\n          opacity: 0.95,\n          padding: 5\n        }}>\n                            <div style={{\n            fontSize: 14,\n            fontColor: `#08233B`\n          }}>\n                                <div>ICU: {infoWindowData.name}</div>\n                                <div>Distance: {infoWindowData.distance}</div>\n                                <div>Beds: {infoWindowData.available}</div>\n                            </div>\n                        </div>\n                    </InfoBox>}\n            </GoogleMap>\n        </LoadScript>;\n}","import React, { useState, useEffect } from 'react';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { DataQuery, useDataQuery, useDataEngine } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport OrgUnits from './components/OrgUnits';\nimport './App.css';\nimport { Card, MultiSelect, MultiSelectOption, MultiSelectField, Button, ButtonStrip, Table, TableHead, TableBody, TableRow, TableCellHead, TableCell } from '@dhis2/ui-core';\nimport ICUTable from './components/ICUTable';\nimport * as api from \"./mockapi\";\nimport { rootReducer } from './state/store';\nimport ICUBed from './components/ICUBed';\nimport ConfigureBedModal from './components/ConfigureBedModal';\nimport { setActiveICU, setMetaData, setActiveOrgUnit, updateICUStat } from './state/appState';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { getICUBeds, getMetaData, addBedEvent, removeBed, getICUStat } from './state/apiActions';\nimport RegisterPatientModal from './components/RegisterPatientModal';\nimport useConfirmation from './components/useConfirmationHook';\nimport ICUMap from './components/ICUMap';\n\nfunction getAttributeByName(bed, name) {\n  for (var attrib of bed.attributes) {\n    if (attrib.displayName === name) {\n      return attrib.value;\n    }\n  }\n\n  return \"\";\n}\n\nfunction ViewOrgICU() {\n  const activeOrgUnit = useSelector(state => state.app.activeOrgUnit);\n  const bedData = useSelector(state => state.app.icuList);\n  const metaData = useSelector(state => state.app.metaData);\n  const dispatch = useDispatch();\n  const bedTypeId = 'XYNBoDZS0aV';\n  const covidTypeId = 'Xt5tV6OFSEW';\n  let bedTypeData = null;\n  let covidTypeData = null;\n\n  if (metaData) {\n    bedTypeData = metaData.trackedEntityType.trackedEntityTypeAttributes.find(({\n      id\n    }) => id === bedTypeId);\n    covidTypeData = metaData.trackedEntityType.trackedEntityTypeAttributes.find(({\n      id\n    }) => id === covidTypeId);\n  }\n\n  const [filters, setFilters] = useState({\n    [bedTypeId]: [],\n    [covidTypeId]: []\n  });\n  useEffect(() => {\n    if (bedData) {\n      for (var icu of bedData) {\n        if (icu.total === null) {\n          dispatch(getICUStat(icu, filters));\n          dispatch(updateICUStat({\n            icuId: icu.id,\n            stat: {\n              total: \"Updating...\",\n              available: null\n            }\n          }));\n        }\n      }\n    }\n  }, [bedData]);\n  useEffect(() => {\n    if (bedData) {\n      for (var icu of bedData) {\n        dispatch(getICUStat(icu, filters));\n      }\n    }\n  }, [filters]);\n\n  if (!activeOrgUnit) {\n    return <p>Please select an organization unit</p>;\n  }\n\n  if (activeOrgUnit.level === 6) {\n    return <ViewICUBeds />;\n  }\n\n  const onSelectICU = icu => {\n    dispatch(setActiveOrgUnit({\n      id: icu.id,\n      name: icu.name,\n      level: icu.level\n    }));\n    dispatch(setActiveICU({\n      id: icu.id,\n      beds: []\n    }));\n  };\n\n  return activeOrgUnit.level < 6 && <>\n                <span className=\"t20\">Showing ICU Locations for <b>{activeOrgUnit.name}</b></span>\n                <div className=\"filter-area\">\n                        <MultiSelect selected={filters[bedTypeId]} placeholder={bedTypeData.displayName} onChange={({\n        selected\n      }) => {\n        setFilters({ ...filters,\n          [bedTypeId]: selected\n        });\n      }}>\n                            {bedTypeData && bedTypeData.optionSet.options.map((option, key) => <MultiSelectOption key={key} value={option.code} label={option.displayName} />)}\n                        </MultiSelect>\n                        <MultiSelect selected={filters[covidTypeId]} placeholder={covidTypeData.displayName} onChange={({\n        selected\n      }) => {\n        setFilters({ ...filters,\n          [covidTypeId]: selected\n        });\n      }}>\n                            {covidTypeData && covidTypeData.optionSet.options.map((option, key) => <MultiSelectOption key={key} value={option.code} label={option.displayName} />)}\n                        </MultiSelect>\n                </div>\n                <div className=\"icu-org\">\n                    <div className=\"icu-table\">\n                        <ICUTable data={bedData} onSelectICU={onSelectICU} />\n                    </div>\n                    <div className=\"icu-map\">\n                        <ICUMap onMarkerClick={ICUEntry => {\n          console.log(ICUEntry);\n        }} data={bedData} />\n                    </div>\n                </div>\n            </>;\n}\n\nfunction ViewICUBeds() {\n  const activeOrgUnit = useSelector(state => state.app.activeOrgUnit);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const metaData = useSelector(state => state.app.metaData);\n  const programStage = useSelector(state => state.app.ICUEventId);\n  const [showConfigure, setShowConfigure] = useState(false);\n  const [bedModalOpen, setBedModalOpen] = useState(false);\n  const [patientModalOpen, setPatientModalOpen] = useState(false);\n  const [selectedBed, setSelectedBed] = useState(null);\n  const dispatch = useDispatch();\n  const confirmation = useConfirmation();\n  useEffect(() => {\n    if (metaData) {\n      dispatch(getICUBeds(activeICU.id, metaData.id));\n    }\n  }, [metaData, activeICU.id]);\n\n  const onViewBed = bed => {\n    setSelectedBed(bed);\n    setBedModalOpen(true);\n  };\n\n  const onOccupyBed = bed => {\n    setSelectedBed(bed);\n    setPatientModalOpen(true); // dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Admitted\"));\n  };\n\n  const onReserveBed = bed => {\n    confirmation.show(\"Do you want to confirm reserving this bed?\", () => dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Reserved\")), () => {});\n  };\n\n  const onDischargeBed = bed => {\n    confirmation.show(\"Do you want to confirm discharging this bed?\", () => dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Discharged\")), () => {});\n  };\n\n  if (!activeOrgUnit) {\n    return <p>Please select an organization unit</p>;\n  }\n\n  return <>\n            <div className=\"inner-header\">\n                <span className=\"t20\">Showing ICU Bed status at <b>{activeOrgUnit.name}</b></span>\n                <Button onClick={() => setShowConfigure(true)} className=\"pull-right\">Configure Beds</Button>\n            </div>\n            {activeICU && <>\n                    {showConfigure && <ViewConfigureBeds onBack={() => setShowConfigure(false)} />}\n                    {!showConfigure && <div className=\"icu-bed-container\">\n                            {!activeICU.beds.length && <p>No beds currently added</p>}\n                            {activeICU.beds.map((bed, key) => <ICUBed key={key} name={getAttributeByName(bed, \"ICU - Bed Number\")} status={bed.status ? bed.status : \"IDLE\"} onView={() => onViewBed(bed)} onOccupy={() => onOccupyBed(bed)} onDischarge={() => onDischargeBed(bed)} onReserve={() => onReserveBed(bed)} />)}\n                        </div>}\n                </>}\n            {bedModalOpen && <ConfigureBedModal open={bedModalOpen} onClose={() => setBedModalOpen(false)} selectedBed={selectedBed} editable={false} />}\n            {patientModalOpen && <RegisterPatientModal open={patientModalOpen} onClose={() => setPatientModalOpen(false)} selectedBed={selectedBed} />}\n        </>;\n}\n\nfunction ViewConfigureBeds({\n  onBack\n}) {\n  const [bedModalOpen, setBedModalOpen] = useState(false);\n  const dispatch = useDispatch();\n  const activeICU = useSelector(state => state.app.activeICU);\n  const metaData = useSelector(state => state.app.metaData);\n  const [selectedBed, setSelectedBed] = useState(null);\n  const confirmation = useConfirmation(); // useEffect(() => {\n  //     dispatch(getICUBeds(activeICU.id, metaData.id));\n  // }, []);\n\n  const onAddBed = () => {\n    setSelectedBed(null);\n    setBedModalOpen(true);\n  };\n\n  const onSelectBed = bed => {\n    setSelectedBed(bed);\n    setBedModalOpen(true);\n  };\n\n  const onRemoveBed = bed => {\n    confirmation.show(\"Do you really want to remove this bed?\", () => {\n      dispatch(removeBed(activeICU.id, bed.enrollments[0].enrollment));\n    }, () => {});\n  };\n\n  return <>\n            <div className=\"inner-header\">\n                <ButtonStrip end>\n                    <Button onClick={onBack}>Back</Button>\n                    <Button primary onClick={onAddBed}>Add New Bed</Button>\n                </ButtonStrip>\n            </div>\n            <div className=\"inner-container\">\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCellHead>Bed No</TableCellHead>  \n                            <TableCellHead>Bed Type</TableCellHead>\n                            <TableCellHead>Covid Type</TableCellHead> \n                            <TableCellHead>Action</TableCellHead> \n                        </TableRow>\n                    </TableHead>\n                    {activeICU && <TableBody>\n                            {activeICU.beds.map((bed, key) => <TableRow key={key}>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - Bed Number\")}</TableCell>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - Type\")}</TableCell>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - COVID Type\")}</TableCell>\n                                    <TableCell>\n                                        <ButtonStrip>\n                                            <Button onClick={() => onSelectBed(bed)}>View Details</Button>\n                                            <Button destructive onClick={() => onRemoveBed(bed)}>Remove</Button>\n                                        </ButtonStrip>\n                                    </TableCell>\n                                </TableRow>)}\n                        </TableBody>}\n                </Table>\n            </div>\n            {bedModalOpen && <ConfigureBedModal open={bedModalOpen} onClose={() => setBedModalOpen(false)} selectedBed={selectedBed} editable={true} />}\n        </>;\n}\n\nfunction ContainerView({\n  children\n}) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getMetaData());\n  }, []);\n  return <div style={{\n    height: \"100vh\"\n  }}>\n            {children}\n        </div>;\n}\n\nfunction MyApp() {\n  const dhisEngine = useDataEngine();\n  const customizedMiddleware = getDefaultMiddleware({\n    thunk: {\n      extraArgument: dhisEngine\n    }\n  });\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware\n  });\n  return <Provider store={store}>\n            <ContainerView>\n                <div className=\"container\">\n                    <div className=\"left-column\">\n                        <OrgUnits />\n                    </div>\n                    <div className=\"right-column\">\n                        <ViewOrgICU />\n                        {\n            /* <ViewICUBeds /> */\n          }\n                        {\n            /* <ViewConfigureBeds /> */\n          }\n                    </div>\n                </div>\n            </ContainerView>\n        </Provider>;\n}\n\nexport default MyApp;"],"sourceRoot":""}