{"version":3,"sources":["D2App/state/appState.js","D2App/components/OrgUnits.js","D2App/state/notificationState.js","D2App/state/apiActions.js","D2App/components/ICUTable.js","D2App/state/store.js","D2App/components/permissionUtils.js","D2App/components/ICUBed.js","D2App/components/ConfigureBedModal.js","D2App/components/useConfirmationHook.js","D2App/components/RegisterPatientModal.js","D2App/components/ICUMap.js","D2App/components/Notification.js","D2App/App.js"],"names":["appSlice","createSlice","name","initialState","activeUser","activeOrgUnit","activeICU","metaData","icuList","ICUEventId","reducers","setActiveOrgUnit","state","action","payload","setActiveICU","setActiveUser","setMetaData","setICUBeds","id","icuId","beds","updateBedStatus","bedIndex","findIndex","b","trackedEntityInstance","bedId","status","updateFilteredICUList","updateICUStat","icuIndex","i","available","stat","total","actions","query","organisationUnits","resource","params","paging","fields","OrgUnits","loading","error","data","refetch","useDataQuery","orgRoot","setOrgRoot","useState","cursor","setCursor","dispatch","useDispatch","traverseResults","useEffect","orgData","root","filter","o","level","children","processList","_children","child","childOrg","length","push","active","_prunedChildren","traverse","mergeLevel","node","newChildren","child1","child2","selectOU","icus","icu","distance","geometry","lat","coordinates","lng","onToggle","toggled","Object","assign","notificationSlice","isOpen","message","type","showNotification","hideNotification","ICU_EVENT","bedEventHelper","eventType","dataValue","dataElement","value","getEventStatus","event","dataValues","getICUBeds","program","async","getState","dhisEngine","results","ou","trackedEntityInstances","bed","getBedStatus","console","log","instanceId","events","lastEvent","bedEventIndex","dv","app","dataElements","addBedEvent","teId","programId","programStageId","additionalData","eventResponse","updateMutation","moment","format","mutate","mutation","getICUStat","filters","filtersQuery","values","map","f","join","substr","orgUnit","filteredTEI","response","te","sortData","field","setLocationData","sortedBy","setSortedBy","sortOrder","setSortOrder","result","slice","sort","locOne","locTwo","propertyOne","propertyTwo","comparison","ICUTable","onSelectICU","locationData","stateData","primary","onClick","loc","key","href","rootReducer","combineReducers","appReducer","notification","notificationReducer","configureStore","reducer","ACTIONS","hasPerm","programAccess","teAccess","group","canRead","indexOf","canWrite","ICUBed","onView","onOccupy","onDischarge","onReserve","hasEventPerm","ref","useRef","open","setOpen","className","createPortal","transparent","placement","reference","document","body","booleanSelections","label","experiseAttrbutes","facilitiesAttributes","infoAttributes","findAttribute","attributes","search","a","attribute","findOption","optionSet","code","ConfigureBedModal","onClose","selectedBed","editable","useSelector","bedAttributes","setBedAttributtes","formState","setFormState","useDataEngine","_bedAttributes","trackedEntityType","trackedEntityTypeAttributes","_formState","attrib","bedValue","valueType","options","option","displayName","updateField","getAttributeInput","attribId","find","formName","onChange","val","selected","disabled","sel","end","secondary","updateBed","teID","importSummaries","createBed","useConfirmation","show","onOk","onCancel","confirm","patientFieldset","RegisterPatientModal","actionType","programStage","getFormField","mapContainerStyle","height","width","center","infoWindowInitData","visible","ICUMap","props","onMarkerClick","infoWindowData","setInfoWindowData","handleMarkerOnHover","ICUEntry","markerAvailableOptions","icon","path","fillColor","fillOpacity","strokeColor","strokeWeight","markerUnavailableOptions","googleMapsApiKey","zoom","index","position","onMouseOver","onMouseOut","closeBoxURL","style","backgroundColor","opacity","padding","fontSize","fontColor","Notification","duration","critical","warning","success","getAttributeByName","ViewOrgICU","bedData","bedTypeData","covidTypeData","setFilters","ViewICUBeds","placeholder","showConfigure","setShowConfigure","bedModalOpen","setBedModalOpen","patientModalOpen","setPatientModalOpen","patientModalAction","setPatientModalAction","setSelectedBed","eventPerm","setEventPerm","confirmation","access","ViewConfigureBeds","onBack","onViewBed","onOccupyBed","onDischargeBed","onReserveBed","onRemoveBed","enrollmentId","enrollments","enrollment","onSelectBed","destructive","ContainerView","ga","userGroupAccesses","userGroupUid","startsWith","trackedEntityAttribute","_dataElements","de","elem","user","userGroups","MyApp","customizedMiddleware","getDefaultMiddleware","thunk","extraArgument","store","middleware","bottom","left","paddingLeft"],"mappings":"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","file":"static/js/app.cece8c50.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nconst initState = {\n  activeUser: null,\n  activeOrgUnit: null,\n  activeICU: null,\n  metaData: null,\n  icuList: [],\n  ICUEventId: \"fKXrko0yhua\"\n};\nconst appSlice = createSlice({\n  name: \"app\",\n  initialState: initState,\n  reducers: {\n    setActiveOrgUnit(state, action) {\n      state.activeOrgUnit = action.payload;\n    },\n\n    setActiveICU(state, action) {\n      state.activeICU = action.payload;\n    },\n\n    setActiveUser(state, action) {\n      state.activeUser = action.payload;\n    },\n\n    setMetaData(state, action) {\n      state.metaData = action.payload;\n    },\n\n    setICUBeds(state, action) {\n      if (state.activeICU && state.activeICU.id === action.payload.icuId) {\n        state.activeICU.beds = action.payload.beds;\n      }\n    },\n\n    updateBedStatus(state, action) {\n      const bedIndex = state.activeICU.beds.findIndex(b => b.trackedEntityInstance === action.payload.bedId);\n      state.activeICU.beds[bedIndex].status = action.payload.status;\n    },\n\n    updateFilteredICUList(state, action) {\n      state.icuList = action.payload;\n    },\n\n    updateICUStat(state, action) {\n      const icuIndex = state.icuList.findIndex(i => i.id === action.payload.icuId);\n      state.icuList[icuIndex].available = action.payload.stat.available;\n      state.icuList[icuIndex].total = action.payload.stat.total;\n    }\n\n  }\n});\nexport const {\n  setActiveOrgUnit,\n  setActiveICU,\n  setMetaData,\n  setICUBeds,\n  updateBedStatus,\n  updateFilteredICUList,\n  updateICUStat,\n  setActiveUser\n} = appSlice.actions;\nexport default appSlice.reducer;","import React, { useEffect, useState } from 'react';\nimport { Card } from '@dhis2/ui-core';\nimport { useDispatch } from 'react-redux';\nimport { DataQuery, useDataQuery } from '@dhis2/app-runtime';\nimport { Treebeard } from 'react-treebeard';\nimport { setActiveOrgUnit, updateFilteredICUList, setActiveICU } from '../state/appState';\nconst query = {\n  organisationUnits: {\n    resource: 'organisationUnits.json',\n    params: {\n      paging: 'false',\n      fields: \"id,name,level,children,geometry\"\n    }\n  }\n};\nexport default function OrgUnits() {\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query);\n  const [orgRoot, setOrgRoot] = useState(null);\n  const [cursor, setCursor] = useState(false);\n  const dispatch = useDispatch();\n  var traverseResults = [];\n\n  function processList(orgData, children) {\n    let _children = [];\n\n    for (var child of children) {\n      let childOrg = orgData.filter(o => o.id === child.id);\n\n      if (childOrg.length === 1) {\n        childOrg = childOrg[0];\n\n        if (childOrg.children.length === 0) {\n          childOrg.children = null;\n        } else {\n          childOrg.children = processList(orgData, childOrg.children);\n        }\n\n        _children.push({ ...childOrg,\n          active: false\n        });\n      }\n    }\n\n    let _prunedChildren = [];\n\n    for (var child of _children) {\n      traverseResults = [];\n      traverse(child, 6);\n\n      if (traverseResults.length > 0) {\n        _prunedChildren.push(child);\n      }\n    }\n\n    return _prunedChildren;\n  }\n\n  function mergeLevel(node, level = 4) {\n    if (node.level === level - 1) {\n      // at level 3\n      let newChildren = [];\n\n      for (var child1 of node.children) {\n        if (!child1.children) continue;\n\n        for (var child2 of child1.children) {\n          newChildren.push(child2);\n        }\n      }\n\n      node.children = newChildren;\n      return;\n    }\n\n    for (var child of node.children) {\n      mergeLevel(child, level);\n    }\n  }\n\n  useEffect(() => {\n    if (data) {\n      const orgData = data.organisationUnits.organisationUnits;\n      const root = data.organisationUnits.organisationUnits.filter(o => o.level === 1)[0];\n      root.children = processList(orgData, root.children);\n      mergeLevel(root, 4);\n      setOrgRoot(root);\n    }\n  }, [loading]);\n\n  const onToggle = (node, toggled) => {\n    if (cursor) {\n      cursor.active = false;\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n\n    setCursor(node);\n    setOrgRoot(Object.assign({}, orgRoot));\n    selectOU(node);\n  };\n\n  function traverse(root, level) {\n    if (root.level === level) {\n      traverseResults.push({ ...root\n      });\n      return;\n    }\n\n    if (root.children) {\n      for (var child of root.children) {\n        traverse(child, level);\n      }\n    }\n  }\n\n  const selectOU = node => {\n    traverseResults = []; // traverse the tree and find level 6 bois\n\n    traverse(node, 6);\n    let icus = [];\n\n    for (var icu of traverseResults) {\n      icus.push({ ...icu,\n        distance: 0,\n        total: null,\n        available: null,\n        geometry: icu.geometry ? {\n          lat: icu.geometry.coordinates[1],\n          lng: icu.geometry.coordinates[0]\n        } : {\n          lat: 0,\n          lng: 0\n        }\n      });\n    }\n\n    dispatch(updateFilteredICUList(icus));\n    dispatch(setActiveOrgUnit({\n      id: node.id,\n      name: node.name,\n      level: node.level\n    }));\n\n    if (node.level === 6) {\n      dispatch(setActiveICU({\n        id: node.id,\n        beds: []\n      }));\n    }\n  };\n\n  return <Card>\n            {orgRoot && <Treebeard data={orgRoot} onToggle={onToggle} />}\n        </Card>;\n}","import { createSlice } from '@reduxjs/toolkit';\nconst initState = {\n  isOpen: false,\n  message: null,\n  type: null\n};\nconst notificationSlice = createSlice({\n  name: \"notification\",\n  initialState: initState,\n  reducers: {\n    showNotification(state, action) {\n      state.isOpen = true;\n      state.message = action.payload.message;\n      state.type = action.payload.type;\n    },\n\n    hideNotification(state, action) {\n      state, isOpen = false;\n      state.message = null;\n      state.type = null;\n    }\n\n  }\n});\nexport default notificationSlice.reducer;\nexport const {\n  showNotification,\n  hideNotification\n} = notificationSlice.actions;","import { setICUBeds, setMetaData, updateBedStatus, updateICUStat, setActiveUser } from './appState';\nimport * as moment from 'moment';\nimport { showNotification } from './notificationState';\nconst ICU_EVENT = \"ICU - Bed Event\";\nexport function test() {\n  return async (dispatch, getState, dhisEngine) => {\n    console.log(dhisEngine);\n  };\n}\n\nfunction bedEventHelper(metaData, eventType) {\n  let dataValue = {};\n\n  if (eventType === \"Discharged\") {\n    dataValue = {\n      dataElement: metaData[ICU_EVENT].id,\n      value: \"Discharged\"\n    };\n  } else if (eventType === \"Admitted\") {\n    dataValue = {\n      dataElement: metaData[ICU_EVENT].id,\n      value: \"Admitted\"\n    };\n  } else if (eventType === \"Reserved\") {\n    dataValue = {\n      dataElement: metaData[ICU_EVENT].id,\n      value: \"Reserved\"\n    };\n  }\n\n  return dataValue;\n}\n\nfunction getEventStatus(event) {\n  if (event.dataValues.length > 0) {\n    switch (event.dataValues[0].value) {\n      case \"Discharged\":\n        return \"AVAILABLE\";\n\n      case \"Admitted\":\n        return \"OCCUPIED\";\n\n      case \"Reserved\":\n        return \"RESERVED\";\n    }\n  }\n\n  return \"\";\n}\n\nexport function getActiveUser() {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        user: {\n          resource: 'me',\n          params: {\n            fields: \"id,displayName,userGroups,organisationUnits\"\n          }\n        }\n      };\n      const {\n        user\n      } = await dhisEngine.query(query);\n      dispatch(setActiveUser({\n        id: user.id,\n        name: user.displayName,\n        group: user.userGroups.length > 0 ? user.userGroups[0].id : null,\n        organisationUnits: user.organisationUnits.map(ou => ou.id)\n      }));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'Error loading user',\n        type: 'error'\n      }));\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getMetaData() {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        program: {\n          resource: 'programs/C1wTfmmMQUn',\n          params: {\n            fields: \"id,name,userGroupAccesses,trackedEntityType[id, displayName, userGroupAccesses, trackedEntityTypeAttributes[trackedEntityAttribute[id, displayName, formName, valueType, optionSet[options[displayName, id, code]]]]]\"\n          }\n        },\n        dataElements: {\n          resource: 'dataElements',\n          params: {\n            paging: \"false\",\n            program: \"C1wTfmmMQUn\",\n            fields: \"id,displayName,optionSet[options[id, displayName,code]]\"\n          }\n        }\n      };\n      const {\n        program,\n        dataElements\n      } = await dhisEngine.query(query);\n      console.log(program);\n      let metaData = {\n        id: program.id,\n        name: program.name,\n        trackedEntityType: {\n          id: program.trackedEntityType.id,\n          displayName: program.trackedEntityType.displayName,\n          trackedEntityTypeAttributes: []\n        }\n      };\n      let programAccess = {};\n\n      for (var ga of program.userGroupAccesses) {\n        programAccess[ga.userGroupUid] = {\n          canRead: ga.access.startsWith(\"rw\"),\n          canWrite: ga.access.startsWith(\"rwrw\")\n        };\n      }\n\n      metaData['programAccess'] = programAccess;\n\n      for (var attrib of program.trackedEntityType.trackedEntityTypeAttributes) {\n        metaData.trackedEntityType.trackedEntityTypeAttributes.push(attrib.trackedEntityAttribute);\n      }\n\n      let teAccess = {};\n\n      for (var ga of program.trackedEntityType.userGroupAccesses) {\n        teAccess[ga.userGroupUid] = {\n          canRead: ga.access.startsWith(\"rw\"),\n          canWrite: ga.access.startsWith(\"rwrw\")\n        };\n      }\n\n      metaData.trackedEntityType['access'] = teAccess;\n      let _dataElements = {};\n\n      for (var de of dataElements.dataElements) {\n        if (de.displayName.startsWith(\"ICU\")) {\n          let elem = {\n            id: de.id,\n            displayName: de.displayName\n          };\n\n          if (de.optionSet) {\n            elem[\"options\"] = de.optionSet.options;\n          }\n\n          _dataElements[de.displayName] = elem;\n        }\n      }\n\n      metaData[\"dataElements\"] = _dataElements;\n      dispatch(setMetaData(metaData));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'failed to load metadata',\n        type: 'error'\n      }));\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getICUBeds(icuId, program) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        results: {\n          resource: 'trackedEntityInstances',\n          params: {\n            ou: icuId,\n            fields: \"trackedEntityInstance,attributes[attribute,displayName,value],enrollments\",\n            program: program\n          }\n        }\n      };\n      const response = await dhisEngine.query(query);\n      const beds = response.results.trackedEntityInstances; // now get status of each\n\n      for (var bed of beds) {\n        dispatch(getBedStatus(bed.trackedEntityInstance));\n      }\n\n      dispatch(setICUBeds({\n        icuId,\n        beds\n      }));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'failed to load icu bed data',\n        type: 'error'\n      }));\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getBedStatus(instanceId) {\n  return async (dispatch, getState, dhisEngine) => {\n    const query = {\n      events: {\n        resource: 'events',\n        params: {\n          trackedEntityInstance: instanceId,\n          paging: \"false\",\n          status: \"ACTIVE\"\n        }\n      }\n    };\n    const response = await dhisEngine.query(query);\n    const events = response.events.events;\n    let status = \"\";\n\n    if (events.length > 0) {\n      const lastEvent = events[0];\n      const bedEventIndex = lastEvent.dataValues.findIndex(dv => dv.dataElement === getState().app.metaData.dataElements[ICU_EVENT].id);\n\n      if (bedEventIndex > -1) {\n        switch (lastEvent.dataValues[bedEventIndex].value) {\n          case \"Discharged\":\n            status = \"AVAILABLE\";\n            break;\n\n          case \"Admitted\":\n            status = \"OCCUPIED\";\n            break;\n\n          case \"Reserved\":\n            status = \"RESERVED\";\n            break;\n        }\n      }\n\n      dispatch(updateBedStatus({\n        bedId: instanceId,\n        status: status,\n        lastEvent: lastEvent\n      }));\n    }\n  };\n}\nexport function createBed(teID, icuId, programId, attributes) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {\n        \"trackedEntityType\": teID,\n        \"orgUnit\": icuId,\n        \"attributes\": attributes,\n        \"enrollments\": [{\n          \"orgUnit\": icuId,\n          \"program\": programId,\n          \"enrollmentDate\": moment().format(\"YYYY-MM-DD\"),\n          \"incidentDate\": moment().format(\"YYYY-MM-DD\")\n        }]\n      };\n      const mutation = {\n        resource: 'trackedEntityInstances',\n        type: 'create',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      const instanceId = response.response.importSummaries[0].reference; // add new event to make the bed available\n\n      dispatch(addBedEvent(instanceId, programId, getState().app.ICUEventId, icuId, \"Discharged\"));\n      dispatch(getICUBeds(icuId, programId));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in creating bed',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function updateBed(icuId, bedId, attributes) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {\n        \"orgUnit\": icuId,\n        \"attributes\": attributes\n      };\n      const mutation = {\n        resource: 'trackedEntityInstances/' + bedId,\n        type: 'update',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getICUBeds(icuId, getState().app.metaData.id));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in updating bed',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function removeBed(icuId, enrollmentId) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {};\n      const mutation = {\n        resource: 'enrollments/' + enrollmentId,\n        type: 'delete'\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getICUBeds(icuId, getState().app.metaData.id));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in deleting bed',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function addBedEvent(teId, programId, programStageId, icuId, eventType, additionalData = []) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      // first we complete last event\n      const query = {\n        events: {\n          resource: 'events',\n          params: {\n            trackedEntityInstance: teId,\n            paging: \"false\",\n            status: \"ACTIVE\"\n          }\n        }\n      };\n      const eventResponse = await dhisEngine.query(query);\n\n      if (eventResponse.events.events.length > 0) {\n        const lastEvent = eventResponse.events.events[0];\n        const updatePayload = {\n          \"event\": lastEvent.event,\n          \"trackedEntityInstance\": teId,\n          \"program\": programId,\n          \"programStage\": programStageId,\n          \"enrollment\": icuId,\n          \"orgUnit\": icuId,\n          \"completedDate\": moment().format(\"YYYY-MM-DD\"),\n          \"status\": \"COMPLETED\"\n        };\n        const updateMutation = {\n          resource: 'events',\n          type: 'create',\n          data: updatePayload\n        };\n        await dhisEngine.mutate(updateMutation);\n      }\n\n      const dataValues = [bedEventHelper(getState().app.metaData.dataElements, eventType), ...additionalData];\n      const payload = {\n        \"trackedEntityInstance\": teId,\n        \"program\": programId,\n        \"programStage\": programStageId,\n        \"enrollment\": icuId,\n        \"orgUnit\": icuId,\n        \"dataValues\": dataValues,\n        \"eventDate\": moment().format(\"YYYY-MM-DD\"),\n        \"status\": \"ACTIVE\"\n      };\n      const mutation = {\n        resource: 'events',\n        type: 'create',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getBedStatus(teId));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in adding bed event',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function getICUStat(icu, filters = {}) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      let filtersQuery = \"\";\n\n      for (var filter in filters) {\n        if (filters[filter].length === 0) {\n          continue;\n        }\n\n        const values = filters[filter].map(f => f.value);\n        filtersQuery += `${filter}:IN:${values.join(\";\")},`;\n      }\n\n      filtersQuery = filtersQuery.substr(0, filtersQuery.length - 1); // first we complete last event\n\n      const query = {\n        events: {\n          resource: 'events',\n          params: {\n            orgUnit: icu.id,\n            paging: \"false\",\n            status: \"ACTIVE\"\n          }\n        },\n        filteredTEI: {\n          resource: 'trackedEntityInstances',\n          params: {\n            ou: icu.id,\n            paging: 'false',\n            fields: 'trackedEntityInstance',\n            filter: filtersQuery\n          }\n        }\n      };\n      const response = await dhisEngine.query(query);\n      let stat = {\n        available: 0,\n        total: 0\n      };\n\n      for (var event of response.events.events) {\n        let teIndex = response.filteredTEI.trackedEntityInstances.findIndex(te => te.trackedEntityInstance === event.trackedEntityInstance);\n\n        if (teIndex === -1) {\n          // filtered TE doesn't have this\n          continue;\n        }\n\n        let status = getEventStatus(event);\n\n        if (status === \"AVAILABLE\") {\n          stat.available++;\n        }\n\n        stat.total++;\n      }\n\n      dispatch(updateICUStat({\n        icuId: icu.id,\n        stat: stat\n      }));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in retrieving ICU status',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}","import React, { useEffect, useState } from 'react';\nimport { Table, TableHead, TableBody, TableRow, TableCellHead, TableCell, Button, DropdownButton } from '@dhis2/ui-core';\nimport { useDispatch } from 'react-redux';\nimport { getICUStat } from '../state/apiActions';\n\nfunction sortData(field, data, state) {\n  const {\n    setLocationData,\n    sortedBy,\n    setSortedBy,\n    sortOrder,\n    setSortOrder\n  } = state;\n\n  const compare = (locOne, locTwo) => {\n    let propertyOne = locOne[field];\n    let propertyTwo = locTwo[field];\n    let comparison = 0;\n\n    if (propertyOne > propertyTwo) {\n      comparison = 1;\n    } else if (propertyOne < propertyTwo) {\n      comparison = -1;\n    }\n\n    if (sortedBy === field) {\n      comparison = comparison * -1 * sortOrder; //inverts the order\n    }\n\n    return comparison;\n  };\n\n  let result = data.slice();\n  result = result.sort(compare);\n  setLocationData(result);\n  setSortedBy(field);\n  setSortOrder(sortOrder * -1);\n}\n\nexport default function ICUTable({\n  data,\n  onSelectICU\n}) {\n  const [locationData, setLocationData] = useState([]);\n  const [sortedBy, setSortedBy] = useState('distance');\n  const [sortOrder, setSortOrder] = useState(1);\n  const dispatch = useDispatch();\n  const stateData = {\n    setLocationData,\n    sortedBy,\n    setSortedBy,\n    sortOrder,\n    setSortOrder\n  };\n  useEffect(() => {\n    sortData(sortedBy, data, stateData);\n  }, [data]);\n\n  if (!data) {\n    return <div></div>;\n  }\n\n  return <Table>\n            <TableHead>\n                <TableRow>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'name'} onClick={() => {\n            sortData('name', locationData, stateData);\n          }}> \n                            ICU\n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'distance'} onClick={() => {\n            sortData('distance', locationData, stateData);\n          }}> \n                            Distance \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'total'} onClick={() => {\n            sortData('total', locationData, stateData);\n          }}> \n                            TotalBeds \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'available'} onClick={() => {\n            sortData('available', locationData, stateData);\n          }}> \n                            AvailableBeds \n                        </DropdownButton> \n                    </TableCellHead>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {locationData.map((loc, key) => <TableRow key={key}>\n                    <TableCell><a href=\"#\" onClick={() => onSelectICU(loc)}>{loc.name}</a></TableCell>\n                    <TableCell>{loc.distance}</TableCell>\n                    <TableCell>{loc.total}</TableCell>\n                    <TableCell>{loc.available}</TableCell>\n                </TableRow>)}\n            </TableBody>\n        </Table>;\n}","import { configureStore, combineReducers, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport appReducer from './appState';\nimport notificationReducer from './notificationState';\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  notification: notificationReducer\n});\nexport const store = configureStore({\n  reducer: rootReducer\n});","export const ACTIONS = {\n  VIEW_ICU: \"VIEW_ICU\",\n  CONFIG_ICU: \"CONFIG_ICU\",\n  ADD_EVENT: \"ADD_EVENT\"\n};\nexport function hasPerm(action, activeUser, programAccess, teAccess, icuId) {\n  if (activeUser.group === \"LkEkMDG0zfj\") {\n    //super user\n    return true;\n  }\n\n  if (action === ACTIONS.VIEW_ICU) {\n    if (teAccess[activeUser.group] && teAccess[activeUser.group].canRead) {\n      return true;\n    }\n  }\n\n  if (action === ACTIONS.CONFIG_ICU && activeUser.organisationUnits.indexOf(icuId) > -1) {\n    if (teAccess[activeUser.group] && teAccess[activeUser.group].canWrite) {\n      return true;\n    }\n  }\n\n  if (action === ACTIONS.ADD_EVENT) {\n    if (programAccess[activeUser.group] && programAccess[activeUser.group].canWrite && activeUser.organisationUnits.indexOf(icuId) > -1) {\n      return true;\n    }\n  }\n\n  return false;\n}","import React, { useEffect, useState, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Popper, ScreenCover } from '@dhis2/ui-core';\nimport { hasPerm, ACTIONS } from './permissionUtils';\nexport default function ICUBed({\n  name,\n  status,\n  onView,\n  onOccupy,\n  onDischarge,\n  onReserve,\n  hasEventPerm\n}) {\n  const ref = useRef(null);\n  const [open, setOpen] = useState(false);\n\n  const getClassName = () => {\n    if (status === \"AVAILABLE\") {\n      return \"available\";\n    }\n\n    if (status === \"OCCUPIED\") {\n      return \"occupied\";\n    }\n\n    if (status === \"RESERVED\") {\n      return \"reserved\";\n    }\n\n    return \"\";\n  };\n\n  const onToggle = () => {\n    if (hasEventPerm) {\n      setOpen(!open);\n    }\n  };\n\n  return <div className={`icu-bed ${getClassName()}`} ref={ref} onClick={onToggle}>\n            <span>{name}</span>\n            {open && createPortal(<ScreenCover onClick={onToggle} transparent>\n                        <Popper placement=\"right\" reference={ref}>\n                            <div className=\"bed-options\">\n                                {(status === \"AVAILABLE\" || status === \"RESERVED\") && <div onClick={() => {\n            setOpen(false);\n            onOccupy();\n          }}>Occupy</div>}\n                                {status === \"AVAILABLE\" && <div onClick={() => {\n            setOpen(false);\n            onReserve();\n          }}>Reserve</div>}\n                                {status !== \"AVAILABLE\" && <div onClick={() => {\n            setOpen(false);\n            onDischarge();\n          }}>Discharge</div>}\n                                <div onClick={onView}>View</div>\n                            </div>\n                        </Popper>\n                    </ScreenCover>, document.body)}\n        </div>;\n}","import React, { useState, useEffect } from 'react';\nimport { Modal, ModalTitle, ModalActions, ModalContent, ButtonStrip, Button, InputField, SingleSelect, RadioGroup, Radio, RadioGroupField, SingleSelectOption, SingleSelectField } from '@dhis2/ui-core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as moment from 'moment';\nimport { useDataMutation, useDataEngine } from '@dhis2/app-runtime';\nimport { test, createBed, updateBed } from '../state/apiActions';\nconst booleanSelections = [{\n  label: \"No\",\n  value: 'false'\n}, {\n  label: \"Yes\",\n  value: 'true'\n}];\nconst experiseAttrbutes = [\"v5eNzdQsLox\", \"eBlbs7BzVfX\", \"JJ2DQSnlhfR\", \"m64bCKnUD8L\", \"Xar8cTc8XN0\", \"k7eXIuzzhat\", \"JZXI1GzSoYx\"];\nconst facilitiesAttributes = [\"Jio5MTDVFo4\", \"yvOZEiBS5cd\", \"CGp0lKLkSKY\", \"YCILPvLTofG\"];\nconst infoAttributes = [\"tswabivShTy\", \"Xt5tV6OFSEW\", \"XYNBoDZS0aV\"];\n\nfunction findAttribute(attributes, id) {\n  const search = attributes.filter(a => a.attribute === id);\n  return search.length > 0 ? search[0].value : null;\n}\n\nfunction findOption(optionSet, code) {\n  const search = optionSet.filter(o => o.code === code);\n  return search[0];\n}\n\nexport default function ConfigureBedModal({\n  open,\n  onClose,\n  selectedBed,\n  editable\n}) {\n  const metaData = useSelector(state => state.app.metaData);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const [bedAttributes, setBedAttributtes] = useState([]);\n  const [formState, setFormState] = useState({});\n  const engine = useDataEngine();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (metaData) {\n      let _bedAttributes = metaData.trackedEntityType.trackedEntityTypeAttributes;\n      let _formState = {};\n\n      for (var attrib of _bedAttributes) {\n        // check if this is a update thing\n        let bedValue = null;\n\n        if (selectedBed) {\n          bedValue = findAttribute(selectedBed.attributes, attrib.id);\n        }\n\n        if (attrib.valueType === \"TEXT\") {\n          if (attrib.optionSet && attrib.optionSet.options && attrib.optionSet.options.length > 0) {\n            if (bedValue) {\n              const option = findOption(attrib.optionSet.options, bedValue);\n              _formState[attrib.id] = {\n                \"label\": option.displayName,\n                \"value\": option.code\n              };\n            } else {\n              _formState[attrib.id] = {\n                \"label\": attrib.optionSet.options[0].displayName,\n                \"value\": attrib.optionSet.options[0].code\n              };\n            }\n          } else {\n            _formState[attrib.id] = bedValue ? bedValue : \"\";\n          }\n        } else if (attrib.valueType === \"BOOLEAN\") {\n          _formState[attrib.id] = {\n            \"label\": bedValue && bedValue === \"true\" ? \"Yes\" : \"No\",\n            \"value\": bedValue ? bedValue : \"false\"\n          };\n        }\n      }\n\n      setFormState(_formState);\n      setBedAttributtes(_bedAttributes);\n    }\n  }, [metaData]);\n\n  if (!open) {\n    return <></>;\n  }\n\n  const updateField = (field, value) => {\n    setFormState({ ...formState,\n      [field]: value\n    });\n  };\n\n  const getAttributeInput = (attribId, key) => {\n    console.log(attribId);\n    console.log(bedAttributes);\n    const attrib = bedAttributes.find(b => b.id === attribId);\n    console.log(attrib);\n\n    if (attrib.optionSet && attrib.optionSet.options && attrib.optionSet.options.length > 0) {\n      return <SingleSelectField key={key} label={attrib.formName} name={attrib.id} onChange={val => updateField(attrib.id, val.selected)} selected={formState[attrib.id]} disabled={!editable}>\n                        {attrib.optionSet.options.map((sel, key) => <SingleSelectOption key={key} label={sel.displayName} value={sel.code} />)}\n                </SingleSelectField>;\n    }\n\n    if (attrib.valueType === \"TEXT\") {\n      return <InputField key={key} label={attrib.formName} name={attrib.id} type=\"text\" onChange={val => updateField(attrib.id, val.value)} value={formState[attrib.id]} disabled={!editable} />;\n    }\n\n    if (attrib.valueType === \"BOOLEAN\") {\n      return <SingleSelectField key={key} label={attrib.formName} name={attrib.id} onChange={val => updateField(attrib.id, val.selected)} selected={formState[attrib.id]} disabled={!editable}>\n                        {booleanSelections.map((sel, key) => <SingleSelectOption key={key} label={sel.label} value={sel.value} />)}\n                </SingleSelectField>;\n      return <></>;\n    }\n  };\n\n  const addBed = async () => {\n    const attributes = [];\n\n    for (var attrib in formState) {\n      attributes.push({\n        \"attribute\": attrib,\n        \"value\": formState[attrib].value ? formState[attrib].value : formState[attrib]\n      });\n    }\n\n    if (selectedBed) {\n      // update existing bed\n      dispatch(updateBed(activeICU.id, selectedBed.trackedEntityInstance, attributes));\n    } else {\n      //create new bed\n      dispatch(createBed(metaData.trackedEntityType.id, activeICU.id, metaData.id, attributes));\n    }\n\n    onClose();\n  };\n\n  return <Modal open>\n            <ModalTitle>\n                {!editable ? \"View\" : selectedBed ? \"Update\" : \"Add\"} ICU Bed\n            </ModalTitle>\n            <ModalContent>\n                {bedAttributes.length > 0 && <div className=\"form\">\n                        {infoAttributes.map((attrib, key) => getAttributeInput(attrib, key))}\n                        \n                        <h4>Facilities</h4>\n                        {facilitiesAttributes.map((attrib, key) => getAttributeInput(attrib, key))}\n\n                        <h4>Expertise</h4>\n                        {experiseAttrbutes.map((attrib, key) => getAttributeInput(attrib, key))}\n                    </div>}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button onClick={onClose} secondary type=\"button\">\n                        Close\n                    </Button>\n                    {editable && <Button onClick={addBed} primary type=\"button\">\n                            {selectedBed ? \"Update Bed\" : \"Add New Bed\"}\n                        </Button>}\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n}","import React from 'react';\nexport default function useConfirmation() {\n  const show = (query, onOk, onCancel) => {\n    const isOk = confirm(query);\n\n    if (isOk) {\n      onOk();\n    } else {\n      onCancel();\n    }\n  };\n\n  return {\n    show\n  };\n}","import React, { useState, useEffect } from 'react';\nimport { Modal, ModalTitle, ModalActions, ModalContent, ButtonStrip, Button, InputField, SingleSelect, RadioGroup, Radio, RadioGroupField, SingleSelectOption, SingleSelectField } from '@dhis2/ui-core';\nimport { addBedEvent } from '../state/apiActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useConfirmation from './useConfirmationHook';\nconst patientFieldset = [{\n  type: \"TEXT\",\n  label: \"ICU - BHT Number\",\n  id: \"j1hbO7zzRgV\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Patient Name\",\n  id: \"sK09QRLNyAA\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Consultant In-charge\",\n  id: \"malZQqUEzi9\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Patient Diagnosis\",\n  id: \"qh9bc6jlauE\"\n}];\nexport default function RegisterPatientModal({\n  open,\n  onClose,\n  selectedBed,\n  actionType\n}) {\n  const [formState, setFormState] = useState({});\n  const dispatch = useDispatch();\n  const metaData = useSelector(state => state.app.metaData);\n  const programStage = useSelector(state => state.app.ICUEventId);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const confirmation = useConfirmation();\n  useEffect(() => {\n    let _formState = {};\n\n    for (var field of patientFieldset) {\n      if (field.type === \"TEXT\") {\n        _formState[field.id] = \"\";\n      }\n    }\n\n    setFormState(_formState);\n  }, []);\n\n  const updateField = (field, value) => {\n    setFormState({ ...formState,\n      [field]: value\n    });\n  };\n\n  const getFormField = (field, key) => {\n    if (field.type === \"TEXT\") {\n      return <InputField key={key} label={field.label} name={field.id} onChange={val => updateField(field.id, val.value)} value={formState[field.id]} />;\n    }\n  };\n\n  const admitPatient = () => {\n    let dataValues = [];\n\n    for (var field in formState) {\n      dataValues.push({\n        dataElement: field,\n        value: formState[field]\n      });\n    }\n\n    if (actionType === \"admit\") {\n      dispatch(addBedEvent(selectedBed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Admitted\", dataValues));\n    } else if (actionType === \"reserve\") {\n      dispatch(addBedEvent(selectedBed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Reserved\", dataValues));\n    }\n\n    onClose();\n  };\n\n  return <Modal open>\n            <ModalTitle>\n                {actionType === \"admit\" ? 'Admit' : 'Reserve'} New Patient\n            </ModalTitle>\n            <ModalContent>\n                {patientFieldset.map((field, key) => getFormField(field, key))}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button onClick={onClose} secondary type=\"button\">\n                        Close\n                    </Button>\n                    <Button onClick={admitPatient} primary type=\"button\">\n                        Admit Patient\n                    </Button>\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n}","import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoBox } from '@react-google-maps/api';\nconst mapContainerStyle = {\n  height: \"600px\",\n  width: \"100%\"\n};\nconst center = {\n  lat: 8.11,\n  lng: 80.77\n};\nconst infoWindowInitData = {\n  visible: false,\n  ...center\n};\nexport default function ICUMap(props) {\n  const {\n    onMarkerClick,\n    data\n  } = props;\n  const [infoWindowData, setInfoWindowData] = useState(infoWindowInitData);\n\n  const handleMarkerOnHover = ICUEntry => {\n    setInfoWindowData({\n      visible: true,\n      ...ICUEntry\n    });\n  };\n\n  const infoBoxOptions = {\n    closeBoxURL: ''\n  };\n  const markerAvailableOptions = {\n    icon: {\n      path: 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z',\n      fillColor: '#00802b',\n      fillOpacity: 1,\n      strokeColor: '',\n      strokeWeight: 0\n    }\n  };\n  const markerUnavailableOptions = {\n    icon: {\n      path: 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z',\n      fillColor: '#DC143C',\n      fillOpacity: 1,\n      strokeColor: '',\n      strokeWeight: 0\n    }\n  };\n  return <LoadScript id=\"script-loader\" googleMapsApiKey=\"AIzaSyBjlDmwuON9lJbPMDlh_LI3zGpGtpK9erc\">\n            <GoogleMap id='example-map' mapContainerStyle={mapContainerStyle} zoom={7.6} center={center}>\n                {data.map((ICUEntry, index) => {\n        return <Marker position={{\n          lat: ICUEntry.geometry.lat,\n          lng: ICUEntry.geometry.lng\n        }} onClick={() => {\n          onMarkerClick(ICUEntry);\n        }} onMouseOver={() => {\n          handleMarkerOnHover(ICUEntry);\n        }} onMouseOut={() => {\n          handleMarkerOnHover(infoWindowInitData);\n        }} options={ICUEntry.available > 0 ? markerAvailableOptions : markerUnavailableOptions} key={index} />;\n      })}\n                {infoWindowData.visible && <InfoBox position={infoWindowData} options={infoBoxOptions}>\n                        <div style={{\n          backgroundColor: 'white',\n          opacity: 0.95,\n          padding: 5\n        }}>\n                            <div style={{\n            fontSize: 14,\n            fontColor: `#08233B`\n          }}>\n                                <div>ICU: {infoWindowData.name}</div>\n                                <div>Distance: {infoWindowData.distance}</div>\n                                <div>Beds: {infoWindowData.available}</div>\n                            </div>\n                        </div>\n                    </InfoBox>}\n            </GoogleMap>\n        </LoadScript>;\n}","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AlertBar } from '@dhis2/ui-core';\nexport default function Notification(props) {\n  const {\n    isOpen,\n    message,\n    type\n  } = useSelector(state => state.notification);\n  if (!isOpen) return null;\n  return <AlertBar duration={5000} icon critical={type === 'error'} warning={type === 'warning'} success={type === 'success'}>\n            {message}\n        </AlertBar>;\n}","import React, { useState, useEffect } from 'react';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { DataQuery, useDataQuery, useDataEngine } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport OrgUnits from './components/OrgUnits';\nimport './App.css';\nimport { Card, MultiSelect, MultiSelectOption, MultiSelectField, Button, ButtonStrip, Table, TableHead, TableBody, TableRow, TableCellHead, TableCell } from '@dhis2/ui-core';\nimport ICUTable from './components/ICUTable';\nimport * as api from \"./mockapi\";\nimport { rootReducer } from './state/store';\nimport ICUBed from './components/ICUBed';\nimport ConfigureBedModal from './components/ConfigureBedModal';\nimport { setActiveICU, setMetaData, setActiveOrgUnit, updateICUStat } from './state/appState';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { getICUBeds, getMetaData, addBedEvent, removeBed, getICUStat, getActiveUser } from './state/apiActions';\nimport RegisterPatientModal from './components/RegisterPatientModal';\nimport useConfirmation from './components/useConfirmationHook';\nimport ICUMap from './components/ICUMap';\nimport Notification from './components/Notification';\nimport { hasPerm, ACTIONS } from './components/permissionUtils';\n\nfunction getAttributeByName(bed, name) {\n  for (var attrib of bed.attributes) {\n    if (attrib.displayName === name) {\n      return attrib.value;\n    }\n  }\n\n  return \"\";\n}\n\nfunction ViewOrgICU() {\n  const activeOrgUnit = useSelector(state => state.app.activeOrgUnit);\n  const bedData = useSelector(state => state.app.icuList);\n  const metaData = useSelector(state => state.app.metaData);\n  const dispatch = useDispatch();\n  const bedTypeId = 'XYNBoDZS0aV';\n  const covidTypeId = 'Xt5tV6OFSEW';\n  let bedTypeData = null;\n  let covidTypeData = null;\n\n  if (metaData) {\n    bedTypeData = metaData.trackedEntityType.trackedEntityTypeAttributes.find(({\n      id\n    }) => id === bedTypeId);\n    covidTypeData = metaData.trackedEntityType.trackedEntityTypeAttributes.find(({\n      id\n    }) => id === covidTypeId);\n  }\n\n  const [filters, setFilters] = useState({\n    [bedTypeId]: [],\n    [covidTypeId]: []\n  });\n  useEffect(() => {\n    if (bedData) {\n      for (var icu of bedData) {\n        if (icu.total === null) {\n          dispatch(getICUStat(icu, filters));\n          dispatch(updateICUStat({\n            icuId: icu.id,\n            stat: {\n              total: \"Updating...\",\n              available: null\n            }\n          }));\n        }\n      }\n    }\n  }, [bedData]);\n  useEffect(() => {\n    if (bedData) {\n      for (var icu of bedData) {\n        dispatch(getICUStat(icu, filters));\n      }\n    }\n  }, [filters]);\n\n  if (!activeOrgUnit) {\n    return <p>Please select an organization unit</p>;\n  }\n\n  if (activeOrgUnit.level === 6) {\n    return <ViewICUBeds />;\n  }\n\n  const onSelectICU = icu => {\n    dispatch(setActiveOrgUnit({\n      id: icu.id,\n      name: icu.name,\n      level: icu.level\n    }));\n    dispatch(setActiveICU({\n      id: icu.id,\n      beds: []\n    }));\n  };\n\n  return activeOrgUnit.level < 6 && <>\n                <span className=\"t20\">Showing ICU Locations for <b>{activeOrgUnit.name}</b></span>\n                <div className=\"filter-area\">\n                    <MultiSelect selected={filters[bedTypeId]} placeholder={bedTypeData.displayName} onChange={({\n        selected\n      }) => {\n        setFilters({ ...filters,\n          [bedTypeId]: selected\n        });\n      }}>\n                        {bedTypeData && bedTypeData.optionSet.options.map((option, key) => <MultiSelectOption key={key} value={option.code} label={option.displayName} />)}\n                    </MultiSelect>\n                    <MultiSelect selected={filters[covidTypeId]} placeholder={covidTypeData.displayName} onChange={({\n        selected\n      }) => {\n        setFilters({ ...filters,\n          [covidTypeId]: selected\n        });\n      }}>\n                        {covidTypeData && covidTypeData.optionSet.options.map((option, key) => <MultiSelectOption key={key} value={option.code} label={option.displayName} />)}\n                    </MultiSelect>\n                </div>\n                <div className=\"icu-org\">\n                    <div className=\"icu-table\">\n                        <ICUTable data={bedData} onSelectICU={onSelectICU} />\n                    </div>\n                    <div className=\"icu-map\">\n                        <ICUMap onMarkerClick={ICUEntry => {\n          console.log(ICUEntry);\n        }} data={bedData} />\n                    </div>\n                </div>\n            </>;\n}\n\nfunction ViewICUBeds() {\n  const activeUser = useSelector(state => state.app.activeUser);\n  const activeOrgUnit = useSelector(state => state.app.activeOrgUnit);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const metaData = useSelector(state => state.app.metaData);\n  const programStage = useSelector(state => state.app.ICUEventId);\n  const [showConfigure, setShowConfigure] = useState(false);\n  const [bedModalOpen, setBedModalOpen] = useState(false);\n  const [patientModalOpen, setPatientModalOpen] = useState(false);\n  const [patientModalAction, setPatientModalAction] = useState(\"admit\");\n  const [selectedBed, setSelectedBed] = useState(null);\n  const [eventPerm, setEventPerm] = useState(false);\n  const dispatch = useDispatch();\n  const confirmation = useConfirmation();\n  useEffect(() => {\n    if (metaData) {\n      dispatch(getICUBeds(activeICU.id, metaData.id));\n      console.log(\"has perm\", hasPerm(ACTIONS.CONFIG_ICU, activeUser, metaData.programAccess, metaData.trackedEntityType.access, activeICU.id));\n\n      if (hasPerm(ACTIONS.ADD_EVENT, activeUser, metaData.programAccess, metaData.trackedEntityType.access, activeICU.id)) {\n        setEventPerm(true);\n      }\n    }\n  }, [metaData, activeICU.id]);\n\n  const onViewBed = bed => {\n    setSelectedBed(bed);\n    setBedModalOpen(true);\n  };\n\n  const onOccupyBed = bed => {\n    setSelectedBed(bed);\n    setPatientModalAction(\"admit\");\n    setPatientModalOpen(true); // dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Admitted\"));\n  };\n\n  const onReserveBed = bed => {\n    // confirmation.show(\"Do you want to confirm reserving this bed?\",\n    //     () => dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Reserved\")),\n    //     () => { }\n    // );\n    setSelectedBed(bed);\n    setPatientModalAction(\"reserve\");\n    setPatientModalOpen(true);\n  };\n\n  const onDischargeBed = bed => {\n    confirmation.show(\"Do you want to confirm discharging this bed?\", () => dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Discharged\")), () => {});\n  };\n\n  if (!activeOrgUnit) {\n    return <p>Please select an organization unit</p>;\n  }\n\n  return <>\n            <div className=\"contact\">\n                <p><b>Primary Contact</b></p>\n                <p>Dr. John Doe</p>\n                <p>+94771234568</p>\n                <p>+94717894562</p>\n            </div>\n            <div className=\"inner-header\">\n                <span className=\"t20\">Showing ICU Bed status at <b>{activeOrgUnit.name}</b></span>\n                {hasPerm(ACTIONS.CONFIG_ICU, activeUser, metaData.programAccess, metaData.trackedEntityType.access, activeICU.id) && <Button onClick={() => setShowConfigure(true)} className=\"pull-right\">Configure Beds</Button>}\n            </div>\n            {activeICU && <>\n                    {showConfigure && <ViewConfigureBeds onBack={() => setShowConfigure(false)} />}\n                    {!showConfigure && <div className=\"icu-bed-container\">\n                            {!activeICU.beds.length && <p>No beds currently added</p>}\n                            {activeICU.beds.map((bed, key) => <ICUBed key={key} name={getAttributeByName(bed, \"ICU - Bed Number\")} status={bed.status ? bed.status : \"IDLE\"} onView={() => onViewBed(bed)} onOccupy={() => onOccupyBed(bed)} onDischarge={() => onDischargeBed(bed)} onReserve={() => onReserveBed(bed)} hasEventPerm={eventPerm} />)}\n                        </div>}\n                </>}\n            {bedModalOpen && <ConfigureBedModal open={bedModalOpen} onClose={() => setBedModalOpen(false)} selectedBed={selectedBed} editable={false} />}\n            {patientModalOpen && <RegisterPatientModal open={patientModalOpen} onClose={() => setPatientModalOpen(false)} selectedBed={selectedBed} actionType={patientModalAction} />}\n        </>;\n}\n\nfunction ViewConfigureBeds({\n  onBack\n}) {\n  const [bedModalOpen, setBedModalOpen] = useState(false);\n  const dispatch = useDispatch();\n  const activeICU = useSelector(state => state.app.activeICU);\n  const metaData = useSelector(state => state.app.metaData);\n  const [selectedBed, setSelectedBed] = useState(null);\n  const confirmation = useConfirmation(); // useEffect(() => {\n  //     dispatch(getICUBeds(activeICU.id, metaData.id));\n  // }, []);\n\n  const onAddBed = () => {\n    setSelectedBed(null);\n    setBedModalOpen(true);\n  };\n\n  const onSelectBed = bed => {\n    setSelectedBed(bed);\n    setBedModalOpen(true);\n  };\n\n  const onRemoveBed = bed => {\n    confirmation.show(\"Do you really want to remove this bed?\", () => {\n      dispatch(removeBed(activeICU.id, bed.enrollments[0].enrollment));\n    }, () => {});\n  };\n\n  return <>\n            <div className=\"inner-header\">\n                <ButtonStrip end>\n                    <Button onClick={onBack}>Back</Button>\n                    <Button primary onClick={onAddBed}>Add New Bed</Button>\n                </ButtonStrip>\n            </div>\n            <div className=\"inner-container\">\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCellHead>Bed No</TableCellHead>\n                            <TableCellHead>Bed Type</TableCellHead>\n                            <TableCellHead>Covid Type</TableCellHead>\n                            <TableCellHead>Action</TableCellHead>\n                        </TableRow>\n                    </TableHead>\n                    {activeICU && <TableBody>\n                            {activeICU.beds.map((bed, key) => <TableRow key={key}>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - Bed Number\")}</TableCell>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - Type\")}</TableCell>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - COVID Type\")}</TableCell>\n                                    <TableCell>\n                                        <ButtonStrip>\n                                            <Button onClick={() => onSelectBed(bed)}>View Details</Button>\n                                            <Button destructive onClick={() => onRemoveBed(bed)}>Remove</Button>\n                                        </ButtonStrip>\n                                    </TableCell>\n                                </TableRow>)}\n                        </TableBody>}\n                </Table>\n            </div>\n            {bedModalOpen && <ConfigureBedModal open={bedModalOpen} onClose={() => setBedModalOpen(false)} selectedBed={selectedBed} editable={true} />}\n        </>;\n}\n\nfunction ContainerView({\n  children\n}) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getMetaData());\n    dispatch(getActiveUser());\n  }, []);\n  return <div style={{\n    height: \"100vh\"\n  }}>\n            {children}\n        </div>;\n}\n\nfunction MyApp() {\n  const dhisEngine = useDataEngine();\n  const customizedMiddleware = getDefaultMiddleware({\n    thunk: {\n      extraArgument: dhisEngine\n    }\n  });\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware\n  });\n  return <Provider store={store}>\n            <ContainerView>\n                <div className=\"container\">\n                    <div className=\"left-column\">\n                        <OrgUnits />\n                    </div>\n                    <div className=\"right-column\">\n                        <ViewOrgICU />\n                        {\n            /* <ViewICUBeds /> */\n          }\n                        {\n            /* <ViewConfigureBeds /> */\n          }\n                    </div>\n                </div>\n                <div style={{\n        bottom: 0,\n        left: 0,\n        paddingLeft: 16,\n        position: 'fixed',\n        width: '60%'\n      }}>\n                    <Notification />\n                </div>\n            </ContainerView>\n        </Provider>;\n}\n\nexport default MyApp;"],"sourceRoot":""}