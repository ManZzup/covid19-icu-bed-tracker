{"version":3,"sources":["D2App/state/appState.js","D2App/components/OrgUnits.js","D2App/components/ICUTable.js","D2App/state/store.js","D2App/components/ICUBed.js","D2App/state/apiActions.js","D2App/components/ConfigureBedModal.js","D2App/components/useConfirmationHook.js","D2App/components/RegisterPatientModal.js","D2App/components/ICUMap.js","D2App/App.js"],"names":["appSlice","createSlice","name","initialState","activeOrgUnit","activeICU","metaData","icuList","ICUEventId","reducers","setActiveOrgUnit","state","action","payload","setActiveICU","setMetaData","setICUBeds","id","icuId","beds","updateBedStatus","bedIndex","findIndex","b","trackedEntityInstance","bedId","status","updateFilteredICUList","actions","query","organisationUnits","resource","params","paging","fields","OrgUnits","loading","error","data","refetch","useDataQuery","orgRoot","setOrgRoot","useState","cursor","setCursor","dispatch","useDispatch","traverseResults","useEffect","orgData","root","filter","o","level","children","processList","_children","child","childOrg","length","push","active","_prunedChildren","traverse","console","log","selectOU","node","icus","icu","distance","total","available","onToggle","toggled","Object","assign","sortData","field","setLocationData","sortedBy","setSortedBy","sortOrder","setSortOrder","result","slice","sort","locOne","locTwo","propertyOne","propertyTwo","comparison","ICUTable","locationData","stateData","primary","onClick","map","loc","key","rootReducer","combineReducers","app","appReducer","configureStore","reducer","ICUBed","onView","onOccupy","onDischarge","onReserve","ref","useRef","open","setOpen","className","createPortal","transparent","placement","reference","document","body","ICU_EVENT","bedEventHelper","eventType","dataValue","dataElement","value","getICUBeds","program","async","getState","dhisEngine","results","ou","trackedEntityInstances","bed","getBedStatus","instanceId","events","lastEvent","bedEventIndex","dataValues","dv","dataElements","addBedEvent","teId","programId","programStageId","additionalData","mutation","type","mutate","booleanSelections","label","findAttribute","attributes","search","a","attribute","findOption","optionSet","code","ConfigureBedModal","onClose","selectedBed","editable","useSelector","bedAttributes","setBedAttributtes","formState","setFormState","useDataEngine","_bedAttributes","trackedEntityType","trackedEntityTypeAttributes","_formState","attrib","bedValue","valueType","options","option","displayName","updateField","onChange","val","selected","disabled","sel","getAttributeInput","end","secondary","updateBed","teID","moment","format","response","importSummaries","createBed","useConfirmation","show","onOk","onCancel","confirm","patientFieldset","RegisterPatientModal","programStage","getFormField","mapContainerStyle","height","width","center","lat","lng","infoWindowInitData","visible","ICUMap","props","onMarkerClick","infoWindowData","setInfoWindowData","handleMarkerOnHover","ICUEntry","markerAvailableOptions","icon","path","fillColor","fillOpacity","strokeColor","strokeWeight","markerUnavailableOptions","googleMapsApiKey","zoom","index","position","onMouseOver","onMouseOut","closeBoxURL","style","backgroundColor","opacity","padding","fontSize","fontColor","getAttributeByName","ViewOrgICU","bedData","onBedTypeChange","ViewICUBeds","placeholder","showConfigure","setShowConfigure","bedModalOpen","setBedModalOpen","patientModalOpen","setPatientModalOpen","setSelectedBed","confirmation","ViewConfigureBeds","onBack","onViewBed","onOccupyBed","onDischargeBed","onReserveBed","onRemoveBed","enrollmentId","enrollments","enrollment","onSelectBed","destructive","ContainerView","trackedEntityAttribute","_dataElements","de","startsWith","elem","MyApp","customizedMiddleware","getDefaultMiddleware","thunk","extraArgument","store","middleware"],"mappings":"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","file":"static/js/app.04aae89b.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nconst initState = {\n  // activeOrgUnit: null,\n  activeOrgUnit: null,\n  activeICU: null,\n  metaData: null,\n  icuList: [],\n  ICUEventId: \"fKXrko0yhua\"\n};\nconst appSlice = createSlice({\n  name: \"app\",\n  initialState: initState,\n  reducers: {\n    setActiveOrgUnit(state, action) {\n      state.activeOrgUnit = action.payload;\n    },\n\n    setActiveICU(state, action) {\n      state.activeICU = action.payload;\n    },\n\n    setMetaData(state, action) {\n      state.metaData = action.payload;\n    },\n\n    setICUBeds(state, action) {\n      if (state.activeICU && state.activeICU.id === action.payload.icuId) {\n        state.activeICU.beds = action.payload.beds;\n      }\n    },\n\n    updateBedStatus(state, action) {\n      const bedIndex = state.activeICU.beds.findIndex(b => b.trackedEntityInstance === action.payload.bedId);\n      state.activeICU.beds[bedIndex].status = action.payload.status;\n    },\n\n    updateFilteredICUList(state, action) {\n      state.icuList = action.payload;\n    }\n\n  }\n});\nexport const {\n  setActiveOrgUnit,\n  setActiveICU,\n  setMetaData,\n  setICUBeds,\n  updateBedStatus,\n  updateFilteredICUList\n} = appSlice.actions;\nexport default appSlice.reducer;","import React, { useEffect, useState } from 'react';\nimport { Card } from '@dhis2/ui-core';\nimport { useDispatch } from 'react-redux';\nimport { DataQuery, useDataQuery } from '@dhis2/app-runtime';\nimport { Treebeard } from 'react-treebeard';\nimport { setActiveOrgUnit, updateFilteredICUList, setActiveICU } from '../state/appState';\nconst query = {\n  organisationUnits: {\n    resource: 'organisationUnits.json',\n    params: {\n      paging: 'false',\n      fields: \"id,name,level,children\"\n    }\n  }\n};\nexport default function OrgUnits() {\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query);\n  const [orgRoot, setOrgRoot] = useState(null);\n  const [cursor, setCursor] = useState(false);\n  const dispatch = useDispatch();\n  var traverseResults = [];\n\n  function processList(orgData, children) {\n    let _children = [];\n\n    for (var child of children) {\n      let childOrg = orgData.filter(o => o.id === child.id);\n\n      if (childOrg.length === 1) {\n        childOrg = childOrg[0];\n\n        if (childOrg.children.length === 0) {\n          childOrg.children = null;\n        } else {\n          childOrg.children = processList(orgData, childOrg.children);\n        }\n\n        _children.push({ ...childOrg,\n          active: false\n        });\n      }\n    }\n\n    let _prunedChildren = [];\n\n    for (var child of _children) {\n      traverseResults = [];\n      traverse(child, 6);\n\n      if (traverseResults.length > 0) {\n        _prunedChildren.push(child);\n      }\n    }\n\n    return _prunedChildren;\n  } // function pruneTree(root){\n  //     traverseResults = [];\n  //     traverse(root, 6);\n  //     if(traverseResults)\n  // }\n\n\n  useEffect(() => {\n    if (data) {\n      const orgData = data.organisationUnits.organisationUnits;\n      const root = data.organisationUnits.organisationUnits.filter(o => o.level === 1)[0];\n      root.children = processList(orgData, root.children);\n      console.log(root);\n      setOrgRoot(root);\n    }\n  }, [loading]);\n\n  const onToggle = (node, toggled) => {\n    if (cursor) {\n      cursor.active = false;\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n\n    setCursor(node);\n    setOrgRoot(Object.assign({}, orgRoot));\n    selectOU(node);\n  };\n\n  function traverse(root, level) {\n    if (root.level === level) {\n      traverseResults.push({ ...root\n      });\n      return;\n    }\n\n    if (root.children) {\n      for (var child of root.children) {\n        traverse(child, level);\n      }\n    }\n  }\n\n  const selectOU = node => {\n    traverseResults = []; // traverse the tree and find level 6 bois\n\n    traverse(node, 6);\n    let icus = [];\n\n    for (var icu of traverseResults) {\n      icus.push({\n        name: icu.name,\n        distance: 0,\n        total: 0,\n        available: 0\n      });\n    }\n\n    dispatch(updateFilteredICUList(icus));\n    dispatch(setActiveOrgUnit({\n      id: node.id,\n      name: node.name,\n      level: node.level\n    }));\n\n    if (node.level === 6) {\n      dispatch(setActiveICU({\n        id: node.id,\n        beds: []\n      }));\n    }\n  };\n\n  return <Card>\n            {orgRoot && <Treebeard data={orgRoot} onToggle={onToggle} />}\n        </Card>;\n}","import React, { useEffect, useState } from 'react';\nimport { Table, TableHead, TableBody, TableRow, TableCellHead, TableCell, Button, DropdownButton } from '@dhis2/ui-core';\n\nfunction sortData(field, data, state) {\n  const {\n    setLocationData,\n    sortedBy,\n    setSortedBy,\n    sortOrder,\n    setSortOrder\n  } = state;\n\n  const compare = (locOne, locTwo) => {\n    let propertyOne = locOne[field];\n    let propertyTwo = locTwo[field];\n    let comparison = 0;\n\n    if (propertyOne > propertyTwo) {\n      comparison = 1;\n    } else if (propertyOne < propertyTwo) {\n      comparison = -1;\n    }\n\n    if (sortedBy === field) {\n      comparison = comparison * -1 * sortOrder; //inverts the order\n    }\n\n    return comparison;\n  };\n\n  let result = data.slice();\n  result = result.sort(compare);\n  setLocationData(result);\n  setSortedBy(field);\n  setSortOrder(sortOrder * -1);\n}\n\nexport default function ICUTable({\n  data\n}) {\n  const [locationData, setLocationData] = useState([]);\n  const [sortedBy, setSortedBy] = useState('distance');\n  const [sortOrder, setSortOrder] = useState(1);\n  const stateData = {\n    setLocationData,\n    sortedBy,\n    setSortedBy,\n    sortOrder,\n    setSortOrder\n  };\n  useEffect(() => {\n    sortData(sortedBy, data, stateData);\n  }, [data]);\n\n  if (!data) {\n    return <div></div>;\n  }\n\n  return <Table>\n            <TableHead>\n                <TableRow>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'name'} onClick={() => {\n            sortData('name', locationData, stateData);\n          }}> \n                            ICU\n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'distance'} onClick={() => {\n            sortData('distance', locationData, stateData);\n          }}> \n                            Distance \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'total'} onClick={() => {\n            sortData('total', locationData, stateData);\n          }}> \n                            TotalBeds \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'available'} onClick={() => {\n            sortData('available', locationData, stateData);\n          }}> \n                            AvailableBeds \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  Contact </TableCellHead>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {locationData.map((loc, key) => <TableRow key={key}>\n                    <TableCell>{loc.name}</TableCell>\n                    <TableCell>{loc.distance}</TableCell>\n                    <TableCell>{loc.total}</TableCell>\n                    <TableCell>{loc.available}</TableCell>\n                    <TableCell>\n                        <p>Dr. John Doe</p>\n                        <p>+94771234568</p>\n                        <p>+94717894562</p>\n                    </TableCell>\n                </TableRow>)}\n            </TableBody>\n        </Table>;\n}","import { configureStore, combineReducers, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport appReducer from './appState';\nexport const rootReducer = combineReducers({\n  app: appReducer\n});\nexport const store = configureStore({\n  reducer: rootReducer\n});","import React, { useEffect, useState, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Popper, ScreenCover } from '@dhis2/ui-core';\nexport default function ICUBed({\n  name,\n  status,\n  onView,\n  onOccupy,\n  onDischarge,\n  onReserve\n}) {\n  const ref = useRef(null);\n  const [open, setOpen] = useState(false);\n\n  const getClassName = () => {\n    if (status === \"AVAILABLE\") {\n      return \"available\";\n    }\n\n    if (status === \"OCCUPIED\") {\n      return \"occupied\";\n    }\n\n    if (status === \"RESERVED\") {\n      return \"reserved\";\n    }\n\n    return \"\";\n  };\n\n  const onToggle = () => {\n    setOpen(!open);\n  };\n\n  return <div className={`icu-bed ${getClassName()}`} ref={ref} onClick={onToggle}>\n            <span>{name}</span>\n            {open && createPortal(<ScreenCover onClick={onToggle} transparent>\n                        <Popper placement=\"right\" reference={ref}>\n                            <div className=\"bed-options\">\n                                {(status === \"AVAILABLE\" || status === \"RESERVED\") && <div onClick={() => {\n            setOpen(false);\n            onOccupy();\n          }}>Occupy</div>}\n                                {status === \"AVAILABLE\" && <div onClick={() => {\n            setOpen(false);\n            onReserve();\n          }}>Reserve</div>}\n                                {status !== \"AVAILABLE\" && <div onClick={() => {\n            setOpen(false);\n            onDischarge();\n          }}>Discharge</div>}\n                                <div onClick={onView}>View</div>\n                            </div>\n                        </Popper>\n                    </ScreenCover>, document.body)}\n        </div>;\n}","import { setICUBeds, setMetaData, updateBedStatus } from './appState';\nimport * as moment from 'moment';\nconst ICU_EVENT = \"ICU - Bed Event\";\nexport function test() {\n  return async (dispatch, getState, dhisEngine) => {\n    console.log(dhisEngine);\n  };\n}\n\nfunction bedEventHelper(metaData, eventType) {\n  let dataValue = {};\n\n  if (eventType === \"Discharged\") {\n    dataValue = {\n      dataElement: metaData[ICU_EVENT].id,\n      value: \"Discharged\"\n    };\n  } else if (eventType === \"Admitted\") {\n    dataValue = {\n      dataElement: metaData[ICU_EVENT].id,\n      value: \"Admitted\"\n    };\n  } else if (eventType === \"Reserved\") {\n    dataValue = {\n      dataElement: metaData[ICU_EVENT].id,\n      value: \"Reserved\"\n    };\n  }\n\n  return dataValue;\n}\n\nexport function getMetaData() {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        program: {\n          resource: 'programs/C1wTfmmMQUn',\n          params: {\n            fields: \"id,name,trackedEntityType[id, displayName, trackedEntityTypeAttributes[trackedEntityAttribute[id, displayName, valueType, optionSet[options[displayName, id, code]]]]]\"\n          }\n        },\n        dataElements: {\n          resource: 'dataElements',\n          params: {\n            paging: \"false\",\n            program: \"C1wTfmmMQUn\",\n            fields: \"id,displayName,optionSet[options[id, displayName,code]]\"\n          }\n        }\n      };\n      const {\n        program,\n        dataElements\n      } = await dhisEngine.query(query);\n      let metaData = {\n        id: program.id,\n        name: program.name,\n        trackedEntityType: {\n          id: program.trackedEntityType.id,\n          displayName: program.trackedEntityType.displayName,\n          trackedEntityTypeAttributes: []\n        }\n      };\n\n      for (var attrib of program.trackedEntityType.trackedEntityTypeAttributes) {\n        metaData.trackedEntityType.trackedEntityTypeAttributes.push(attrib.trackedEntityAttribute);\n      }\n\n      let _dataElements = {};\n\n      for (var de of dataElements.dataElements) {\n        if (de.displayName.startsWith(\"ICU\")) {\n          let elem = {\n            id: de.id,\n            displayName: de.displayName\n          };\n\n          if (de.optionSet) {\n            elem[\"options\"] = de.optionSet.options;\n          }\n\n          _dataElements[de.displayName] = elem;\n        }\n      }\n\n      metaData[\"dataElements\"] = _dataElements;\n      dispatch(setMetaData(metaData));\n    } catch (error) {\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getICUBeds(icuId, program) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        results: {\n          resource: 'trackedEntityInstances',\n          params: {\n            ou: icuId,\n            fields: \"trackedEntityInstance,attributes[attribute,displayName,value],enrollments\",\n            program: program\n          }\n        }\n      };\n      const response = await dhisEngine.query(query);\n      const beds = response.results.trackedEntityInstances; // now get status of each\n\n      for (var bed of beds) {\n        dispatch(getBedStatus(bed.trackedEntityInstance));\n      }\n\n      dispatch(setICUBeds({\n        icuId,\n        beds\n      }));\n    } catch (error) {\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getBedStatus(instanceId) {\n  return async (dispatch, getState, dhisEngine) => {\n    const query = {\n      events: {\n        resource: 'events',\n        params: {\n          trackedEntityInstance: instanceId,\n          paging: \"false\"\n        }\n      }\n    };\n    const response = await dhisEngine.query(query);\n    const events = response.events.events;\n    let status = \"\";\n\n    if (events.length > 0) {\n      const lastEvent = events[0];\n      const bedEventIndex = lastEvent.dataValues.findIndex(dv => dv.dataElement === getState().app.metaData.dataElements[ICU_EVENT].id);\n\n      if (bedEventIndex > -1) {\n        switch (lastEvent.dataValues[bedEventIndex].value) {\n          case \"Discharged\":\n            status = \"AVAILABLE\";\n            break;\n\n          case \"Admitted\":\n            status = \"OCCUPIED\";\n            break;\n\n          case \"Reserved\":\n            status = \"RESERVED\";\n            break;\n        }\n      }\n\n      dispatch(updateBedStatus({\n        bedId: instanceId,\n        status: status\n      }));\n    }\n  };\n}\nexport function createBed(teID, icuId, programId, attributes) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {\n        \"trackedEntityType\": teID,\n        \"orgUnit\": icuId,\n        \"attributes\": attributes,\n        \"enrollments\": [{\n          \"orgUnit\": icuId,\n          \"program\": programId,\n          \"enrollmentDate\": moment().format(\"YYYY-MM-DD\"),\n          \"incidentDate\": moment().format(\"YYYY-MM-DD\")\n        }]\n      };\n      const mutation = {\n        resource: 'trackedEntityInstances',\n        type: 'create',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      const instanceId = response.response.importSummaries[0].reference; // add new event to make the bed available\n\n      dispatch(addBedEvent(instanceId, programId, getState().app.ICUEventId, icuId, \"Discharged\"));\n      dispatch(getICUBeds(icuId, programId));\n    } catch (error) {\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function updateBed(icuId, bedId, attributes) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {\n        \"orgUnit\": icuId,\n        \"attributes\": attributes\n      };\n      const mutation = {\n        resource: 'trackedEntityInstances/' + bedId,\n        type: 'update',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getICUBeds(icuId, getState().app.metaData.id));\n    } catch (error) {\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function removeBed(icuId, enrollmentId) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {};\n      const mutation = {\n        resource: 'enrollments/' + enrollmentId,\n        type: 'delete'\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getICUBeds(icuId, getState().app.metaData.id));\n    } catch (error) {\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function addBedEvent(teId, programId, programStageId, icuId, eventType, additionalData = []) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const dataValues = [bedEventHelper(getState().app.metaData.dataElements, eventType), ...additionalData];\n      const payload = {\n        \"trackedEntityInstance\": teId,\n        \"program\": programId,\n        \"programStage\": programStageId,\n        \"enrollment\": icuId,\n        \"orgUnit\": icuId,\n        \"dataValues\": dataValues,\n        \"status\": \"COMPLETED\"\n      };\n      const mutation = {\n        resource: 'events',\n        type: 'create',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getBedStatus(teId));\n    } catch (error) {\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}","import React, { useState, useEffect } from 'react';\nimport { Modal, ModalTitle, ModalActions, ModalContent, ButtonStrip, Button, InputField, SingleSelect, RadioGroup, Radio, RadioGroupField, SingleSelectOption, SingleSelectField } from '@dhis2/ui-core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as moment from 'moment';\nimport { useDataMutation, useDataEngine } from '@dhis2/app-runtime';\nimport { test, createBed, updateBed } from '../state/apiActions';\nconst booleanSelections = [{\n  label: \"No\",\n  value: 'false'\n}, {\n  label: \"Yes\",\n  value: 'true'\n}];\n\nfunction findAttribute(attributes, id) {\n  const search = attributes.filter(a => a.attribute === id);\n  return search.length > 0 ? search[0].value : null;\n}\n\nfunction findOption(optionSet, code) {\n  const search = optionSet.filter(o => o.code === code);\n  return search[0];\n}\n\nexport default function ConfigureBedModal({\n  open,\n  onClose,\n  selectedBed,\n  editable\n}) {\n  const metaData = useSelector(state => state.app.metaData);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const [bedAttributes, setBedAttributtes] = useState([]);\n  const [formState, setFormState] = useState({});\n  const engine = useDataEngine();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (metaData) {\n      let _bedAttributes = metaData.trackedEntityType.trackedEntityTypeAttributes;\n      let _formState = {};\n\n      for (var attrib of _bedAttributes) {\n        // check if this is a update thing\n        let bedValue = null;\n\n        if (selectedBed) {\n          bedValue = findAttribute(selectedBed.attributes, attrib.id);\n        }\n\n        if (attrib.valueType === \"TEXT\") {\n          if (attrib.optionSet && attrib.optionSet.options && attrib.optionSet.options.length > 0) {\n            if (bedValue) {\n              const option = findOption(attrib.optionSet.options, bedValue);\n              _formState[attrib.id] = {\n                \"label\": option.displayName,\n                \"value\": option.code\n              };\n            } else {\n              _formState[attrib.id] = {\n                \"label\": attrib.optionSet.options[0].displayName,\n                \"value\": attrib.optionSet.options[0].code\n              };\n            }\n          } else {\n            _formState[attrib.id] = bedValue ? bedValue : \"\";\n          }\n        } else if (attrib.valueType === \"BOOLEAN\") {\n          _formState[attrib.id] = {\n            \"label\": bedValue && bedValue === \"true\" ? \"Yes\" : \"No\",\n            \"value\": bedValue ? bedValue : \"false\"\n          };\n        }\n      }\n\n      setFormState(_formState);\n      setBedAttributtes(_bedAttributes);\n    }\n  }, [metaData]);\n\n  if (!open) {\n    return <></>;\n  }\n\n  const updateField = (field, value) => {\n    setFormState({ ...formState,\n      [field]: value\n    });\n  };\n\n  const getAttributeInput = (attrib, key) => {\n    if (attrib.optionSet && attrib.optionSet.options && attrib.optionSet.options.length > 0) {\n      return <SingleSelectField key={key} label={attrib.displayName} name={attrib.id} onChange={val => updateField(attrib.id, val.selected)} selected={formState[attrib.id]} disabled={!editable}>\n                        {attrib.optionSet.options.map((sel, key) => <SingleSelectOption key={key} label={sel.displayName} value={sel.code} />)}\n                </SingleSelectField>;\n    }\n\n    if (attrib.valueType === \"TEXT\") {\n      return <InputField key={key} label={attrib.displayName} name={attrib.id} type=\"text\" onChange={val => updateField(attrib.id, val.value)} value={formState[attrib.id]} disabled={!editable} />;\n    }\n\n    if (attrib.valueType === \"BOOLEAN\") {\n      return <SingleSelectField key={key} label={attrib.displayName} name={attrib.id} onChange={val => updateField(attrib.id, val.selected)} selected={formState[attrib.id]} disabled={!editable}>\n                        {booleanSelections.map((sel, key) => <SingleSelectOption key={key} label={sel.label} value={sel.value} />)}\n                </SingleSelectField>;\n      return <></>;\n    }\n  };\n\n  const addBed = async () => {\n    const attributes = [];\n\n    for (var attrib in formState) {\n      attributes.push({\n        \"attribute\": attrib,\n        \"value\": formState[attrib].value ? formState[attrib].value : formState[attrib]\n      });\n    }\n\n    if (selectedBed) {\n      // update existing bed\n      dispatch(updateBed(activeICU.id, selectedBed.trackedEntityInstance, attributes));\n    } else {\n      //create new bed\n      dispatch(createBed(metaData.trackedEntityType.id, activeICU.id, metaData.id, attributes));\n    }\n\n    onClose();\n  };\n\n  return <Modal open>\n            <ModalTitle>\n                {!editable ? \"View\" : selectedBed ? \"Update\" : \"Add\"} ICU Bed\n            </ModalTitle>\n            <ModalContent>\n                <div className=\"form\">\n                    {bedAttributes.map((attrib, key) => getAttributeInput(attrib, key))}\n                </div>\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button onClick={onClose} secondary type=\"button\">\n                        Close\n                    </Button>\n                    {editable && <Button onClick={addBed} primary type=\"button\">\n                            {selectedBed ? \"Update Bed\" : \"Add New Bed\"}\n                        </Button>}\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n}","import React from 'react';\nexport default function useConfirmation() {\n  const show = (query, onOk, onCancel) => {\n    const isOk = confirm(query);\n\n    if (isOk) {\n      onOk();\n    } else {\n      onCancel();\n    }\n  };\n\n  return {\n    show\n  };\n}","import React, { useState, useEffect } from 'react';\nimport { Modal, ModalTitle, ModalActions, ModalContent, ButtonStrip, Button, InputField, SingleSelect, RadioGroup, Radio, RadioGroupField, SingleSelectOption, SingleSelectField } from '@dhis2/ui-core';\nimport { addBedEvent } from '../state/apiActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useConfirmation from './useConfirmationHook';\nconst patientFieldset = [{\n  type: \"TEXT\",\n  label: \"ICU - BHT Number\",\n  id: \"j1hbO7zzRgV\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Patient Name\",\n  id: \"sK09QRLNyAA\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Consultant In-charge\",\n  id: \"malZQqUEzi9\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Patient Diagnosis\",\n  id: \"qh9bc6jlauE\"\n}];\nexport default function RegisterPatientModal({\n  open,\n  onClose,\n  selectedBed\n}) {\n  const [formState, setFormState] = useState({});\n  const dispatch = useDispatch();\n  const metaData = useSelector(state => state.app.metaData);\n  const programStage = useSelector(state => state.app.ICUEventId);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const confirmation = useConfirmation();\n  useEffect(() => {\n    let _formState = {};\n\n    for (var field of patientFieldset) {\n      if (field.type === \"TEXT\") {\n        _formState[field.id] = \"\";\n      }\n    }\n\n    setFormState(_formState);\n  }, []);\n\n  const updateField = (field, value) => {\n    setFormState({ ...formState,\n      [field]: value\n    });\n  };\n\n  const getFormField = (field, key) => {\n    if (field.type === \"TEXT\") {\n      return <InputField key={key} label={field.label} name={field.id} onChange={val => updateField(field.id, val.value)} value={formState[field.id]} />;\n    }\n  };\n\n  const admitPatient = () => {\n    let dataValues = [];\n\n    for (var field in formState) {\n      dataValues.push({\n        dataElement: field,\n        value: formState[field]\n      });\n    }\n\n    dispatch(addBedEvent(selectedBed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Admitted\", dataValues));\n    onClose();\n  };\n\n  return <Modal open>\n            <ModalTitle>\n                Admit New Patient\n            </ModalTitle>\n            <ModalContent>\n                {patientFieldset.map((field, key) => getFormField(field, key))}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button onClick={onClose} secondary type=\"button\">\n                        Close\n                    </Button>\n                    <Button onClick={admitPatient} primary type=\"button\">\n                        Admit Patient\n                    </Button>\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n}","import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoBox } from '@react-google-maps/api';\nconst mapContainerStyle = {\n  height: \"600px\",\n  width: \"100%\"\n};\nconst center = {\n  lat: 8.11,\n  lng: 80.77\n};\nconst infoWindowInitData = {\n  visible: false,\n  ...center\n};\nexport default function ICUMap(props) {\n  const {\n    onMarkerClick,\n    data\n  } = props;\n  const [infoWindowData, setInfoWindowData] = useState(infoWindowInitData);\n\n  const handleMarkerOnHover = ICUEntry => {\n    setInfoWindowData({\n      visible: true,\n      ...ICUEntry\n    });\n  };\n\n  const infoBoxOptions = {\n    closeBoxURL: ''\n  };\n  const markerAvailableOptions = {\n    icon: {\n      path: 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z',\n      fillColor: '#00802b',\n      fillOpacity: 1,\n      strokeColor: '',\n      strokeWeight: 0\n    }\n  };\n  const markerUnavailableOptions = {\n    icon: {\n      path: 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z',\n      fillColor: '#DC143C',\n      fillOpacity: 1,\n      strokeColor: '',\n      strokeWeight: 0\n    }\n  };\n  return <LoadScript id=\"script-loader\" googleMapsApiKey=\"AIzaSyBjlDmwuON9lJbPMDlh_LI3zGpGtpK9erc\">\n            <GoogleMap id='example-map' mapContainerStyle={mapContainerStyle} zoom={7.6} center={center}>\n                {data.map((ICUEntry, index) => {\n        return <Marker position={{\n          lat: ICUEntry.lat,\n          lng: ICUEntry.lng\n        }} onClick={() => {\n          onMarkerClick(ICUEntry);\n        }} onMouseOver={() => {\n          handleMarkerOnHover(ICUEntry);\n        }} onMouseOut={() => {\n          handleMarkerOnHover(infoWindowInitData);\n        }} options={ICUEntry.available > 0 ? markerAvailableOptions : markerUnavailableOptions} />;\n      })}\n                {infoWindowData.visible && <InfoBox position={infoWindowData} options={infoBoxOptions}>\n                        <div style={{\n          backgroundColor: 'white',\n          opacity: 0.95,\n          padding: 5\n        }}>\n                            <div style={{\n            fontSize: 14,\n            fontColor: `#08233B`\n          }}>\n                                <div>ICU: {infoWindowData.name}</div>\n                                <div>Distance: {infoWindowData.distance}</div>\n                                <div>Beds: {infoWindowData.available}</div>\n                            </div>\n                        </div>\n                    </InfoBox>}\n            </GoogleMap>\n        </LoadScript>;\n}","import React, { useState, useEffect } from 'react';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { DataQuery, useDataQuery, useDataEngine } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport OrgUnits from './components/OrgUnits';\nimport './App.css';\nimport { Card, MultiSelect, MultiSelectOption, MultiSelectField, Button, ButtonStrip, Table, TableHead, TableBody, TableRow, TableCellHead, TableCell } from '@dhis2/ui-core';\nimport ICUTable from './components/ICUTable';\nimport * as api from \"./mockapi\";\nimport { rootReducer } from './state/store';\nimport ICUBed from './components/ICUBed';\nimport ConfigureBedModal from './components/ConfigureBedModal';\nimport { setActiveICU, setMetaData } from './state/appState';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { getICUBeds, getMetaData, addBedEvent, removeBed } from './state/apiActions';\nimport RegisterPatientModal from './components/RegisterPatientModal';\nimport useConfirmation from './components/useConfirmationHook';\nimport ICUMap from './components/ICUMap';\n\nfunction getAttributeByName(bed, name) {\n  for (var attrib of bed.attributes) {\n    if (attrib.displayName === name) {\n      return attrib.value;\n    }\n  }\n\n  return \"\";\n}\n\nfunction ViewOrgICU() {\n  const activeOrgUnit = useSelector(state => state.app.activeOrgUnit);\n  const bedData = useSelector(state => state.app.icuList); // const [bedData, setBedData] = useState([]);\n\n  useEffect(() => {// setBedData(api.getICUByOrgUnit(\"lka\"))\n  }, []);\n\n  const onBedTypeChange = () => {};\n\n  if (!activeOrgUnit) {\n    return <p>Please select an organization unit</p>;\n  }\n\n  if (activeOrgUnit.level === 6) {\n    return <ViewICUBeds />;\n  }\n\n  return activeOrgUnit.level < 6 && <>\n                <span className=\"t20\">Showing ICU Locations for <b>{activeOrgUnit.name}</b></span>\n                <div className=\"filter-area\">\n                    \n                        <MultiSelect placeholder=\"ICU Type\" onChange={onBedTypeChange}>\n                            <MultiSelectOption value=\"type01\" label=\"Medical\" />\n                            <MultiSelectOption value=\"type01\" label=\"Surgical\" />\n                            <MultiSelectOption value=\"type01\" label=\"Neurosurgical\" />\n                            <MultiSelectOption value=\"type01\" label=\"Pediatric\" />\n                            <MultiSelectOption value=\"type01\" label=\"Neonatal\" />\n                            <MultiSelectOption value=\"type01\" label=\"Other\" />\n                        </MultiSelect>\n                        <MultiSelect placeholder=\"Bed Type\" onChange={onBedTypeChange}>\n                            <MultiSelectOption value=\"type01\" label=\"Type 01\" onClick={onBedTypeChange} />\n                        </MultiSelect>\n                        <MultiSelect placeholder=\"Diagnosis Type\" onChange={onBedTypeChange}>\n                            <MultiSelectOption value=\"type01\" label=\"Type 01\" onClick={onBedTypeChange} />\n                        </MultiSelect>\n                    \n                </div>\n                <div className=\"icu-org\">\n                    <div className=\"icu-table\">\n                        <ICUTable data={bedData} />\n                    </div>\n                    <div className=\"icu-map\">\n                        <ICUMap onMarkerClick={ICUEntry => {\n          console.log(ICUEntry);\n        }} data={bedData} />\n                    </div>\n                </div>\n            </>;\n}\n\nfunction ViewICUBeds() {\n  const activeOrgUnit = useSelector(state => state.app.activeOrgUnit);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const metaData = useSelector(state => state.app.metaData);\n  const programStage = useSelector(state => state.app.ICUEventId);\n  const [showConfigure, setShowConfigure] = useState(false);\n  const [bedModalOpen, setBedModalOpen] = useState(false);\n  const [patientModalOpen, setPatientModalOpen] = useState(false);\n  const [selectedBed, setSelectedBed] = useState(null);\n  const dispatch = useDispatch();\n  const confirmation = useConfirmation();\n  useEffect(() => {\n    if (metaData) {\n      dispatch(getICUBeds(activeICU.id, metaData.id));\n    }\n  }, [metaData, activeICU.id]); // useEffect(() => {\n  //     if(metaData){\n  //         dispatch(getICUBeds(activeICU.id, metaData.id));\n  //     }        \n  // }, [activeICU.id]);\n\n  const onViewBed = bed => {\n    setSelectedBed(bed);\n    setBedModalOpen(true);\n  };\n\n  const onOccupyBed = bed => {\n    setSelectedBed(bed);\n    setPatientModalOpen(true); // dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Admitted\"));\n  };\n\n  const onReserveBed = bed => {\n    confirmation.show(\"Do you want to confirm reserving this bed?\", () => dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Reserved\")), () => {});\n  };\n\n  const onDischargeBed = bed => {\n    confirmation.show(\"Do you want to confirm discharging this bed?\", () => dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Discharged\")), () => {});\n  };\n\n  if (!activeOrgUnit) {\n    return <p>Please select an organization unit</p>;\n  }\n\n  return <>\n            <div className=\"inner-header\">\n                <span className=\"t20\">Showing ICU Bed status at <b>{activeOrgUnit.name}</b></span>\n                <Button onClick={() => setShowConfigure(true)} className=\"pull-right\">Configure Beds</Button>\n            </div>\n            {activeICU && <>\n                    {showConfigure && <ViewConfigureBeds onBack={() => setShowConfigure(false)} />}\n                    {!showConfigure && <div className=\"icu-bed-container\">\n                            {!activeICU.beds.length && <p>No beds currently added</p>}\n                            {activeICU.beds.map((bed, key) => <ICUBed key={key} name={getAttributeByName(bed, \"ICU - Bed Number\")} status={bed.status ? bed.status : \"IDLE\"} onView={() => onViewBed(bed)} onOccupy={() => onOccupyBed(bed)} onDischarge={() => onDischargeBed(bed)} onReserve={() => onReserveBed(bed)} />)}\n                        </div>}\n                </>}\n            {bedModalOpen && <ConfigureBedModal open={bedModalOpen} onClose={() => setBedModalOpen(false)} selectedBed={selectedBed} editable={false} />}\n            {patientModalOpen && <RegisterPatientModal open={patientModalOpen} onClose={() => setPatientModalOpen(false)} selectedBed={selectedBed} />}\n        </>;\n}\n\nfunction ViewConfigureBeds({\n  onBack\n}) {\n  const [bedModalOpen, setBedModalOpen] = useState(false);\n  const dispatch = useDispatch();\n  const activeICU = useSelector(state => state.app.activeICU);\n  const metaData = useSelector(state => state.app.metaData);\n  const [selectedBed, setSelectedBed] = useState(null);\n  const confirmation = useConfirmation(); // useEffect(() => {\n  //     dispatch(getICUBeds(activeICU.id, metaData.id));\n  // }, []);\n\n  const onAddBed = () => {\n    setSelectedBed(null);\n    setBedModalOpen(true);\n  };\n\n  const onSelectBed = bed => {\n    setSelectedBed(bed);\n    setBedModalOpen(true);\n  };\n\n  const onRemoveBed = bed => {\n    confirmation.show(\"Do you really want to remove this bed?\", () => {\n      dispatch(removeBed(activeICU.id, bed.enrollments[0].enrollment));\n    }, () => {});\n  };\n\n  return <>\n            <div className=\"inner-header\">\n                <ButtonStrip end>\n                    <Button onClick={onBack}>Back</Button>\n                    <Button primary onClick={onAddBed}>Add New Bed</Button>\n                </ButtonStrip>\n            </div>\n            <div className=\"inner-container\">\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCellHead>Bed No</TableCellHead>  \n                            <TableCellHead>Bed Type</TableCellHead>\n                            <TableCellHead>Covid Type</TableCellHead> \n                            <TableCellHead>Action</TableCellHead> \n                        </TableRow>\n                    </TableHead>\n                    {activeICU && <TableBody>\n                            {activeICU.beds.map((bed, key) => <TableRow key={key}>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - Bed Number\")}</TableCell>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - Type\")}</TableCell>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - COVID Type\")}</TableCell>\n                                    <TableCell>\n                                        <ButtonStrip>\n                                            <Button onClick={() => onSelectBed(bed)}>View Details</Button>\n                                            <Button destructive onClick={() => onRemoveBed(bed)}>Remove</Button>\n                                        </ButtonStrip>\n                                    </TableCell>\n                                </TableRow>)}\n                        </TableBody>}\n                </Table>\n            </div>\n            {bedModalOpen && <ConfigureBedModal open={bedModalOpen} onClose={() => setBedModalOpen(false)} selectedBed={selectedBed} editable={true} />}\n        </>;\n}\n\nfunction ContainerView({\n  children\n}) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getMetaData());\n  }, []);\n  return <div style={{\n    height: \"100vh\"\n  }}>\n            {children}\n        </div>;\n}\n\nfunction MyApp() {\n  const dhisEngine = useDataEngine();\n  const customizedMiddleware = getDefaultMiddleware({\n    thunk: {\n      extraArgument: dhisEngine\n    }\n  });\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware\n  });\n  return <Provider store={store}>\n            <ContainerView>\n                <div className=\"container\">\n                    <div className=\"left-column\">\n                        <OrgUnits />\n                    </div>\n                    <div className=\"right-column\">\n                        <ViewOrgICU />\n                        {\n            /* <ViewICUBeds /> */\n          }\n                        {\n            /* <ViewConfigureBeds /> */\n          }\n                    </div>\n                </div>\n            </ContainerView>\n        </Provider>;\n}\n\nexport default MyApp;"],"sourceRoot":""}