{"version":3,"sources":["D2App/state/appState.js","D2App/constants.js","D2App/components/OrgUnits.js","D2App/state/notificationState.js","D2App/state/apiActions.js","D2App/components/ICUTable.js","D2App/state/store.js","D2App/components/permissionUtils.js","D2App/components/ICUBed.js","D2App/components/ConfigureBedModal.js","D2App/components/useConfirmationHook.js","D2App/components/RegisterPatientModal.js","D2App/components/ICUMap.js","D2App/components/Notification.js","D2App/App.js"],"names":["appSlice","createSlice","name","initialState","activeUser","activeOrgUnit","activeICU","metaData","icuList","ICUEventId","reducers","setActiveOrgUnit","state","action","payload","setActiveICU","setActiveUser","setMetaData","setICUBeds","id","icuId","beds","updateBedStatus","bedIndex","findIndex","b","trackedEntityInstance","bedId","status","lastEvent","updateFilteredICUList","updateICUStat","icu","find","i","Object","assign","available","stat","total","icuName","updateICUDistance","icuIndex","distance","updateActiveICUData","contactPerson","contactNumber","actions","EXPERTISE_ATTRIBUTES","FACILITIES_ATTRIBUTES","PATIENT_ATTRIBUTES","query","organisationUnits","resource","params","paging","fields","traversalCache","parentMatrix","OrgUnits","loading","error","data","refetch","useDataQuery","orgRoot","setOrgRoot","useState","cursor","setCursor","dispatch","useDispatch","traverseResults","useEffect","orgData","root","filter","o","level","children","processList","parent","_children","child","childOrg","length","push","active","_prunedChildren","traverse","list","organisationUnitGroups","g","concat","selectOU","node","icus","geometry","type","lat","coordinates","lng","onToggle","toggled","notificationSlice","isOpen","message","showNotification","hideNotification","bedEventHelper","eventType","dataValue","dataElement","value","getEventStatus","event","dataValues","getICUBeds","program","async","getState","dhisEngine","results","ou","trackedEntityInstances","bed","getBedStatus","console","log","instanceId","events","bedEventIndex","dv","addBedEvent","teId","programId","programStageId","additionalData","eventResponse","updateMutation","moment","format","mutate","app","dataElements","mutation","getICUStat","filters","filtersQuery","values","map","f","join","substr","orgUnit","filteredTEI","organisationUnit","response","te","displayName","phoneNumber","sortData","field","setLocationData","sortedBy","setSortedBy","sortOrder","setSortOrder","result","slice","sort","locOne","locTwo","propertyOne","propertyTwo","comparison","ICUTable","onSelectICU","locationData","stateData","primary","onClick","loc","key","href","rootReducer","combineReducers","appReducer","notification","notificationReducer","configureStore","reducer","ACTIONS","isRelated","userHasOrgAccess","orgUnits","userHasGroupAccess","groups","accessGroups","accessType","userGroup","canRead","canWrite","hasPerm","programAccess","teAccess","group","indexOf","ICUBed","onView","onOccupy","onDischarge","onReserve","hasEventPerm","onViewPatient","hasEditPerm","ref","useRef","open","setOpen","className","icon","faProcedures","size","createPortal","transparent","placement","reference","document","body","booleanSelections","label","experiseAttrbutes","facilitiesAttributes","infoAttributes","findAttribute","attributes","search","a","attribute","findOption","optionSet","code","ConfigureBedModal","onClose","selectedBed","editable","useSelector","bedAttributes","setBedAttributtes","formState","setFormState","useDataEngine","_bedAttributes","trackedEntityType","trackedEntityTypeAttributes","_formState","attrib","bedValue","valueType","options","option","updateField","getAttributeInput","attribId","formName","onChange","val","selected","disabled","sel","end","secondary","updateBed","teID","importSummaries","createBed","useConfirmation","show","onOk","onCancel","confirm","RegisterPatientModal","actionType","programStage","fieldId","de","getFormField","mapContainerStyle","height","width","center","infoWindowInitData","visible","ICUMap","props","onMarkerClick","origin","updateDistance","infoWindowData","setInfoWindowData","markerData","setMarkerData","distanceRequest","setDistanceRequest","_markerData","_keys","d","p","destinations","origins","travelMode","handleMarkerOnHover","ICUEntry","markerAvailableOptions","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","googleMapsApiKey","zoom","index","position","onMouseOver","onMouseOut","closeBoxURL","style","backgroundColor","opacity","padding","fontSize","fontColor","callback","s","Notification","duration","critical","warning","success","getAttributeByName","ViewOrgICU","bedData","bedTypeData","covidTypeData","setFilters","ViewICUBeds","placeholder","rows","elements","ind","text","showConfigure","setShowConfigure","bedModalOpen","setBedModalOpen","patientModalOpen","setPatientModalOpen","patientModalAction","setPatientModalAction","setSelectedBed","eventPerm","setEventPerm","patientEditable","setPatientEditable","confirmation","access","getAttributeText","ViewConfigureBeds","onBack","onViewBed","onOccupyBed","onDischargeBed","onReserveBed","onRemoveBed","enrollmentId","enrollments","enrollment","onSelectBed","destructive","ContainerView","ga","userGroupAccesses","userGroupUid","startsWith","trackedEntityAttribute","_dataElements","elem","displayFormName","user","userGroups","ug","MyApp","customizedMiddleware","getDefaultMiddleware","thunk","extraArgument","store","middleware","bottom","left","paddingLeft"],"mappings":"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","file":"static/js/app.70c8082d.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nconst initState = {\n  activeUser: null,\n  activeOrgUnit: null,\n  activeICU: null,\n  metaData: null,\n  icuList: [],\n  ICUEventId: \"fKXrko0yhua\"\n};\nconst appSlice = createSlice({\n  name: \"app\",\n  initialState: initState,\n  reducers: {\n    setActiveOrgUnit(state, action) {\n      state.activeOrgUnit = action.payload;\n    },\n\n    setActiveICU(state, action) {\n      state.activeICU = action.payload;\n    },\n\n    setActiveUser(state, action) {\n      state.activeUser = action.payload;\n    },\n\n    setMetaData(state, action) {\n      state.metaData = action.payload;\n    },\n\n    setICUBeds(state, action) {\n      if (state.activeICU && state.activeICU.id === action.payload.icuId) {\n        state.activeICU.beds = action.payload.beds;\n      }\n    },\n\n    updateBedStatus(state, action) {\n      const bedIndex = state.activeICU.beds.findIndex(b => b.trackedEntityInstance === action.payload.bedId);\n\n      if (bedIndex > -1) {\n        state.activeICU.beds[bedIndex].status = action.payload.status;\n        state.activeICU.beds[bedIndex].lastEvent = action.payload.lastEvent;\n      }\n    },\n\n    updateFilteredICUList(state, action) {\n      state.icuList = action.payload;\n    },\n\n    updateICUStat(state, action) {\n      const icu = state.icuList.find(i => i.id === action.payload.icuId);\n\n      if (icu) {\n        Object.assign(icu, {\n          available: action.payload.stat.available,\n          total: action.payload.stat.total,\n          name: action.payload.icuName\n        });\n      }\n    },\n\n    updateICUDistance(state, action) {\n      const icuIndex = state.icuList.findIndex(i => i.id === action.payload.icuId);\n\n      if (icuIndex > -1) {\n        state.icuList[icuIndex].distance = action.payload.distance;\n      }\n    },\n\n    updateActiveICUData(state, action) {\n      if (state.activeICU && state.activeICU.id === action.payload.icuId) {\n        Object.assign(state.activeICU, {\n          contactPerson: action.payload.contactPerson,\n          contactNumber: action.payload.contactNumber\n        });\n      }\n    }\n\n  }\n});\nexport const {\n  setActiveOrgUnit,\n  setActiveICU,\n  setMetaData,\n  setICUBeds,\n  updateBedStatus,\n  updateFilteredICUList,\n  updateICUStat,\n  setActiveUser,\n  updateICUDistance,\n  updateActiveICUData\n} = appSlice.actions;\nexport default appSlice.reducer;","export const EXPERTISE_ATTRIBUTES = [\"v5eNzdQsLox\", \"eBlbs7BzVfX\", \"JJ2DQSnlhfR\", \"m64bCKnUD8L\", \"Xar8cTc8XN0\", \"k7eXIuzzhat\", \"JZXI1GzSoYx\"];\nexport const FACILITIES_ATTRIBUTES = [\"Jio5MTDVFo4\", \"yvOZEiBS5cd\", \"CGp0lKLkSKY\", \"YCILPvLTofG\"];\nexport const PATIENT_ATTRIBUTES = [\"j1hbO7zzRgV\", \"sK09QRLNyAA\", \"malZQqUEzi9\", \"qh9bc6jlauE\"];\nexport const ICU_EVENT_ID = \"MtYPOv0wqCg\";\nexport const ICU_ORG_UNIT_GROUP = \"PTahQgpjqyQ\";\nexport const SUPER_ADMIN_GROUP = \"LkEkMDG0zfj\";","import React, { useEffect, useState } from 'react';\nimport { Card } from '@dhis2/ui-core';\nimport { useDispatch } from 'react-redux';\nimport { DataQuery, useDataQuery } from '@dhis2/app-runtime';\nimport { Treebeard } from 'react-treebeard';\nimport { setActiveOrgUnit, updateFilteredICUList, setActiveICU } from '../state/appState';\nimport { ICU_ORG_UNIT_GROUP } from '../constants';\nconst query = {\n  organisationUnits: {\n    resource: 'organisationUnits.json',\n    params: {\n      paging: 'false',\n      fields: \"id,name,level,children,geometry,organisationUnitGroups,parent[id, displayName]\"\n    }\n  }\n};\nlet traversalCache = {};\nexport var parentMatrix = {};\nexport default function OrgUnits() {\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query);\n  const [orgRoot, setOrgRoot] = useState(null);\n  const [cursor, setCursor] = useState(false);\n  const dispatch = useDispatch();\n  var traverseResults = [];\n\n  function processList(orgData, children, parent = null) {\n    let _children = [];\n\n    for (var child of children) {\n      let childOrg = orgData.find(o => o.id === child.id);\n\n      if (!childOrg) {\n        continue;\n      }\n\n      if (parent) {\n        if (!parentMatrix[childOrg.id]) {\n          parentMatrix[childOrg.id] = {};\n        }\n\n        parentMatrix[childOrg.id] = parent.id;\n      }\n\n      if (childOrg.children.length === 0) {\n        childOrg.children = null;\n      } else {\n        childOrg.children = processList(orgData, childOrg.children, childOrg);\n      }\n\n      _children.push({ ...childOrg,\n        active: false\n      });\n    }\n\n    let _prunedChildren = [];\n\n    for (var child of _children) {\n      traverseResults = [];\n      traverse(child, 5); // traversalCache[child.id] = null;\n\n      if (traverseResults.length > 0) {\n        _prunedChildren.push(child);\n\n        traversalCache[child.id] = { ...child,\n          list: [...traverseResults]\n        };\n      }\n    }\n\n    return _prunedChildren;\n  }\n\n  function mergeLevel(node, level = 4) {\n    if (node.level === level - 1) {\n      // at level 3\n      let newChildren = [];\n\n      for (var child1 of node.children) {\n        if (!child1.children) continue;\n\n        for (var child2 of child1.children) {\n          newChildren.push(child2);\n        }\n      }\n\n      node.children = newChildren;\n      return;\n    }\n\n    for (var child of node.children) {\n      mergeLevel(child, level);\n    }\n  }\n\n  useEffect(() => {\n    if (data) {\n      const orgData = data.organisationUnits.organisationUnits;\n      const root = data.organisationUnits.organisationUnits.filter(o => o.level === 1)[0];\n      root.children = processList(orgData, root.children, root);\n      parentMatrix[root.id] = \"\"; // mergeLevel(root, 4);\n\n      setOrgRoot(root);\n    }\n  }, [loading]);\n\n  const onToggle = (node, toggled) => {\n    if (cursor) {\n      cursor.active = false;\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n\n    setCursor(node);\n    setOrgRoot(Object.assign({}, orgRoot));\n    selectOU(node);\n  };\n\n  function traverse(root, level) {\n    if (root.level === level && root.organisationUnitGroups.findIndex(g => g.id === ICU_ORG_UNIT_GROUP) > -1) {\n      traverseResults.push({ ...root\n      });\n      return;\n    }\n\n    if (root.children) {\n      for (var child of root.children) {\n        if (traversalCache[child.id]) {\n          traverseResults = traverseResults.concat(traversalCache[child.id].list);\n        } else {\n          traverse(child, level);\n        }\n      }\n    }\n  }\n\n  const selectOU = node => {\n    traverseResults = []; // traverse the tree and find level 6 bois\n\n    traverse(node, 5);\n    let icus = [];\n\n    for (var icu of traverseResults) {\n      icus.push({ ...icu,\n        distance: 0,\n        total: null,\n        available: null,\n        geometry: traversalCache[icu.parent.id] && traversalCache[icu.parent.id].geometry && traversalCache[icu.parent.id].geometry.type === \"Point\" ? {\n          lat: traversalCache[icu.parent.id].geometry.coordinates[1],\n          lng: traversalCache[icu.parent.id].geometry.coordinates[0]\n        } : {\n          lat: 0,\n          lng: 0\n        }\n      });\n    }\n\n    dispatch(updateFilteredICUList(icus));\n    dispatch(setActiveOrgUnit({\n      id: node.id,\n      name: node.name,\n      level: node.level\n    }));\n\n    if (node.level === 5) {\n      dispatch(setActiveICU({\n        id: node.id,\n        beds: []\n      }));\n    }\n  };\n\n  return <Card>\n            {orgRoot && <Treebeard data={orgRoot} onToggle={onToggle} />}\n        </Card>;\n}","import { createSlice } from '@reduxjs/toolkit';\nconst initState = {\n  isOpen: false,\n  message: null,\n  type: null\n};\nconst notificationSlice = createSlice({\n  name: \"notification\",\n  initialState: initState,\n  reducers: {\n    showNotification(state, action) {\n      state.isOpen = true;\n      state.message = action.payload.message;\n      state.type = action.payload.type;\n    },\n\n    hideNotification(state, action) {\n      state, isOpen = false;\n      state.message = null;\n      state.type = null;\n    }\n\n  }\n});\nexport default notificationSlice.reducer;\nexport const {\n  showNotification,\n  hideNotification\n} = notificationSlice.actions;","import { setICUBeds, setMetaData, updateBedStatus, updateICUStat, setActiveUser, updateActiveICUData } from './appState';\nimport * as moment from 'moment';\nimport { showNotification } from './notificationState';\nimport { ICU_EVENT_ID } from '../constants';\nexport function test() {\n  return async (dispatch, getState, dhisEngine) => {\n    console.log(dhisEngine);\n  };\n}\n\nfunction bedEventHelper(metaData, eventType) {\n  let dataValue = {};\n\n  if (eventType === \"Discharged\") {\n    dataValue = {\n      dataElement: ICU_EVENT_ID,\n      value: \"Discharged\"\n    };\n  } else if (eventType === \"Admitted\") {\n    dataValue = {\n      dataElement: ICU_EVENT_ID,\n      value: \"Admitted\"\n    };\n  } else if (eventType === \"Reserved\") {\n    dataValue = {\n      dataElement: ICU_EVENT_ID,\n      value: \"Reserved\"\n    };\n  }\n\n  return dataValue;\n}\n\nfunction getEventStatus(event) {\n  if (event.dataValues.length > 0) {\n    switch (event.dataValues[0].value) {\n      case \"Discharged\":\n        return \"AVAILABLE\";\n\n      case \"Admitted\":\n        return \"OCCUPIED\";\n\n      case \"Reserved\":\n        return \"RESERVED\";\n    }\n  }\n\n  return \"\";\n}\n\nexport function getActiveUser() {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        user: {\n          resource: 'me',\n          params: {\n            fields: \"id,displayName,userGroups,organisationUnits[id, geometry]\"\n          }\n        }\n      };\n      const {\n        user\n      } = await dhisEngine.query(query);\n      dispatch(setActiveUser({\n        id: user.id,\n        name: user.displayName,\n        group: user.userGroups.length > 0 ? user.userGroups.map(ug => ug.id) : null,\n        organisationUnits: user.organisationUnits.map(ou => ou.id),\n        origin: user.organisationUnits.length > 0 && user.organisationUnits[0].geometry && user.organisationUnits[0].geometry.type === \"Polygon\" ? user.organisationUnits[0].geometry.coordinates : null\n      }));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'Error loading user',\n        type: 'error'\n      }));\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getMetaData() {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        program: {\n          resource: 'programs/C1wTfmmMQUn',\n          params: {\n            fields: \"id,name,userGroupAccesses,trackedEntityType[id, displayName, userGroupAccesses, trackedEntityTypeAttributes[trackedEntityAttribute[id, displayName, formName, valueType, optionSet[options[displayName, id, code]]]]]\"\n          }\n        },\n        dataElements: {\n          resource: 'dataElements',\n          params: {\n            paging: \"false\",\n            program: \"C1wTfmmMQUn\",\n            fields: \"id,displayName,displayFormName,valueType,optionSet[options[id, displayName, code]]\"\n          }\n        }\n      };\n      const {\n        program,\n        dataElements\n      } = await dhisEngine.query(query);\n      let metaData = {\n        id: program.id,\n        name: program.name,\n        trackedEntityType: {\n          id: program.trackedEntityType.id,\n          displayName: program.trackedEntityType.displayName,\n          trackedEntityTypeAttributes: []\n        }\n      };\n      let programAccess = {};\n\n      for (var ga of program.userGroupAccesses) {\n        programAccess[ga.userGroupUid] = {\n          canRead: ga.access.startsWith(\"rw\"),\n          canWrite: ga.access.startsWith(\"rwrw\")\n        };\n      }\n\n      metaData['programAccess'] = programAccess;\n\n      for (var attrib of program.trackedEntityType.trackedEntityTypeAttributes) {\n        metaData.trackedEntityType.trackedEntityTypeAttributes.push(attrib.trackedEntityAttribute);\n      }\n\n      let teAccess = {};\n\n      for (var ga of program.trackedEntityType.userGroupAccesses) {\n        teAccess[ga.userGroupUid] = {\n          canRead: ga.access.startsWith(\"rw\"),\n          canWrite: ga.access.startsWith(\"rwrw\")\n        };\n      }\n\n      metaData.trackedEntityType['access'] = teAccess;\n      let _dataElements = {};\n\n      for (var de of dataElements.dataElements) {\n        if (de.displayName.startsWith(\"ICU\")) {\n          let elem = {\n            id: de.id,\n            displayName: de.displayName,\n            formName: de.displayFormName,\n            type: de.valueType\n          };\n\n          if (de.optionSet) {\n            elem[\"options\"] = de.optionSet.options;\n          }\n\n          _dataElements[de.displayName] = elem;\n        }\n      }\n\n      metaData[\"dataElements\"] = _dataElements;\n      dispatch(setMetaData(metaData));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'failed to load metadata',\n        type: 'error'\n      }));\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getICUBeds(icuId, program) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        results: {\n          resource: 'trackedEntityInstances',\n          params: {\n            ou: icuId,\n            fields: \"trackedEntityInstance,attributes[attribute,displayName,value],enrollments\",\n            program: program\n          }\n        }\n      };\n      const response = await dhisEngine.query(query);\n      const beds = response.results.trackedEntityInstances; // now get status of each\n\n      for (var bed of beds) {\n        dispatch(getBedStatus(bed.trackedEntityInstance));\n      }\n\n      dispatch(setICUBeds({\n        icuId,\n        beds\n      }));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'failed to load icu bed data',\n        type: 'error'\n      }));\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getBedStatus(instanceId) {\n  return async (dispatch, getState, dhisEngine) => {\n    const query = {\n      events: {\n        resource: 'events',\n        params: {\n          trackedEntityInstance: instanceId,\n          paging: \"false\",\n          status: \"ACTIVE\"\n        }\n      }\n    };\n    const response = await dhisEngine.query(query);\n    const events = response.events.events;\n    let status = \"\";\n\n    if (events.length > 0) {\n      const lastEvent = events[0];\n      const bedEventIndex = lastEvent.dataValues.findIndex(dv => dv.dataElement === ICU_EVENT_ID);\n\n      if (bedEventIndex > -1) {\n        switch (lastEvent.dataValues[bedEventIndex].value) {\n          case \"Discharged\":\n            status = \"AVAILABLE\";\n            break;\n\n          case \"Admitted\":\n            status = \"OCCUPIED\";\n            break;\n\n          case \"Reserved\":\n            status = \"RESERVED\";\n            break;\n        }\n      }\n\n      dispatch(updateBedStatus({\n        bedId: instanceId,\n        status: status,\n        lastEvent: lastEvent\n      }));\n    }\n  };\n}\nexport function createBed(teID, icuId, programId, attributes) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {\n        \"trackedEntityType\": teID,\n        \"orgUnit\": icuId,\n        \"attributes\": attributes,\n        \"enrollments\": [{\n          \"orgUnit\": icuId,\n          \"program\": programId,\n          \"enrollmentDate\": moment().format(\"YYYY-MM-DD\"),\n          \"incidentDate\": moment().format(\"YYYY-MM-DD\")\n        }]\n      };\n      const mutation = {\n        resource: 'trackedEntityInstances',\n        type: 'create',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      const instanceId = response.response.importSummaries[0].reference; // add new event to make the bed available\n\n      dispatch(addBedEvent(instanceId, programId, getState().app.ICUEventId, icuId, \"Discharged\"));\n      dispatch(getICUBeds(icuId, programId));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in creating bed',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function updateBed(icuId, bedId, attributes) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {\n        \"orgUnit\": icuId,\n        \"attributes\": attributes\n      };\n      const mutation = {\n        resource: 'trackedEntityInstances/' + bedId,\n        type: 'update',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getICUBeds(icuId, getState().app.metaData.id));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in updating bed',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function removeBed(icuId, enrollmentId) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {};\n      const mutation = {\n        resource: 'enrollments/' + enrollmentId,\n        type: 'delete'\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getICUBeds(icuId, getState().app.metaData.id));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in deleting bed',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function addBedEvent(teId, programId, programStageId, icuId, eventType, additionalData = []) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      // first we complete last event\n      const query = {\n        events: {\n          resource: 'events',\n          params: {\n            trackedEntityInstance: teId,\n            paging: \"false\",\n            status: \"ACTIVE\"\n          }\n        }\n      };\n      const eventResponse = await dhisEngine.query(query);\n\n      if (eventResponse.events.events.length > 0) {\n        const lastEvent = eventResponse.events.events[0];\n        const updatePayload = {\n          \"event\": lastEvent.event,\n          \"trackedEntityInstance\": teId,\n          \"program\": programId,\n          \"programStage\": programStageId,\n          \"enrollment\": icuId,\n          \"orgUnit\": icuId,\n          \"completedDate\": moment().format(\"YYYY-MM-DD\"),\n          \"status\": \"COMPLETED\"\n        };\n        const updateMutation = {\n          resource: 'events',\n          type: 'create',\n          data: updatePayload\n        };\n        await dhisEngine.mutate(updateMutation);\n      }\n\n      const dataValues = [bedEventHelper(getState().app.metaData.dataElements, eventType), ...additionalData];\n      const payload = {\n        \"trackedEntityInstance\": teId,\n        \"program\": programId,\n        \"programStage\": programStageId,\n        \"enrollment\": icuId,\n        \"orgUnit\": icuId,\n        \"dataValues\": dataValues,\n        \"eventDate\": moment().format(\"YYYY-MM-DD\"),\n        \"status\": \"ACTIVE\"\n      };\n      const mutation = {\n        resource: 'events',\n        type: 'create',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getBedStatus(teId));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in adding bed event',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function getICUStat(icu, filters = {}) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      let filtersQuery = \"\";\n\n      for (var filter in filters) {\n        if (filters[filter].length === 0) {\n          continue;\n        }\n\n        const values = filters[filter].map(f => f.value);\n        filtersQuery += `${filter}:IN:${values.join(\";\")},`;\n      }\n\n      filtersQuery = filtersQuery.substr(0, filtersQuery.length - 1); // first we complete last event\n\n      const query = {\n        events: {\n          resource: 'events',\n          params: {\n            orgUnit: icu.id,\n            paging: \"false\",\n            status: \"ACTIVE\"\n          }\n        },\n        filteredTEI: {\n          resource: 'trackedEntityInstances',\n          params: {\n            ou: icu.id,\n            paging: 'false',\n            fields: 'trackedEntityInstance',\n            filter: filtersQuery\n          }\n        },\n        organisationUnit: {\n          resource: 'organisationUnits/' + icu.id,\n          params: {\n            fields: 'id,displayName,parent[displayName, geometry],contactPerson,phoneNumber'\n          }\n        }\n      };\n      const response = await dhisEngine.query(query);\n      let stat = {\n        available: 0,\n        total: 0\n      };\n\n      for (var event of response.events.events) {\n        let teIndex = response.filteredTEI.trackedEntityInstances.findIndex(te => te.trackedEntityInstance === event.trackedEntityInstance);\n\n        if (teIndex === -1) {\n          // filtered TE doesn't have this\n          continue;\n        }\n\n        let status = getEventStatus(event);\n\n        if (status === \"AVAILABLE\") {\n          stat.available++;\n        }\n\n        stat.total++;\n      }\n\n      dispatch(updateICUStat({\n        icuId: icu.id,\n        stat: stat,\n        icuName: `${response.organisationUnit.parent.displayName} - ${response.organisationUnit.displayName}`,\n        contactPerson: response.organisationUnit.contactPerson,\n        contactNumber: response.organisationUnit.phoneNumber\n      }));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in retrieving ICU status',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function getActiveICData(icuId) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        organisationUnit: {\n          resource: 'organisationUnits/' + icuId,\n          params: {\n            fields: 'id,contactPerson,phoneNumber'\n          }\n        }\n      };\n      const response = await dhisEngine.query(query);\n      dispatch(updateActiveICUData({\n        icuId: icuId,\n        contactPerson: response.organisationUnit.contactPerson,\n        contactNumber: response.organisationUnit.phoneNumber\n      }));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in retrieving ICU data',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}","import React, { useEffect, useState } from 'react';\nimport { Table, TableHead, TableBody, TableRow, TableCellHead, TableCell, Button, DropdownButton } from '@dhis2/ui-core';\nimport { useDispatch } from 'react-redux';\nimport { getICUStat } from '../state/apiActions';\n\nfunction sortData(field, data, state) {\n  const {\n    setLocationData,\n    sortedBy,\n    setSortedBy,\n    sortOrder,\n    setSortOrder\n  } = state;\n\n  const compare = (locOne, locTwo) => {\n    let propertyOne = locOne[field];\n    let propertyTwo = locTwo[field];\n    let comparison = 0;\n\n    if (propertyOne > propertyTwo) {\n      comparison = 1;\n    } else if (propertyOne < propertyTwo) {\n      comparison = -1;\n    }\n\n    if (sortedBy === field) {\n      comparison = comparison * -1 * sortOrder; //inverts the order\n    }\n\n    return comparison;\n  };\n\n  let result = data.slice();\n  result = result.sort(compare);\n  setLocationData(result);\n  setSortedBy(field);\n  setSortOrder(sortOrder * -1);\n}\n\nexport default function ICUTable({\n  data,\n  onSelectICU\n}) {\n  const [locationData, setLocationData] = useState([]);\n  const [sortedBy, setSortedBy] = useState('distance');\n  const [sortOrder, setSortOrder] = useState(1);\n  const dispatch = useDispatch();\n  const stateData = {\n    setLocationData,\n    sortedBy,\n    setSortedBy,\n    sortOrder,\n    setSortOrder\n  };\n  useEffect(() => {\n    sortData(sortedBy, data, stateData);\n  }, [data]);\n\n  if (!data) {\n    return <div></div>;\n  }\n\n  return <Table>\n            <TableHead>\n                <TableRow>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'name'} onClick={() => {\n            sortData('name', locationData, stateData);\n          }}> \n                            ICU\n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'distance'} onClick={() => {\n            sortData('distance', locationData, stateData);\n          }}> \n                            Distance \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'total'} onClick={() => {\n            sortData('total', locationData, stateData);\n          }}> \n                            TotalBeds \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'available'} onClick={() => {\n            sortData('available', locationData, stateData);\n          }}> \n                            AvailableBeds \n                        </DropdownButton> \n                    </TableCellHead>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {locationData.map((loc, key) => <TableRow key={key}>\n                    <TableCell><a href=\"#\" onClick={() => onSelectICU(loc)}>{loc.name}</a></TableCell>\n                    <TableCell>{loc.distance}</TableCell>\n                    <TableCell>{loc.total}</TableCell>\n                    <TableCell>{loc.available}</TableCell>\n                </TableRow>)}\n            </TableBody>\n        </Table>;\n}","import { configureStore, combineReducers, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport appReducer from './appState';\nimport notificationReducer from './notificationState';\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  notification: notificationReducer\n});\nexport const store = configureStore({\n  reducer: rootReducer\n});","import { parentMatrix } from \"./OrgUnits\";\nimport { SUPER_ADMIN_GROUP } from \"../constants\";\nexport const ACTIONS = {\n  VIEW_ICU: \"VIEW_ICU\",\n  CONFIG_ICU: \"CONFIG_ICU\",\n  ADD_EVENT: \"ADD_EVENT\"\n}; // function to calculate if the parent has the child down the line\n\nfunction isRelated(parent, child) {\n  while (parentMatrix[child] !== parent) {\n    child = parentMatrix[child];\n\n    if (!parentMatrix[child]) {\n      break;\n    }\n  }\n\n  if (!parentMatrix[child] || parentMatrix[child] !== parent) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction userHasOrgAccess(orgUnits, icuId) {\n  for (var orgUnit of orgUnits) {\n    if (orgUnit === icuId || isRelated(orgUnit, icuId)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction userHasGroupAccess(groups, accessGroups, accessType) {\n  for (var userGroup of groups) {\n    if (accessGroups[userGroup]) {\n      if (accessType === \"READ\") {\n        return accessGroups[userGroup].canRead;\n      }\n\n      if (accessType === \"WRITE\") {\n        return accessGroups[userGroup].canWrite;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function hasPerm(action, activeUser, programAccess, teAccess, icuId) {\n  if (activeUser.group.indexOf(SUPER_ADMIN_GROUP) > -1) {\n    //super user\n    return true;\n  }\n\n  if (action === ACTIONS.VIEW_ICU) {\n    if (userHasGroupAccess(activeUser.group, teAccess, \"READ\")) {\n      return true;\n    }\n  }\n\n  if (action === ACTIONS.CONFIG_ICU && userHasOrgAccess(activeUser.organisationUnits, icuId)) {\n    if (userHasGroupAccess(activeUser.group, teAccess, \"WRITE\")) {\n      return true;\n    }\n  }\n\n  if (action === ACTIONS.ADD_EVENT) {\n    if (userHasGroupAccess(activeUser.group, programAccess, \"WRITE\") && userHasOrgAccess(activeUser.organisationUnits, icuId)) {\n      return true;\n    }\n  }\n\n  return false;\n}","import React, { useEffect, useState, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Popper, ScreenCover } from '@dhis2/ui-core';\nimport { hasPerm, ACTIONS } from './permissionUtils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faProcedures } from '@fortawesome/free-solid-svg-icons';\nexport default function ICUBed({\n  name,\n  status,\n  onView,\n  onOccupy,\n  onDischarge,\n  onReserve,\n  hasEventPerm,\n  onViewPatient,\n  hasEditPerm\n}) {\n  const ref = useRef(null);\n  const [open, setOpen] = useState(false);\n\n  const getClassName = () => {\n    if (status === \"AVAILABLE\") {\n      return \"available\";\n    }\n\n    if (status === \"OCCUPIED\") {\n      return \"occupied\";\n    }\n\n    if (status === \"RESERVED\") {\n      return \"reserved\";\n    }\n\n    return \"\";\n  };\n\n  const onToggle = () => {\n    if (hasEventPerm) {\n      setOpen(!open);\n    }\n  };\n\n  return <div className={`icu-bed ${getClassName()}`} ref={ref} onClick={onToggle}>\n            <FontAwesomeIcon icon={faProcedures} size=\"lg\" />\n            <span>{name}</span>\n            {open && createPortal(<ScreenCover onClick={onToggle} transparent>\n                        <Popper placement=\"right\" reference={ref}>\n                            <div className=\"bed-options\">\n                                {(status === \"AVAILABLE\" || status === \"RESERVED\") && <div onClick={() => {\n            setOpen(false);\n            onOccupy();\n          }}>Occupy</div>}\n                                {status === \"AVAILABLE\" && <div onClick={() => {\n            setOpen(false);\n            onReserve();\n          }}>Reserve</div>}\n                                {status !== \"AVAILABLE\" && <div onClick={() => {\n            setOpen(false);\n            onDischarge();\n          }}>Discharge</div>}\n                                <div onClick={onView}>View</div>\n                                {hasEditPerm && (status === \"OCCUPIED\" || status === \"RESERVED\") && <div onClick={onViewPatient}>View Patient</div>}\n                            </div>\n                        </Popper>\n                    </ScreenCover>, document.body)}\n        </div>;\n}","import React, { useState, useEffect } from 'react';\nimport { Modal, ModalTitle, ModalActions, ModalContent, ButtonStrip, Button, InputField, SingleSelect, RadioGroup, Radio, RadioGroupField, SingleSelectOption, SingleSelectField } from '@dhis2/ui-core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as moment from 'moment';\nimport { useDataMutation, useDataEngine } from '@dhis2/app-runtime';\nimport { test, createBed, updateBed } from '../state/apiActions';\nconst booleanSelections = [{\n  label: \"No\",\n  value: 'false'\n}, {\n  label: \"Yes\",\n  value: 'true'\n}];\nconst experiseAttrbutes = [\"v5eNzdQsLox\", \"eBlbs7BzVfX\", \"JJ2DQSnlhfR\", \"m64bCKnUD8L\", \"Xar8cTc8XN0\", \"k7eXIuzzhat\", \"JZXI1GzSoYx\"];\nconst facilitiesAttributes = [\"Jio5MTDVFo4\", \"yvOZEiBS5cd\", \"CGp0lKLkSKY\", \"YCILPvLTofG\"];\nconst infoAttributes = [\"tswabivShTy\", \"Xt5tV6OFSEW\", \"XYNBoDZS0aV\"];\n\nfunction findAttribute(attributes, id) {\n  const search = attributes.filter(a => a.attribute === id);\n  return search.length > 0 ? search[0].value : null;\n}\n\nfunction findOption(optionSet, code) {\n  const search = optionSet.filter(o => o.code === code);\n  return search[0];\n}\n\nexport default function ConfigureBedModal({\n  open,\n  onClose,\n  selectedBed,\n  editable\n}) {\n  const metaData = useSelector(state => state.app.metaData);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const [bedAttributes, setBedAttributtes] = useState([]);\n  const [formState, setFormState] = useState({});\n  const engine = useDataEngine();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (metaData) {\n      let _bedAttributes = metaData.trackedEntityType.trackedEntityTypeAttributes;\n      let _formState = {};\n\n      for (var attrib of _bedAttributes) {\n        // check if this is a update thing\n        let bedValue = null;\n\n        if (selectedBed) {\n          bedValue = findAttribute(selectedBed.attributes, attrib.id);\n        }\n\n        if (attrib.valueType === \"TEXT\") {\n          if (attrib.optionSet && attrib.optionSet.options && attrib.optionSet.options.length > 0) {\n            if (bedValue) {\n              const option = findOption(attrib.optionSet.options, bedValue);\n              _formState[attrib.id] = {\n                \"label\": option.displayName,\n                \"value\": option.code\n              };\n            } else {\n              _formState[attrib.id] = {\n                \"label\": attrib.optionSet.options[0].displayName,\n                \"value\": attrib.optionSet.options[0].code\n              };\n            }\n          } else {\n            _formState[attrib.id] = bedValue ? bedValue : \"\";\n          }\n        } else if (attrib.valueType === \"BOOLEAN\") {\n          _formState[attrib.id] = {\n            \"label\": bedValue && bedValue === \"true\" ? \"Yes\" : \"No\",\n            \"value\": bedValue ? bedValue : \"false\"\n          };\n        }\n      }\n\n      setFormState(_formState);\n      setBedAttributtes(_bedAttributes);\n    }\n  }, [metaData]);\n\n  if (!open) {\n    return <></>;\n  }\n\n  const updateField = (field, value) => {\n    setFormState({ ...formState,\n      [field]: value\n    });\n  };\n\n  const getAttributeInput = (attribId, key) => {\n    const attrib = bedAttributes.find(b => b.id === attribId);\n\n    if (attrib.optionSet && attrib.optionSet.options && attrib.optionSet.options.length > 0) {\n      return <SingleSelectField key={key} label={attrib.formName} name={attrib.id} onChange={val => updateField(attrib.id, val.selected)} selected={formState[attrib.id]} disabled={!editable}>\n                        {attrib.optionSet.options.map((sel, key) => <SingleSelectOption key={key} label={sel.displayName} value={sel.code} />)}\n                </SingleSelectField>;\n    }\n\n    if (attrib.valueType === \"TEXT\") {\n      return <InputField key={key} label={attrib.formName} name={attrib.id} type=\"text\" onChange={val => updateField(attrib.id, val.value)} value={formState[attrib.id]} disabled={!editable} />;\n    }\n\n    if (attrib.valueType === \"BOOLEAN\") {\n      return <SingleSelectField key={key} label={attrib.formName} name={attrib.id} onChange={val => updateField(attrib.id, val.selected)} selected={formState[attrib.id]} disabled={!editable}>\n                        {booleanSelections.map((sel, key) => <SingleSelectOption key={key} label={sel.label} value={sel.value} />)}\n                </SingleSelectField>;\n      return <></>;\n    }\n  };\n\n  const addBed = async () => {\n    const attributes = [];\n\n    for (var attrib in formState) {\n      attributes.push({\n        \"attribute\": attrib,\n        \"value\": formState[attrib].value ? formState[attrib].value : formState[attrib]\n      });\n    }\n\n    if (selectedBed) {\n      // update existing bed\n      dispatch(updateBed(activeICU.id, selectedBed.trackedEntityInstance, attributes));\n    } else {\n      //create new bed\n      dispatch(createBed(metaData.trackedEntityType.id, activeICU.id, metaData.id, attributes));\n    }\n\n    onClose();\n  };\n\n  return <Modal open>\n            <ModalTitle>\n                {!editable ? \"View\" : selectedBed ? \"Update\" : \"Add\"} ICU Bed\n            </ModalTitle>\n            <ModalContent>\n                {bedAttributes.length > 0 && <div className=\"form\">\n                        {infoAttributes.map((attrib, key) => getAttributeInput(attrib, key))}\n                        \n                        <h4>Facilities</h4>\n                        {facilitiesAttributes.map((attrib, key) => getAttributeInput(attrib, key))}\n\n                        <h4>Expertise</h4>\n                        {experiseAttrbutes.map((attrib, key) => getAttributeInput(attrib, key))}\n                    </div>}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button onClick={onClose} secondary type=\"button\">\n                        Close\n                    </Button>\n                    {editable && <Button onClick={addBed} primary type=\"button\">\n                            {selectedBed ? \"Update Bed\" : \"Add New Bed\"}\n                        </Button>}\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n}","import React from 'react';\nexport default function useConfirmation() {\n  const show = (query, onOk, onCancel) => {\n    const isOk = confirm(query);\n\n    if (isOk) {\n      onOk();\n    } else {\n      onCancel();\n    }\n  };\n\n  return {\n    show\n  };\n}","import React, { useState, useEffect } from 'react';\nimport { Modal, ModalTitle, ModalActions, ModalContent, ButtonStrip, Button, InputField, SingleSelect, RadioGroup, Radio, RadioGroupField, SingleSelectOption, SingleSelectField } from '@dhis2/ui-core';\nimport { addBedEvent } from '../state/apiActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useConfirmation from './useConfirmationHook';\nimport { PATIENT_ATTRIBUTES } from '../constants';\nconst patientFieldset = [{\n  type: \"TEXT\",\n  label: \"ICU - BHT Number\",\n  id: \"j1hbO7zzRgV\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Patient Name\",\n  id: \"sK09QRLNyAA\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Consultant In-charge\",\n  id: \"malZQqUEzi9\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Patient Diagnosis\",\n  id: \"qh9bc6jlauE\"\n}];\nexport default function RegisterPatientModal({\n  open,\n  onClose,\n  selectedBed,\n  actionType,\n  editable\n}) {\n  const [formState, setFormState] = useState({});\n  const dispatch = useDispatch();\n  const metaData = useSelector(state => state.app.metaData);\n  const programStage = useSelector(state => state.app.ICUEventId);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const confirmation = useConfirmation();\n  useEffect(() => {\n    let _formState = {};\n\n    for (var fieldId of PATIENT_ATTRIBUTES) {\n      const field = Object.values(metaData.dataElements).find(de => de.id === fieldId);\n\n      if (field.type === \"TEXT\") {\n        if (!editable && selectedBed.lastEvent) {\n          _formState[field.id] = selectedBed.lastEvent.dataValues.find(dv => dv.dataElement === field.id).value;\n        } else {\n          _formState[field.id] = \"\";\n        }\n      }\n    }\n\n    setFormState(_formState);\n  }, [selectedBed]);\n\n  const updateField = (field, value) => {\n    setFormState({ ...formState,\n      [field]: value\n    });\n  };\n\n  const getFormField = (attrib, key) => {\n    const field = Object.values(metaData.dataElements).find(de => de.id === attrib);\n\n    if (field.type === \"TEXT\") {\n      return <InputField key={key} label={field.formName} name={field.id} onChange={val => updateField(field.id, val.value)} value={formState[field.id]} disabled={!editable} />;\n    }\n  };\n\n  const admitPatient = () => {\n    let dataValues = [];\n\n    for (var field in formState) {\n      dataValues.push({\n        dataElement: field,\n        value: formState[field]\n      });\n    }\n\n    if (actionType === \"admit\") {\n      dispatch(addBedEvent(selectedBed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Admitted\", dataValues));\n    } else if (actionType === \"reserve\") {\n      dispatch(addBedEvent(selectedBed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Reserved\", dataValues));\n    }\n\n    onClose();\n  };\n\n  return <Modal open>\n            <ModalTitle>\n                \n                {editable && <span>{actionType === \"admit\" ? 'Admit' : 'Reserve'} New Patient</span>}\n                {!editable && <span>View Patient</span>}\n                \n            </ModalTitle>\n            <ModalContent>\n                {PATIENT_ATTRIBUTES.map((attrib, key) => getFormField(attrib, key))}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button onClick={onClose} secondary type=\"button\">\n                        Close\n                    </Button>\n                    {editable && <Button onClick={admitPatient} primary type=\"button\">\n                            {actionType === \"admit\" ? 'Admit' : 'Reserve'} Patient\n                        </Button>}\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n}","import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoBox, DistanceMatrixService } from '@react-google-maps/api';\nconst mapContainerStyle = {\n  height: \"600px\",\n  width: \"100%\"\n};\nconst center = {\n  lat: 8.11,\n  lng: 80.77\n};\nconst infoWindowInitData = {\n  visible: false,\n  ...center\n};\nexport default function ICUMap(props) {\n  const {\n    onMarkerClick,\n    data,\n    origin,\n    updateDistance\n  } = props;\n  const [infoWindowData, setInfoWindowData] = useState(infoWindowInitData);\n  const [markerData, setMarkerData] = useState(null);\n  const [distanceRequest, setDistanceRequest] = useState(null);\n  useEffect(() => {\n    if (data) {\n      // if(!markerData){\n      let _markerData = [];\n      let _keys = {};\n\n      for (var d of data) {\n        if (!_keys[d.parent.id]) {\n          _markerData.push({\n            id: d.parent.id,\n            name: d.parent.displayName,\n            geometry: d.geometry,\n            icus: []\n          });\n\n          _keys[d.parent.id] = true;\n        }\n\n        _markerData.find(p => p.id === d.parent.id).icus.push(d.name);\n      }\n\n      let destinations = null;\n      let distanceRequest = null;\n\n      if (origin) {\n        destinations = _markerData.map(d => d.geometry);\n        distanceRequest = {\n          origins: [{\n            lat: origin[1],\n            lng: origin[0]\n          }],\n          destinations: destinations,\n          travelMode: 'DRIVING'\n        };\n      }\n\n      setMarkerData(_markerData);\n      setDistanceRequest(distanceRequest); // }\n    }\n  }, [data.length, origin]);\n\n  const handleMarkerOnHover = ICUEntry => {\n    setInfoWindowData({\n      visible: true,\n      ...ICUEntry\n    });\n  };\n\n  const infoBoxOptions = {\n    closeBoxURL: ''\n  };\n  const markerAvailableOptions = {\n    icon: {\n      path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z M -2,-30 a 2,2 0 1,1 4,0 2,2 0 1,1 -4,0',\n      fillColor: 'green',\n      fillOpacity: 1,\n      strokeColor: '#000',\n      strokeWeight: 1,\n      scale: 1\n    }\n  };\n  const markerUnavailableOptions = {\n    icon: {\n      path: 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z',\n      fillColor: '#DC143C',\n      fillOpacity: 1,\n      strokeColor: '',\n      strokeWeight: 0\n    }\n  }; // let destinations = null;\n  // let distanceRequest = null;\n  // if(origin){\n  //     destinations = data.map(d =>  d.geometry);\n  //     distanceRequest = {\n  //         origins: [{lat: origin[1], lng: origin[0]}],\n  //         destinations: destinations,\n  //         travelMode: 'DRIVING'\n  //     }\n  // }\n\n  return <LoadScript id=\"script-loader\" googleMapsApiKey=\"AIzaSyBjlDmwuON9lJbPMDlh_LI3zGpGtpK9erc\">\n            {markerData && <GoogleMap id='example-map' mapContainerStyle={mapContainerStyle} zoom={7.6} center={center}>\n                    {markerData.map((ICUEntry, index) => {\n        return <Marker position={{\n          lat: ICUEntry.geometry.lat,\n          lng: ICUEntry.geometry.lng\n        }} onClick={() => {\n          onMarkerClick(ICUEntry);\n        }} onMouseOver={() => {\n          handleMarkerOnHover(ICUEntry);\n        }} onMouseOut={() => {\n          handleMarkerOnHover(infoWindowInitData);\n        }} options={markerAvailableOptions} key={index} />;\n      })}\n                    {infoWindowData.visible && <InfoBox position={{\n        lat: infoWindowData.geometry.lat,\n        lng: infoWindowData.geometry.lng\n      }} options={infoBoxOptions}>\n                            <div style={{\n          backgroundColor: 'white',\n          opacity: 0.95,\n          padding: 5\n        }}>\n                                <div style={{\n            fontSize: 14,\n            fontColor: `#08233B`\n          }}>\n                                    <div>Hospital: {infoWindowData.name}</div>\n                                    <div><b>ICUs</b></div>\n                                    {infoWindowData.icus.map(name => <div>{name}</div>)}\n                                </div>\n                            </div>\n                        </InfoBox>}\n                </GoogleMap>}\n            {distanceRequest && <DistanceMatrixService options={distanceRequest} callback={(data, s) => updateDistance(data, status)} />}\n        </LoadScript>;\n}","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AlertBar } from '@dhis2/ui-core';\nexport default function Notification(props) {\n  const {\n    isOpen,\n    message,\n    type\n  } = useSelector(state => state.notification);\n  if (!isOpen) return null;\n  return <AlertBar duration={5000} icon critical={type === 'error'} warning={type === 'warning'} success={type === 'success'}>\n            {message}\n        </AlertBar>;\n}","import React, { useState, useEffect } from 'react';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { DataQuery, useDataQuery, useDataEngine } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport OrgUnits from './components/OrgUnits';\nimport './App.css';\nimport { Card, MultiSelect, MultiSelectOption, MultiSelectField, Button, ButtonStrip, Table, TableHead, TableBody, TableRow, TableCellHead, TableCell } from '@dhis2/ui-core';\nimport ICUTable from './components/ICUTable';\nimport * as api from \"./mockapi\";\nimport { rootReducer } from './state/store';\nimport ICUBed from './components/ICUBed';\nimport ConfigureBedModal from './components/ConfigureBedModal';\nimport { setActiveICU, setMetaData, setActiveOrgUnit, updateICUStat, updateICUDistance } from './state/appState';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { getICUBeds, getMetaData, addBedEvent, removeBed, getICUStat, getActiveUser, getActiveICData } from './state/apiActions';\nimport RegisterPatientModal from './components/RegisterPatientModal';\nimport useConfirmation from './components/useConfirmationHook';\nimport ICUMap from './components/ICUMap';\nimport Notification from './components/Notification';\nimport { hasPerm, ACTIONS } from './components/permissionUtils';\nimport { EXPERTISE_ATTRIBUTES, FACILITIES_ATTRIBUTES } from './constants';\n\nfunction getAttributeByName(bed, name) {\n  for (var attrib of bed.attributes) {\n    if (attrib.displayName === name) {\n      return attrib.value;\n    }\n  }\n\n  return \"\";\n}\n\nfunction ViewOrgICU() {\n  const activeOrgUnit = useSelector(state => state.app.activeOrgUnit);\n  const activeUser = useSelector(state => state.app.activeUser);\n  const bedData = useSelector(state => state.app.icuList);\n  const metaData = useSelector(state => state.app.metaData);\n  const dispatch = useDispatch();\n  const bedTypeId = 'XYNBoDZS0aV';\n  const covidTypeId = 'Xt5tV6OFSEW';\n  let bedTypeData = null;\n  let covidTypeData = null;\n\n  if (metaData) {\n    bedTypeData = metaData.trackedEntityType.trackedEntityTypeAttributes.find(({\n      id\n    }) => id === bedTypeId);\n    covidTypeData = metaData.trackedEntityType.trackedEntityTypeAttributes.find(({\n      id\n    }) => id === covidTypeId);\n  }\n\n  const [filters, setFilters] = useState({\n    [bedTypeId]: [],\n    [covidTypeId]: []\n  });\n  useEffect(() => {\n    if (bedData) {\n      for (var icu of bedData) {\n        if (icu.total === null) {\n          dispatch(getICUStat(icu, filters));\n          dispatch(updateICUStat({\n            icuId: icu.id,\n            stat: {\n              total: \"Updating...\",\n              available: null\n            }\n          }));\n        }\n      }\n    }\n  }, [bedData]);\n  useEffect(() => {\n    if (bedData) {\n      for (var icu of bedData) {\n        dispatch(getICUStat(icu, filters));\n      }\n    }\n  }, [filters]);\n\n  if (!activeOrgUnit) {\n    return <p>Please select an organization unit</p>;\n  }\n\n  if (activeOrgUnit.level === 5) {\n    return <ViewICUBeds />;\n  }\n\n  const onSelectICU = icu => {\n    dispatch(setActiveOrgUnit({\n      id: icu.id,\n      name: icu.name,\n      level: icu.level\n    }));\n    dispatch(setActiveICU({\n      id: icu.id,\n      beds: []\n    }));\n  };\n\n  const onUpdateDistance = (data, status) => {\n    if (data.rows && data.rows.length > 0 && data.rows[0].elements && data.rows[0].elements.length === bedData.length) {\n      for (var ind in bedData) {\n        if (data.rows[0].elements[ind].status === \"OK\") {\n          dispatch(updateICUDistance({\n            icuId: bedData[ind].id,\n            distance: `${data.rows[0].elements[ind].distance.text} (${data.rows[0].elements[ind].duration.text})`\n          }));\n        }\n      }\n    }\n  };\n\n  return activeOrgUnit.level < 6 && <>\n                <span className=\"t20\">Showing ICU Locations for <b>{activeOrgUnit.name}</b></span>\n                <div className=\"filter-area\">\n                    <MultiSelect selected={filters[bedTypeId]} placeholder={bedTypeData.displayName} onChange={({\n        selected\n      }) => {\n        setFilters({ ...filters,\n          [bedTypeId]: selected\n        });\n      }}>\n                        {bedTypeData && bedTypeData.optionSet.options.map((option, key) => <MultiSelectOption key={key} value={option.code} label={option.displayName} />)}\n                    </MultiSelect>\n                    <MultiSelect selected={filters[covidTypeId]} placeholder={covidTypeData.displayName} onChange={({\n        selected\n      }) => {\n        setFilters({ ...filters,\n          [covidTypeId]: selected\n        });\n      }}>\n                        {covidTypeData && covidTypeData.optionSet.options.map((option, key) => <MultiSelectOption key={key} value={option.code} label={option.displayName} />)}\n                    </MultiSelect>\n                </div>\n                <div className=\"icu-org\">\n                    <div className=\"icu-table\">\n                        <ICUTable data={bedData} onSelectICU={onSelectICU} />\n                    </div>\n                    <div className=\"icu-map\">\n                        <ICUMap onMarkerClick={ICUEntry => {\n          console.log(ICUEntry);\n        }} data={bedData.map(d => {\n          return {\n            name: d.name,\n            parent: d.parent,\n            geometry: d.geometry\n          };\n        })} origin={activeUser.origin} updateDistance={onUpdateDistance} />\n                    </div>\n                </div>\n            </>;\n}\n\nfunction ViewICUBeds() {\n  const activeUser = useSelector(state => state.app.activeUser);\n  const activeOrgUnit = useSelector(state => state.app.activeOrgUnit);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const metaData = useSelector(state => state.app.metaData);\n  const programStage = useSelector(state => state.app.ICUEventId);\n  const [showConfigure, setShowConfigure] = useState(false);\n  const [bedModalOpen, setBedModalOpen] = useState(false);\n  const [patientModalOpen, setPatientModalOpen] = useState(false);\n  const [patientModalAction, setPatientModalAction] = useState(\"admit\");\n  const [selectedBed, setSelectedBed] = useState(null);\n  const [eventPerm, setEventPerm] = useState(false);\n  const [patientEditable, setPatientEditable] = useState(true);\n  const dispatch = useDispatch();\n  const confirmation = useConfirmation();\n  useEffect(() => {\n    if (metaData) {\n      dispatch(getICUBeds(activeICU.id, metaData.id));\n      dispatch(getActiveICData(activeICU.id));\n\n      if (hasPerm(ACTIONS.ADD_EVENT, activeUser, metaData.programAccess, metaData.trackedEntityType.access, activeICU.id)) {\n        setEventPerm(true);\n      }\n    }\n  }, [metaData, activeICU.id]);\n\n  const onViewBed = bed => {\n    setSelectedBed(bed);\n    setBedModalOpen(true);\n  };\n\n  const onOccupyBed = bed => {\n    setSelectedBed(bed);\n    setPatientEditable(true);\n    setPatientModalAction(\"admit\");\n    setPatientModalOpen(true); // dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Admitted\"));\n  };\n\n  const onReserveBed = bed => {\n    // confirmation.show(\"Do you want to confirm reserving this bed?\",\n    //     () => dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Reserved\")),\n    //     () => { }\n    // );\n    setSelectedBed(bed);\n    setPatientEditable(true);\n    setPatientModalAction(\"reserve\");\n    setPatientModalOpen(true);\n  };\n\n  const onDischargeBed = bed => {\n    confirmation.show(\"Do you want to confirm discharging this bed?\", () => dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Discharged\")), () => {});\n  };\n\n  const onViewPatient = bed => {\n    setSelectedBed(bed);\n    setPatientEditable(false);\n    setPatientModalOpen(true);\n  };\n\n  if (!activeOrgUnit) {\n    return <p>Please select an organization unit</p>;\n  }\n\n  const getAttributeText = (bed, attribId, key) => {\n    if (bed.attributes.find(a => a.attribute === attribId).value === \"true\") {\n      return <p key={key}>{metaData.trackedEntityType.trackedEntityTypeAttributes.find(a => a.id === attribId).formName}</p>;\n    }\n\n    return \"\";\n  };\n\n  return <>\n            <div className=\"inner-header\">\n                <span className=\"t20\">Showing ICU Bed status at <b>{activeOrgUnit.name}</b></span>\n                {hasPerm(ACTIONS.CONFIG_ICU, activeUser, metaData.programAccess, metaData.trackedEntityType.access, activeICU.id) && <Button onClick={() => setShowConfigure(true)} className=\"pull-right\">Configure Beds</Button>}\n            </div>\n            <div className=\"info\">\n                {activeICU.beds.length > 0 && <div className=\"contact\">\n                        <p><b>Facilities</b></p>\n                        {FACILITIES_ATTRIBUTES.map((attrib, key) => getAttributeText(activeICU.beds[0], attrib, key))}\n                    </div>}\n                {activeICU.beds.length > 0 && <div className=\"contact\">\n                        <p><b>Expertise</b></p>\n                        {EXPERTISE_ATTRIBUTES.map((attrib, key) => getAttributeText(activeICU.beds[0], attrib, key))}\n                    </div>}\n                <div className=\"contact\">\n                    <p><b>Primary Contact</b></p>\n                    <p>{activeICU.contactPerson ? activeICU.contactPerson : \"No contact person listed\"}</p>\n                    <p>{activeICU.contactNumber ? activeICU.contactNumber : \"No contact number listed\"}</p>\n                </div>\n            </div>\n            {activeICU && <>\n                    {showConfigure && <ViewConfigureBeds onBack={() => setShowConfigure(false)} />}\n                    {!showConfigure && <div className=\"icu-bed-container\">\n                            {!activeICU.beds.length && <p>No beds currently added</p>}\n                            {activeICU.beds.map((bed, key) => <ICUBed key={key} name={getAttributeByName(bed, \"ICU - Bed Number\")} status={bed.status ? bed.status : \"IDLE\"} onView={() => onViewBed(bed)} onOccupy={() => onOccupyBed(bed)} onDischarge={() => onDischargeBed(bed)} onReserve={() => onReserveBed(bed)} onViewPatient={() => onViewPatient(bed)} hasEventPerm={eventPerm} hasEditPerm={hasPerm(ACTIONS.CONFIG_ICU, activeUser, metaData.programAccess, metaData.trackedEntityType.access, activeICU.id)} />)}\n                        </div>}\n                </>}\n            {bedModalOpen && <ConfigureBedModal open={bedModalOpen} onClose={() => setBedModalOpen(false)} selectedBed={selectedBed} editable={false} />}\n            {patientModalOpen && <RegisterPatientModal open={patientModalOpen} onClose={() => setPatientModalOpen(false)} selectedBed={selectedBed} actionType={patientModalAction} editable={patientEditable} />}\n        </>;\n}\n\nfunction ViewConfigureBeds({\n  onBack\n}) {\n  const [bedModalOpen, setBedModalOpen] = useState(false);\n  const dispatch = useDispatch();\n  const activeICU = useSelector(state => state.app.activeICU);\n  const metaData = useSelector(state => state.app.metaData);\n  const [selectedBed, setSelectedBed] = useState(null);\n  const confirmation = useConfirmation(); // useEffect(() => {\n  //     dispatch(getICUBeds(activeICU.id, metaData.id));\n  // }, []);\n\n  const onAddBed = () => {\n    setSelectedBed(null);\n    setBedModalOpen(true);\n  };\n\n  const onSelectBed = bed => {\n    setSelectedBed(bed);\n    setBedModalOpen(true);\n  };\n\n  const onRemoveBed = bed => {\n    confirmation.show(\"Do you really want to remove this bed?\", () => {\n      dispatch(removeBed(activeICU.id, bed.enrollments[0].enrollment));\n    }, () => {});\n  };\n\n  return <>\n            <div className=\"inner-header\">\n                <ButtonStrip end>\n                    <Button onClick={onBack}>Back</Button>\n                    <Button primary onClick={onAddBed}>Add New Bed</Button>\n                </ButtonStrip>\n            </div>\n            <div className=\"inner-container\">\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCellHead>Bed No</TableCellHead>\n                            <TableCellHead>Bed Type</TableCellHead>\n                            <TableCellHead>Covid Type</TableCellHead>\n                            <TableCellHead>Action</TableCellHead>\n                        </TableRow>\n                    </TableHead>\n                    {activeICU && <TableBody>\n                            {activeICU.beds.map((bed, key) => <TableRow key={key}>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - Bed Number\")}</TableCell>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - Type\")}</TableCell>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - COVID Type\")}</TableCell>\n                                    <TableCell>\n                                        <ButtonStrip>\n                                            <Button onClick={() => onSelectBed(bed)}>View Details</Button>\n                                            <Button destructive onClick={() => onRemoveBed(bed)}>Remove</Button>\n                                        </ButtonStrip>\n                                    </TableCell>\n                                </TableRow>)}\n                        </TableBody>}\n                </Table>\n            </div>\n            {bedModalOpen && <ConfigureBedModal open={bedModalOpen} onClose={() => setBedModalOpen(false)} selectedBed={selectedBed} editable={true} />}\n        </>;\n}\n\nfunction ContainerView({\n  children\n}) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getMetaData());\n    dispatch(getActiveUser());\n  }, []);\n  return <div style={{\n    height: \"100vh\"\n  }}>\n            {children}\n        </div>;\n}\n\nfunction MyApp() {\n  const dhisEngine = useDataEngine();\n  const customizedMiddleware = getDefaultMiddleware({\n    thunk: {\n      extraArgument: dhisEngine\n    }\n  });\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware\n  });\n  return <Provider store={store}>\n            <ContainerView>\n                <div className=\"container\">\n                    <div className=\"left-column\">\n                        <OrgUnits />\n                    </div>\n                    <div className=\"right-column\">\n                        <ViewOrgICU />\n                        {\n            /* <ViewICUBeds /> */\n          }\n                        {\n            /* <ViewConfigureBeds /> */\n          }\n                    </div>\n                </div>\n                <div style={{\n        bottom: 0,\n        left: 0,\n        paddingLeft: 16,\n        position: 'fixed',\n        width: '60%'\n      }}>\n                    <Notification />\n                </div>\n            </ContainerView>\n        </Provider>;\n}\n\nexport default MyApp;"],"sourceRoot":""}