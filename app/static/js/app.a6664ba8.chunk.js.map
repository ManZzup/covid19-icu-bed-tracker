{"version":3,"sources":["D2App/state/appState.js","D2App/constants.js","D2App/components/OrgUnits.js","D2App/state/notificationState.js","D2App/state/apiActions.js","D2App/components/ICUTable.js","D2App/state/store.js","D2App/components/permissionUtils.js","D2App/components/ICUBed.js","D2App/components/ConfigureBedModal.js","D2App/components/useConfirmationHook.js","D2App/components/RegisterPatientModal.js","D2App/components/ICUMap.js","D2App/components/Notification.js","D2App/App.js"],"names":["appSlice","createSlice","name","initialState","activeUser","activeOrgUnit","activeICU","metaData","icuList","ICUEventId","reducers","setActiveOrgUnit","state","action","payload","setActiveICU","setActiveUser","setMetaData","setICUBeds","id","icuId","beds","updateBedStatus","bedIndex","findIndex","b","trackedEntityInstance","bedId","status","lastEvent","updateFilteredICUList","updateICUStat","icuIndex","i","available","stat","total","icuName","updateICUDistance","distance","actions","EXPERTISE_ATTRIBUTES","FACILITIES_ATTRIBUTES","PATIENT_ATTRIBUTES","query","organisationUnits","resource","params","paging","fields","traversalCache","parentMatrix","OrgUnits","loading","error","data","refetch","useDataQuery","orgRoot","setOrgRoot","useState","cursor","setCursor","dispatch","useDispatch","traverseResults","useEffect","orgData","root","filter","o","level","children","processList","parent","_children","child","childOrg","find","length","push","active","_prunedChildren","traverse","list","organisationUnitGroups","g","concat","selectOU","node","icus","icu","geometry","type","lat","coordinates","lng","onToggle","toggled","Object","assign","notificationSlice","isOpen","message","showNotification","hideNotification","bedEventHelper","eventType","dataValue","dataElement","value","getEventStatus","event","dataValues","getICUBeds","program","async","getState","dhisEngine","results","ou","trackedEntityInstances","bed","getBedStatus","console","log","instanceId","events","bedEventIndex","dv","addBedEvent","teId","programId","programStageId","additionalData","eventResponse","updateMutation","moment","format","mutate","app","dataElements","mutation","getICUStat","filters","filtersQuery","values","map","f","join","substr","orgUnit","filteredTEI","organisationUnit","response","te","displayName","sortData","field","setLocationData","sortedBy","setSortedBy","sortOrder","setSortOrder","result","slice","sort","locOne","locTwo","propertyOne","propertyTwo","comparison","ICUTable","onSelectICU","locationData","stateData","primary","onClick","loc","key","href","rootReducer","combineReducers","appReducer","notification","notificationReducer","configureStore","reducer","ACTIONS","isRelated","userHasOrgAccess","orgUnits","userHasGroupAccess","groups","accessGroups","accessType","userGroup","canRead","canWrite","hasPerm","programAccess","teAccess","group","indexOf","ICUBed","onView","onOccupy","onDischarge","onReserve","hasEventPerm","onViewPatient","hasEditPerm","ref","useRef","open","setOpen","className","icon","faProcedures","size","createPortal","transparent","placement","reference","document","body","booleanSelections","label","experiseAttrbutes","facilitiesAttributes","infoAttributes","findAttribute","attributes","search","a","attribute","findOption","optionSet","code","ConfigureBedModal","onClose","selectedBed","editable","useSelector","bedAttributes","setBedAttributtes","formState","setFormState","useDataEngine","_bedAttributes","trackedEntityType","trackedEntityTypeAttributes","_formState","attrib","bedValue","valueType","options","option","updateField","getAttributeInput","attribId","formName","onChange","val","selected","disabled","sel","end","secondary","updateBed","teID","importSummaries","createBed","useConfirmation","show","onOk","onCancel","confirm","RegisterPatientModal","actionType","programStage","fieldId","de","getFormField","mapContainerStyle","height","width","center","infoWindowInitData","visible","ICUMap","props","onMarkerClick","origin","updateDistance","infoWindowData","setInfoWindowData","markerData","setMarkerData","distanceRequest","setDistanceRequest","_markerData","_keys","d","p","destinations","origins","travelMode","handleMarkerOnHover","ICUEntry","markerAvailableOptions","path","fillColor","fillOpacity","strokeColor","strokeWeight","googleMapsApiKey","zoom","index","position","onMouseOver","onMouseOut","closeBoxURL","style","backgroundColor","opacity","padding","fontSize","fontColor","callback","s","Notification","duration","critical","warning","success","getAttributeByName","ViewOrgICU","bedData","bedTypeData","covidTypeData","setFilters","ViewICUBeds","placeholder","rows","elements","ind","text","showConfigure","setShowConfigure","bedModalOpen","setBedModalOpen","patientModalOpen","setPatientModalOpen","patientModalAction","setPatientModalAction","setSelectedBed","eventPerm","setEventPerm","patientEditable","setPatientEditable","confirmation","access","getAttributeText","ViewConfigureBeds","onBack","onViewBed","onOccupyBed","onDischargeBed","onReserveBed","onRemoveBed","enrollmentId","enrollments","enrollment","onSelectBed","destructive","ContainerView","ga","userGroupAccesses","userGroupUid","startsWith","trackedEntityAttribute","_dataElements","elem","displayFormName","user","userGroups","ug","MyApp","customizedMiddleware","getDefaultMiddleware","thunk","extraArgument","store","middleware","bottom","left","paddingLeft"],"mappings":"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","file":"static/js/app.a6664ba8.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nconst initState = {\n  activeUser: null,\n  activeOrgUnit: null,\n  activeICU: null,\n  metaData: null,\n  icuList: [],\n  ICUEventId: \"fKXrko0yhua\"\n};\nconst appSlice = createSlice({\n  name: \"app\",\n  initialState: initState,\n  reducers: {\n    setActiveOrgUnit(state, action) {\n      state.activeOrgUnit = action.payload;\n    },\n\n    setActiveICU(state, action) {\n      state.activeICU = action.payload;\n    },\n\n    setActiveUser(state, action) {\n      state.activeUser = action.payload;\n    },\n\n    setMetaData(state, action) {\n      state.metaData = action.payload;\n    },\n\n    setICUBeds(state, action) {\n      if (state.activeICU && state.activeICU.id === action.payload.icuId) {\n        state.activeICU.beds = action.payload.beds;\n      }\n    },\n\n    updateBedStatus(state, action) {\n      const bedIndex = state.activeICU.beds.findIndex(b => b.trackedEntityInstance === action.payload.bedId);\n\n      if (bedIndex > -1) {\n        state.activeICU.beds[bedIndex].status = action.payload.status;\n        state.activeICU.beds[bedIndex].lastEvent = action.payload.lastEvent;\n      }\n    },\n\n    updateFilteredICUList(state, action) {\n      state.icuList = action.payload;\n    },\n\n    updateICUStat(state, action) {\n      const icuIndex = state.icuList.findIndex(i => i.id === action.payload.icuId);\n\n      if (icuIndex > -1) {\n        state.icuList[icuIndex].available = action.payload.stat.available;\n        state.icuList[icuIndex].total = action.payload.stat.total;\n        state.icuList[icuIndex].name = action.payload.icuName;\n      }\n    },\n\n    updateICUDistance(state, action) {\n      const icuIndex = state.icuList.findIndex(i => i.id === action.payload.icuId);\n\n      if (icuIndex > -1) {\n        state.icuList[icuIndex].distance = action.payload.distance;\n      }\n    }\n\n  }\n});\nexport const {\n  setActiveOrgUnit,\n  setActiveICU,\n  setMetaData,\n  setICUBeds,\n  updateBedStatus,\n  updateFilteredICUList,\n  updateICUStat,\n  setActiveUser,\n  updateICUDistance\n} = appSlice.actions;\nexport default appSlice.reducer;","export const EXPERTISE_ATTRIBUTES = [\"v5eNzdQsLox\", \"eBlbs7BzVfX\", \"JJ2DQSnlhfR\", \"m64bCKnUD8L\", \"Xar8cTc8XN0\", \"k7eXIuzzhat\", \"JZXI1GzSoYx\"];\nexport const FACILITIES_ATTRIBUTES = [\"Jio5MTDVFo4\", \"yvOZEiBS5cd\", \"CGp0lKLkSKY\", \"YCILPvLTofG\"];\nexport const PATIENT_ATTRIBUTES = [\"j1hbO7zzRgV\", \"sK09QRLNyAA\", \"malZQqUEzi9\", \"qh9bc6jlauE\"];\nexport const ICU_EVENT_ID = \"MtYPOv0wqCg\";\nexport const ICU_ORG_UNIT_GROUP = \"PTahQgpjqyQ\";\nexport const SUPER_ADMIN_GROUP = \"LkEkMDG0zfj\";","import React, { useEffect, useState } from 'react';\nimport { Card } from '@dhis2/ui-core';\nimport { useDispatch } from 'react-redux';\nimport { DataQuery, useDataQuery } from '@dhis2/app-runtime';\nimport { Treebeard } from 'react-treebeard';\nimport { setActiveOrgUnit, updateFilteredICUList, setActiveICU } from '../state/appState';\nimport { ICU_ORG_UNIT_GROUP } from '../constants';\nconst query = {\n  organisationUnits: {\n    resource: 'organisationUnits.json',\n    params: {\n      paging: 'false',\n      fields: \"id,name,level,children,geometry,organisationUnitGroups,parent[id, displayName]\"\n    }\n  }\n};\nlet traversalCache = {};\nexport var parentMatrix = {};\nexport default function OrgUnits() {\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query);\n  const [orgRoot, setOrgRoot] = useState(null);\n  const [cursor, setCursor] = useState(false);\n  const dispatch = useDispatch();\n  var traverseResults = [];\n\n  function processList(orgData, children, parent = null) {\n    let _children = [];\n\n    for (var child of children) {\n      let childOrg = orgData.find(o => o.id === child.id);\n\n      if (!childOrg) {\n        continue;\n      }\n\n      if (parent) {\n        if (!parentMatrix[childOrg.id]) {\n          parentMatrix[childOrg.id] = {};\n        }\n\n        parentMatrix[childOrg.id] = parent.id;\n      }\n\n      if (childOrg.children.length === 0) {\n        childOrg.children = null;\n      } else {\n        childOrg.children = processList(orgData, childOrg.children, childOrg);\n      }\n\n      _children.push({ ...childOrg,\n        active: false\n      });\n    }\n\n    let _prunedChildren = [];\n\n    for (var child of _children) {\n      traverseResults = [];\n      traverse(child, 5); // traversalCache[child.id] = null;\n\n      if (traverseResults.length > 0) {\n        _prunedChildren.push(child);\n\n        traversalCache[child.id] = { ...child,\n          list: [...traverseResults]\n        };\n      }\n    }\n\n    return _prunedChildren;\n  }\n\n  function mergeLevel(node, level = 4) {\n    if (node.level === level - 1) {\n      // at level 3\n      let newChildren = [];\n\n      for (var child1 of node.children) {\n        if (!child1.children) continue;\n\n        for (var child2 of child1.children) {\n          newChildren.push(child2);\n        }\n      }\n\n      node.children = newChildren;\n      return;\n    }\n\n    for (var child of node.children) {\n      mergeLevel(child, level);\n    }\n  }\n\n  useEffect(() => {\n    if (data) {\n      const orgData = data.organisationUnits.organisationUnits;\n      const root = data.organisationUnits.organisationUnits.filter(o => o.level === 1)[0];\n      root.children = processList(orgData, root.children, root);\n      parentMatrix[root.id] = \"\"; // mergeLevel(root, 4);\n\n      setOrgRoot(root);\n    }\n  }, [loading]);\n\n  const onToggle = (node, toggled) => {\n    if (cursor) {\n      cursor.active = false;\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n\n    setCursor(node);\n    setOrgRoot(Object.assign({}, orgRoot));\n    selectOU(node);\n  };\n\n  function traverse(root, level) {\n    if (root.level === level && root.organisationUnitGroups.findIndex(g => g.id === ICU_ORG_UNIT_GROUP) > -1) {\n      traverseResults.push({ ...root\n      });\n      return;\n    }\n\n    if (root.children) {\n      for (var child of root.children) {\n        if (traversalCache[child.id]) {\n          traverseResults = traverseResults.concat(traversalCache[child.id].list);\n        } else {\n          traverse(child, level);\n        }\n      }\n    }\n  }\n\n  const selectOU = node => {\n    traverseResults = []; // traverse the tree and find level 6 bois\n\n    traverse(node, 5);\n    let icus = [];\n\n    for (var icu of traverseResults) {\n      icus.push({ ...icu,\n        distance: 0,\n        total: null,\n        available: null,\n        geometry: traversalCache[icu.parent.id] && traversalCache[icu.parent.id].geometry && traversalCache[icu.parent.id].geometry.type === \"Point\" ? {\n          lat: traversalCache[icu.parent.id].geometry.coordinates[1],\n          lng: traversalCache[icu.parent.id].geometry.coordinates[0]\n        } : {\n          lat: 0,\n          lng: 0\n        }\n      });\n    }\n\n    dispatch(updateFilteredICUList(icus));\n    dispatch(setActiveOrgUnit({\n      id: node.id,\n      name: node.name,\n      level: node.level\n    }));\n\n    if (node.level === 5) {\n      dispatch(setActiveICU({\n        id: node.id,\n        beds: []\n      }));\n    }\n  };\n\n  return <Card>\n            {orgRoot && <Treebeard data={orgRoot} onToggle={onToggle} />}\n        </Card>;\n}","import { createSlice } from '@reduxjs/toolkit';\nconst initState = {\n  isOpen: false,\n  message: null,\n  type: null\n};\nconst notificationSlice = createSlice({\n  name: \"notification\",\n  initialState: initState,\n  reducers: {\n    showNotification(state, action) {\n      state.isOpen = true;\n      state.message = action.payload.message;\n      state.type = action.payload.type;\n    },\n\n    hideNotification(state, action) {\n      state, isOpen = false;\n      state.message = null;\n      state.type = null;\n    }\n\n  }\n});\nexport default notificationSlice.reducer;\nexport const {\n  showNotification,\n  hideNotification\n} = notificationSlice.actions;","import { setICUBeds, setMetaData, updateBedStatus, updateICUStat, setActiveUser } from './appState';\nimport * as moment from 'moment';\nimport { showNotification } from './notificationState';\nimport { ICU_EVENT_ID } from '../constants';\nexport function test() {\n  return async (dispatch, getState, dhisEngine) => {\n    console.log(dhisEngine);\n  };\n}\n\nfunction bedEventHelper(metaData, eventType) {\n  let dataValue = {};\n\n  if (eventType === \"Discharged\") {\n    dataValue = {\n      dataElement: ICU_EVENT_ID,\n      value: \"Discharged\"\n    };\n  } else if (eventType === \"Admitted\") {\n    dataValue = {\n      dataElement: ICU_EVENT_ID,\n      value: \"Admitted\"\n    };\n  } else if (eventType === \"Reserved\") {\n    dataValue = {\n      dataElement: ICU_EVENT_ID,\n      value: \"Reserved\"\n    };\n  }\n\n  return dataValue;\n}\n\nfunction getEventStatus(event) {\n  if (event.dataValues.length > 0) {\n    switch (event.dataValues[0].value) {\n      case \"Discharged\":\n        return \"AVAILABLE\";\n\n      case \"Admitted\":\n        return \"OCCUPIED\";\n\n      case \"Reserved\":\n        return \"RESERVED\";\n    }\n  }\n\n  return \"\";\n}\n\nexport function getActiveUser() {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        user: {\n          resource: 'me',\n          params: {\n            fields: \"id,displayName,userGroups,organisationUnits[id, geometry]\"\n          }\n        }\n      };\n      const {\n        user\n      } = await dhisEngine.query(query);\n      dispatch(setActiveUser({\n        id: user.id,\n        name: user.displayName,\n        group: user.userGroups.length > 0 ? user.userGroups.map(ug => ug.id) : null,\n        organisationUnits: user.organisationUnits.map(ou => ou.id),\n        origin: user.organisationUnits.length > 0 && user.organisationUnits[0].geometry && user.organisationUnits[0].geometry.type === \"Polygon\" ? user.organisationUnits[0].geometry.coordinates : null\n      }));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'Error loading user',\n        type: 'error'\n      }));\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getMetaData() {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        program: {\n          resource: 'programs/C1wTfmmMQUn',\n          params: {\n            fields: \"id,name,userGroupAccesses,trackedEntityType[id, displayName, userGroupAccesses, trackedEntityTypeAttributes[trackedEntityAttribute[id, displayName, formName, valueType, optionSet[options[displayName, id, code]]]]]\"\n          }\n        },\n        dataElements: {\n          resource: 'dataElements',\n          params: {\n            paging: \"false\",\n            program: \"C1wTfmmMQUn\",\n            fields: \"id,displayName,displayFormName,valueType,optionSet[options[id, displayName, code]]\"\n          }\n        }\n      };\n      const {\n        program,\n        dataElements\n      } = await dhisEngine.query(query);\n      let metaData = {\n        id: program.id,\n        name: program.name,\n        trackedEntityType: {\n          id: program.trackedEntityType.id,\n          displayName: program.trackedEntityType.displayName,\n          trackedEntityTypeAttributes: []\n        }\n      };\n      let programAccess = {};\n\n      for (var ga of program.userGroupAccesses) {\n        programAccess[ga.userGroupUid] = {\n          canRead: ga.access.startsWith(\"rw\"),\n          canWrite: ga.access.startsWith(\"rwrw\")\n        };\n      }\n\n      metaData['programAccess'] = programAccess;\n\n      for (var attrib of program.trackedEntityType.trackedEntityTypeAttributes) {\n        metaData.trackedEntityType.trackedEntityTypeAttributes.push(attrib.trackedEntityAttribute);\n      }\n\n      let teAccess = {};\n\n      for (var ga of program.trackedEntityType.userGroupAccesses) {\n        teAccess[ga.userGroupUid] = {\n          canRead: ga.access.startsWith(\"rw\"),\n          canWrite: ga.access.startsWith(\"rwrw\")\n        };\n      }\n\n      metaData.trackedEntityType['access'] = teAccess;\n      let _dataElements = {};\n\n      for (var de of dataElements.dataElements) {\n        if (de.displayName.startsWith(\"ICU\")) {\n          let elem = {\n            id: de.id,\n            displayName: de.displayName,\n            formName: de.displayFormName,\n            type: de.valueType\n          };\n\n          if (de.optionSet) {\n            elem[\"options\"] = de.optionSet.options;\n          }\n\n          _dataElements[de.displayName] = elem;\n        }\n      }\n\n      metaData[\"dataElements\"] = _dataElements;\n      dispatch(setMetaData(metaData));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'failed to load metadata',\n        type: 'error'\n      }));\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getICUBeds(icuId, program) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const query = {\n        results: {\n          resource: 'trackedEntityInstances',\n          params: {\n            ou: icuId,\n            fields: \"trackedEntityInstance,attributes[attribute,displayName,value],enrollments\",\n            program: program\n          }\n        }\n      };\n      const response = await dhisEngine.query(query);\n      const beds = response.results.trackedEntityInstances; // now get status of each\n\n      for (var bed of beds) {\n        dispatch(getBedStatus(bed.trackedEntityInstance));\n      }\n\n      dispatch(setICUBeds({\n        icuId,\n        beds\n      }));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'failed to load icu bed data',\n        type: 'error'\n      }));\n      console.log(\"Error in query:\", error);\n    }\n  };\n}\nexport function getBedStatus(instanceId) {\n  return async (dispatch, getState, dhisEngine) => {\n    const query = {\n      events: {\n        resource: 'events',\n        params: {\n          trackedEntityInstance: instanceId,\n          paging: \"false\",\n          status: \"ACTIVE\"\n        }\n      }\n    };\n    const response = await dhisEngine.query(query);\n    const events = response.events.events;\n    let status = \"\";\n\n    if (events.length > 0) {\n      const lastEvent = events[0];\n      const bedEventIndex = lastEvent.dataValues.findIndex(dv => dv.dataElement === ICU_EVENT_ID);\n\n      if (bedEventIndex > -1) {\n        switch (lastEvent.dataValues[bedEventIndex].value) {\n          case \"Discharged\":\n            status = \"AVAILABLE\";\n            break;\n\n          case \"Admitted\":\n            status = \"OCCUPIED\";\n            break;\n\n          case \"Reserved\":\n            status = \"RESERVED\";\n            break;\n        }\n      }\n\n      dispatch(updateBedStatus({\n        bedId: instanceId,\n        status: status,\n        lastEvent: lastEvent\n      }));\n    }\n  };\n}\nexport function createBed(teID, icuId, programId, attributes) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {\n        \"trackedEntityType\": teID,\n        \"orgUnit\": icuId,\n        \"attributes\": attributes,\n        \"enrollments\": [{\n          \"orgUnit\": icuId,\n          \"program\": programId,\n          \"enrollmentDate\": moment().format(\"YYYY-MM-DD\"),\n          \"incidentDate\": moment().format(\"YYYY-MM-DD\")\n        }]\n      };\n      const mutation = {\n        resource: 'trackedEntityInstances',\n        type: 'create',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      const instanceId = response.response.importSummaries[0].reference; // add new event to make the bed available\n\n      dispatch(addBedEvent(instanceId, programId, getState().app.ICUEventId, icuId, \"Discharged\"));\n      dispatch(getICUBeds(icuId, programId));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in creating bed',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function updateBed(icuId, bedId, attributes) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {\n        \"orgUnit\": icuId,\n        \"attributes\": attributes\n      };\n      const mutation = {\n        resource: 'trackedEntityInstances/' + bedId,\n        type: 'update',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getICUBeds(icuId, getState().app.metaData.id));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in updating bed',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function removeBed(icuId, enrollmentId) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      const payload = {};\n      const mutation = {\n        resource: 'enrollments/' + enrollmentId,\n        type: 'delete'\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getICUBeds(icuId, getState().app.metaData.id));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in deleting bed',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function addBedEvent(teId, programId, programStageId, icuId, eventType, additionalData = []) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      // first we complete last event\n      const query = {\n        events: {\n          resource: 'events',\n          params: {\n            trackedEntityInstance: teId,\n            paging: \"false\",\n            status: \"ACTIVE\"\n          }\n        }\n      };\n      const eventResponse = await dhisEngine.query(query);\n\n      if (eventResponse.events.events.length > 0) {\n        const lastEvent = eventResponse.events.events[0];\n        const updatePayload = {\n          \"event\": lastEvent.event,\n          \"trackedEntityInstance\": teId,\n          \"program\": programId,\n          \"programStage\": programStageId,\n          \"enrollment\": icuId,\n          \"orgUnit\": icuId,\n          \"completedDate\": moment().format(\"YYYY-MM-DD\"),\n          \"status\": \"COMPLETED\"\n        };\n        const updateMutation = {\n          resource: 'events',\n          type: 'create',\n          data: updatePayload\n        };\n        await dhisEngine.mutate(updateMutation);\n      }\n\n      const dataValues = [bedEventHelper(getState().app.metaData.dataElements, eventType), ...additionalData];\n      const payload = {\n        \"trackedEntityInstance\": teId,\n        \"program\": programId,\n        \"programStage\": programStageId,\n        \"enrollment\": icuId,\n        \"orgUnit\": icuId,\n        \"dataValues\": dataValues,\n        \"eventDate\": moment().format(\"YYYY-MM-DD\"),\n        \"status\": \"ACTIVE\"\n      };\n      const mutation = {\n        resource: 'events',\n        type: 'create',\n        data: payload\n      };\n      const response = await dhisEngine.mutate(mutation);\n      dispatch(getBedStatus(teId));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in adding bed event',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}\nexport function getICUStat(icu, filters = {}) {\n  return async (dispatch, getState, dhisEngine) => {\n    try {\n      let filtersQuery = \"\";\n\n      for (var filter in filters) {\n        if (filters[filter].length === 0) {\n          continue;\n        }\n\n        const values = filters[filter].map(f => f.value);\n        filtersQuery += `${filter}:IN:${values.join(\";\")},`;\n      }\n\n      filtersQuery = filtersQuery.substr(0, filtersQuery.length - 1); // first we complete last event\n\n      const query = {\n        events: {\n          resource: 'events',\n          params: {\n            orgUnit: icu.id,\n            paging: \"false\",\n            status: \"ACTIVE\"\n          }\n        },\n        filteredTEI: {\n          resource: 'trackedEntityInstances',\n          params: {\n            ou: icu.id,\n            paging: 'false',\n            fields: 'trackedEntityInstance',\n            filter: filtersQuery\n          }\n        },\n        organisationUnit: {\n          resource: 'organisationUnits/' + icu.id,\n          params: {\n            fields: 'id,displayName,parent[displayName, geometry]'\n          }\n        }\n      };\n      const response = await dhisEngine.query(query);\n      let stat = {\n        available: 0,\n        total: 0\n      };\n\n      for (var event of response.events.events) {\n        let teIndex = response.filteredTEI.trackedEntityInstances.findIndex(te => te.trackedEntityInstance === event.trackedEntityInstance);\n\n        if (teIndex === -1) {\n          // filtered TE doesn't have this\n          continue;\n        }\n\n        let status = getEventStatus(event);\n\n        if (status === \"AVAILABLE\") {\n          stat.available++;\n        }\n\n        stat.total++;\n      }\n\n      dispatch(updateICUStat({\n        icuId: icu.id,\n        stat: stat,\n        icuName: `${response.organisationUnit.parent.displayName} - ${response.organisationUnit.displayName}`\n      }));\n    } catch (error) {\n      dispatch(showNotification({\n        message: 'error in retrieving ICU status',\n        type: 'error'\n      }));\n      console.log(\"Error in creating:\", error);\n    }\n  };\n}","import React, { useEffect, useState } from 'react';\nimport { Table, TableHead, TableBody, TableRow, TableCellHead, TableCell, Button, DropdownButton } from '@dhis2/ui-core';\nimport { useDispatch } from 'react-redux';\nimport { getICUStat } from '../state/apiActions';\n\nfunction sortData(field, data, state) {\n  const {\n    setLocationData,\n    sortedBy,\n    setSortedBy,\n    sortOrder,\n    setSortOrder\n  } = state;\n\n  const compare = (locOne, locTwo) => {\n    let propertyOne = locOne[field];\n    let propertyTwo = locTwo[field];\n    let comparison = 0;\n\n    if (propertyOne > propertyTwo) {\n      comparison = 1;\n    } else if (propertyOne < propertyTwo) {\n      comparison = -1;\n    }\n\n    if (sortedBy === field) {\n      comparison = comparison * -1 * sortOrder; //inverts the order\n    }\n\n    return comparison;\n  };\n\n  let result = data.slice();\n  result = result.sort(compare);\n  setLocationData(result);\n  setSortedBy(field);\n  setSortOrder(sortOrder * -1);\n}\n\nexport default function ICUTable({\n  data,\n  onSelectICU\n}) {\n  const [locationData, setLocationData] = useState([]);\n  const [sortedBy, setSortedBy] = useState('distance');\n  const [sortOrder, setSortOrder] = useState(1);\n  const dispatch = useDispatch();\n  const stateData = {\n    setLocationData,\n    sortedBy,\n    setSortedBy,\n    sortOrder,\n    setSortOrder\n  };\n  useEffect(() => {\n    sortData(sortedBy, data, stateData);\n  }, [data]);\n\n  if (!data) {\n    return <div></div>;\n  }\n\n  return <Table>\n            <TableHead>\n                <TableRow>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'name'} onClick={() => {\n            sortData('name', locationData, stateData);\n          }}> \n                            ICU\n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'distance'} onClick={() => {\n            sortData('distance', locationData, stateData);\n          }}> \n                            Distance \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'total'} onClick={() => {\n            sortData('total', locationData, stateData);\n          }}> \n                            TotalBeds \n                        </DropdownButton> \n                    </TableCellHead>\n                    <TableCellHead>  \n                        <DropdownButton primary={sortedBy === 'available'} onClick={() => {\n            sortData('available', locationData, stateData);\n          }}> \n                            AvailableBeds \n                        </DropdownButton> \n                    </TableCellHead>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {locationData.map((loc, key) => <TableRow key={key}>\n                    <TableCell><a href=\"#\" onClick={() => onSelectICU(loc)}>{loc.name}</a></TableCell>\n                    <TableCell>{loc.distance}</TableCell>\n                    <TableCell>{loc.total}</TableCell>\n                    <TableCell>{loc.available}</TableCell>\n                </TableRow>)}\n            </TableBody>\n        </Table>;\n}","import { configureStore, combineReducers, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport appReducer from './appState';\nimport notificationReducer from './notificationState';\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  notification: notificationReducer\n});\nexport const store = configureStore({\n  reducer: rootReducer\n});","import { parentMatrix } from \"./OrgUnits\";\nimport { SUPER_ADMIN_GROUP } from \"../constants\";\nexport const ACTIONS = {\n  VIEW_ICU: \"VIEW_ICU\",\n  CONFIG_ICU: \"CONFIG_ICU\",\n  ADD_EVENT: \"ADD_EVENT\"\n}; // function to calculate if the parent has the child down the line\n\nfunction isRelated(parent, child) {\n  while (parentMatrix[child] !== parent) {\n    child = parentMatrix[child];\n\n    if (!parentMatrix[child]) {\n      break;\n    }\n  }\n\n  if (!parentMatrix[child] || parentMatrix[child] !== parent) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction userHasOrgAccess(orgUnits, icuId) {\n  for (var orgUnit of orgUnits) {\n    if (orgUnit === icuId || isRelated(orgUnit, icuId)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction userHasGroupAccess(groups, accessGroups, accessType) {\n  for (var userGroup of groups) {\n    if (accessGroups[userGroup]) {\n      if (accessType === \"READ\") {\n        return accessGroups[userGroup].canRead;\n      }\n\n      if (accessType === \"WRITE\") {\n        return accessGroups[userGroup].canWrite;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function hasPerm(action, activeUser, programAccess, teAccess, icuId) {\n  if (activeUser.group.indexOf(SUPER_ADMIN_GROUP) > -1) {\n    //super user\n    return true;\n  }\n\n  if (action === ACTIONS.VIEW_ICU) {\n    if (userHasGroupAccess(activeUser.group, teAccess, \"READ\")) {\n      return true;\n    }\n  }\n\n  if (action === ACTIONS.CONFIG_ICU && userHasOrgAccess(activeUser.organisationUnits, icuId)) {\n    if (userHasGroupAccess(activeUser.group, teAccess, \"WRITE\")) {\n      return true;\n    }\n  }\n\n  if (action === ACTIONS.ADD_EVENT) {\n    if (userHasGroupAccess(activeUser.group, programAccess, \"WRITE\") && userHasOrgAccess(activeUser.organisationUnits, icuId)) {\n      return true;\n    }\n  }\n\n  return false;\n}","import React, { useEffect, useState, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Popper, ScreenCover } from '@dhis2/ui-core';\nimport { hasPerm, ACTIONS } from './permissionUtils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faProcedures } from '@fortawesome/free-solid-svg-icons';\nexport default function ICUBed({\n  name,\n  status,\n  onView,\n  onOccupy,\n  onDischarge,\n  onReserve,\n  hasEventPerm,\n  onViewPatient,\n  hasEditPerm\n}) {\n  const ref = useRef(null);\n  const [open, setOpen] = useState(false);\n\n  const getClassName = () => {\n    if (status === \"AVAILABLE\") {\n      return \"available\";\n    }\n\n    if (status === \"OCCUPIED\") {\n      return \"occupied\";\n    }\n\n    if (status === \"RESERVED\") {\n      return \"reserved\";\n    }\n\n    return \"\";\n  };\n\n  const onToggle = () => {\n    if (hasEventPerm) {\n      setOpen(!open);\n    }\n  };\n\n  return <div className={`icu-bed ${getClassName()}`} ref={ref} onClick={onToggle}>\n            <FontAwesomeIcon icon={faProcedures} size=\"lg\" />\n            <span>{name}</span>\n            {open && createPortal(<ScreenCover onClick={onToggle} transparent>\n                        <Popper placement=\"right\" reference={ref}>\n                            <div className=\"bed-options\">\n                                {(status === \"AVAILABLE\" || status === \"RESERVED\") && <div onClick={() => {\n            setOpen(false);\n            onOccupy();\n          }}>Occupy</div>}\n                                {status === \"AVAILABLE\" && <div onClick={() => {\n            setOpen(false);\n            onReserve();\n          }}>Reserve</div>}\n                                {status !== \"AVAILABLE\" && <div onClick={() => {\n            setOpen(false);\n            onDischarge();\n          }}>Discharge</div>}\n                                <div onClick={onView}>View</div>\n                                {hasEditPerm && (status === \"OCCUPIED\" || status === \"RESERVED\") && <div onClick={onViewPatient}>View Patient</div>}\n                            </div>\n                        </Popper>\n                    </ScreenCover>, document.body)}\n        </div>;\n}","import React, { useState, useEffect } from 'react';\nimport { Modal, ModalTitle, ModalActions, ModalContent, ButtonStrip, Button, InputField, SingleSelect, RadioGroup, Radio, RadioGroupField, SingleSelectOption, SingleSelectField } from '@dhis2/ui-core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as moment from 'moment';\nimport { useDataMutation, useDataEngine } from '@dhis2/app-runtime';\nimport { test, createBed, updateBed } from '../state/apiActions';\nconst booleanSelections = [{\n  label: \"No\",\n  value: 'false'\n}, {\n  label: \"Yes\",\n  value: 'true'\n}];\nconst experiseAttrbutes = [\"v5eNzdQsLox\", \"eBlbs7BzVfX\", \"JJ2DQSnlhfR\", \"m64bCKnUD8L\", \"Xar8cTc8XN0\", \"k7eXIuzzhat\", \"JZXI1GzSoYx\"];\nconst facilitiesAttributes = [\"Jio5MTDVFo4\", \"yvOZEiBS5cd\", \"CGp0lKLkSKY\", \"YCILPvLTofG\"];\nconst infoAttributes = [\"tswabivShTy\", \"Xt5tV6OFSEW\", \"XYNBoDZS0aV\"];\n\nfunction findAttribute(attributes, id) {\n  const search = attributes.filter(a => a.attribute === id);\n  return search.length > 0 ? search[0].value : null;\n}\n\nfunction findOption(optionSet, code) {\n  const search = optionSet.filter(o => o.code === code);\n  return search[0];\n}\n\nexport default function ConfigureBedModal({\n  open,\n  onClose,\n  selectedBed,\n  editable\n}) {\n  const metaData = useSelector(state => state.app.metaData);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const [bedAttributes, setBedAttributtes] = useState([]);\n  const [formState, setFormState] = useState({});\n  const engine = useDataEngine();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (metaData) {\n      let _bedAttributes = metaData.trackedEntityType.trackedEntityTypeAttributes;\n      let _formState = {};\n\n      for (var attrib of _bedAttributes) {\n        // check if this is a update thing\n        let bedValue = null;\n\n        if (selectedBed) {\n          bedValue = findAttribute(selectedBed.attributes, attrib.id);\n        }\n\n        if (attrib.valueType === \"TEXT\") {\n          if (attrib.optionSet && attrib.optionSet.options && attrib.optionSet.options.length > 0) {\n            if (bedValue) {\n              const option = findOption(attrib.optionSet.options, bedValue);\n              _formState[attrib.id] = {\n                \"label\": option.displayName,\n                \"value\": option.code\n              };\n            } else {\n              _formState[attrib.id] = {\n                \"label\": attrib.optionSet.options[0].displayName,\n                \"value\": attrib.optionSet.options[0].code\n              };\n            }\n          } else {\n            _formState[attrib.id] = bedValue ? bedValue : \"\";\n          }\n        } else if (attrib.valueType === \"BOOLEAN\") {\n          _formState[attrib.id] = {\n            \"label\": bedValue && bedValue === \"true\" ? \"Yes\" : \"No\",\n            \"value\": bedValue ? bedValue : \"false\"\n          };\n        }\n      }\n\n      setFormState(_formState);\n      setBedAttributtes(_bedAttributes);\n    }\n  }, [metaData]);\n\n  if (!open) {\n    return <></>;\n  }\n\n  const updateField = (field, value) => {\n    setFormState({ ...formState,\n      [field]: value\n    });\n  };\n\n  const getAttributeInput = (attribId, key) => {\n    const attrib = bedAttributes.find(b => b.id === attribId);\n\n    if (attrib.optionSet && attrib.optionSet.options && attrib.optionSet.options.length > 0) {\n      return <SingleSelectField key={key} label={attrib.formName} name={attrib.id} onChange={val => updateField(attrib.id, val.selected)} selected={formState[attrib.id]} disabled={!editable}>\n                        {attrib.optionSet.options.map((sel, key) => <SingleSelectOption key={key} label={sel.displayName} value={sel.code} />)}\n                </SingleSelectField>;\n    }\n\n    if (attrib.valueType === \"TEXT\") {\n      return <InputField key={key} label={attrib.formName} name={attrib.id} type=\"text\" onChange={val => updateField(attrib.id, val.value)} value={formState[attrib.id]} disabled={!editable} />;\n    }\n\n    if (attrib.valueType === \"BOOLEAN\") {\n      return <SingleSelectField key={key} label={attrib.formName} name={attrib.id} onChange={val => updateField(attrib.id, val.selected)} selected={formState[attrib.id]} disabled={!editable}>\n                        {booleanSelections.map((sel, key) => <SingleSelectOption key={key} label={sel.label} value={sel.value} />)}\n                </SingleSelectField>;\n      return <></>;\n    }\n  };\n\n  const addBed = async () => {\n    const attributes = [];\n\n    for (var attrib in formState) {\n      attributes.push({\n        \"attribute\": attrib,\n        \"value\": formState[attrib].value ? formState[attrib].value : formState[attrib]\n      });\n    }\n\n    if (selectedBed) {\n      // update existing bed\n      dispatch(updateBed(activeICU.id, selectedBed.trackedEntityInstance, attributes));\n    } else {\n      //create new bed\n      dispatch(createBed(metaData.trackedEntityType.id, activeICU.id, metaData.id, attributes));\n    }\n\n    onClose();\n  };\n\n  return <Modal open>\n            <ModalTitle>\n                {!editable ? \"View\" : selectedBed ? \"Update\" : \"Add\"} ICU Bed\n            </ModalTitle>\n            <ModalContent>\n                {bedAttributes.length > 0 && <div className=\"form\">\n                        {infoAttributes.map((attrib, key) => getAttributeInput(attrib, key))}\n                        \n                        <h4>Facilities</h4>\n                        {facilitiesAttributes.map((attrib, key) => getAttributeInput(attrib, key))}\n\n                        <h4>Expertise</h4>\n                        {experiseAttrbutes.map((attrib, key) => getAttributeInput(attrib, key))}\n                    </div>}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button onClick={onClose} secondary type=\"button\">\n                        Close\n                    </Button>\n                    {editable && <Button onClick={addBed} primary type=\"button\">\n                            {selectedBed ? \"Update Bed\" : \"Add New Bed\"}\n                        </Button>}\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n}","import React from 'react';\nexport default function useConfirmation() {\n  const show = (query, onOk, onCancel) => {\n    const isOk = confirm(query);\n\n    if (isOk) {\n      onOk();\n    } else {\n      onCancel();\n    }\n  };\n\n  return {\n    show\n  };\n}","import React, { useState, useEffect } from 'react';\nimport { Modal, ModalTitle, ModalActions, ModalContent, ButtonStrip, Button, InputField, SingleSelect, RadioGroup, Radio, RadioGroupField, SingleSelectOption, SingleSelectField } from '@dhis2/ui-core';\nimport { addBedEvent } from '../state/apiActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useConfirmation from './useConfirmationHook';\nimport { PATIENT_ATTRIBUTES } from '../constants';\nconst patientFieldset = [{\n  type: \"TEXT\",\n  label: \"ICU - BHT Number\",\n  id: \"j1hbO7zzRgV\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Patient Name\",\n  id: \"sK09QRLNyAA\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Consultant In-charge\",\n  id: \"malZQqUEzi9\"\n}, {\n  type: \"TEXT\",\n  label: \"ICU - Patient Diagnosis\",\n  id: \"qh9bc6jlauE\"\n}];\nexport default function RegisterPatientModal({\n  open,\n  onClose,\n  selectedBed,\n  actionType,\n  editable\n}) {\n  const [formState, setFormState] = useState({});\n  const dispatch = useDispatch();\n  const metaData = useSelector(state => state.app.metaData);\n  const programStage = useSelector(state => state.app.ICUEventId);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const confirmation = useConfirmation();\n  useEffect(() => {\n    let _formState = {};\n\n    for (var fieldId of PATIENT_ATTRIBUTES) {\n      const field = Object.values(metaData.dataElements).find(de => de.id === fieldId);\n\n      if (field.type === \"TEXT\") {\n        if (!editable && selectedBed.lastEvent) {\n          _formState[field.id] = selectedBed.lastEvent.dataValues.find(dv => dv.dataElement === field.id).value;\n        } else {\n          _formState[field.id] = \"\";\n        }\n      }\n    }\n\n    setFormState(_formState);\n  }, [selectedBed]);\n\n  const updateField = (field, value) => {\n    setFormState({ ...formState,\n      [field]: value\n    });\n  };\n\n  const getFormField = (attrib, key) => {\n    const field = Object.values(metaData.dataElements).find(de => de.id === attrib);\n\n    if (field.type === \"TEXT\") {\n      return <InputField key={key} label={field.formName} name={field.id} onChange={val => updateField(field.id, val.value)} value={formState[field.id]} disabled={!editable} />;\n    }\n  };\n\n  const admitPatient = () => {\n    let dataValues = [];\n\n    for (var field in formState) {\n      dataValues.push({\n        dataElement: field,\n        value: formState[field]\n      });\n    }\n\n    if (actionType === \"admit\") {\n      dispatch(addBedEvent(selectedBed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Admitted\", dataValues));\n    } else if (actionType === \"reserve\") {\n      dispatch(addBedEvent(selectedBed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Reserved\", dataValues));\n    }\n\n    onClose();\n  };\n\n  return <Modal open>\n            <ModalTitle>\n                \n                {editable && <span>{actionType === \"admit\" ? 'Admit' : 'Reserve'} New Patient</span>}\n                {!editable && <span>View Patient</span>}\n                \n            </ModalTitle>\n            <ModalContent>\n                {PATIENT_ATTRIBUTES.map((attrib, key) => getFormField(attrib, key))}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button onClick={onClose} secondary type=\"button\">\n                        Close\n                    </Button>\n                    {editable && <Button onClick={admitPatient} primary type=\"button\">\n                            {actionType === \"admit\" ? 'Admit' : 'Reserve'} Patient\n                        </Button>}\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n}","import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoBox, DistanceMatrixService } from '@react-google-maps/api';\nconst mapContainerStyle = {\n  height: \"600px\",\n  width: \"100%\"\n};\nconst center = {\n  lat: 8.11,\n  lng: 80.77\n};\nconst infoWindowInitData = {\n  visible: false,\n  ...center\n};\nexport default function ICUMap(props) {\n  const {\n    onMarkerClick,\n    data,\n    origin,\n    updateDistance\n  } = props;\n  const [infoWindowData, setInfoWindowData] = useState(infoWindowInitData);\n  const [markerData, setMarkerData] = useState(null);\n  const [distanceRequest, setDistanceRequest] = useState(null);\n  useEffect(() => {\n    if (data) {\n      // if(!markerData){\n      let _markerData = [];\n      let _keys = {};\n\n      for (var d of data) {\n        if (!_keys[d.parent.id]) {\n          _markerData.push({\n            id: d.parent.id,\n            name: d.parent.displayName,\n            geometry: d.geometry,\n            icus: []\n          });\n\n          _keys[d.parent.id] = true;\n        }\n\n        _markerData.find(p => p.id === d.parent.id).icus.push(d.name);\n      }\n\n      let destinations = null;\n      let distanceRequest = null;\n\n      if (origin) {\n        destinations = _markerData.map(d => d.geometry);\n        distanceRequest = {\n          origins: [{\n            lat: origin[1],\n            lng: origin[0]\n          }],\n          destinations: destinations,\n          travelMode: 'DRIVING'\n        };\n      }\n\n      setMarkerData(_markerData);\n      setDistanceRequest(distanceRequest); // }\n    }\n  }, [data.length, origin]);\n\n  const handleMarkerOnHover = ICUEntry => {\n    setInfoWindowData({\n      visible: true,\n      ...ICUEntry\n    });\n  };\n\n  const infoBoxOptions = {\n    closeBoxURL: ''\n  };\n  const markerAvailableOptions = {\n    icon: {\n      path: 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z',\n      fillColor: '#00802b',\n      fillOpacity: 1,\n      strokeColor: '',\n      strokeWeight: 0\n    }\n  };\n  const markerUnavailableOptions = {\n    icon: {\n      path: 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z',\n      fillColor: '#DC143C',\n      fillOpacity: 1,\n      strokeColor: '',\n      strokeWeight: 0\n    }\n  }; // let destinations = null;\n  // let distanceRequest = null;\n  // if(origin){\n  //     destinations = data.map(d =>  d.geometry);\n  //     distanceRequest = {\n  //         origins: [{lat: origin[1], lng: origin[0]}],\n  //         destinations: destinations,\n  //         travelMode: 'DRIVING'\n  //     }\n  // }\n\n  return <LoadScript id=\"script-loader\" googleMapsApiKey=\"AIzaSyBjlDmwuON9lJbPMDlh_LI3zGpGtpK9erc\">\n            {markerData && <GoogleMap id='example-map' mapContainerStyle={mapContainerStyle} zoom={7.6} center={center}>\n                    {markerData.map((ICUEntry, index) => {\n        return <Marker position={{\n          lat: ICUEntry.geometry.lat,\n          lng: ICUEntry.geometry.lng\n        }} onClick={() => {\n          onMarkerClick(ICUEntry);\n        }} onMouseOver={() => {\n          handleMarkerOnHover(ICUEntry);\n        }} onMouseOut={() => {\n          handleMarkerOnHover(infoWindowInitData);\n        }} options={markerAvailableOptions} key={index} />;\n      })}\n                    {infoWindowData.visible && <InfoBox position={infoWindowData} options={infoBoxOptions}>\n                            <div style={{\n          backgroundColor: 'white',\n          opacity: 0.95,\n          padding: 5\n        }}>\n                                <div style={{\n            fontSize: 14,\n            fontColor: `#08233B`\n          }}>\n                                    <div>Hospital: {infoWindowData.name}</div>\n                                    <div><b>ICUs</b></div>\n                                    {infoWindowData.icus.map(name => <div>{name}</div>)}\n                                </div>\n                            </div>\n                        </InfoBox>}\n                </GoogleMap>}\n            {distanceRequest && <DistanceMatrixService options={distanceRequest} callback={(data, s) => updateDistance(data, status)} />}\n        </LoadScript>;\n}","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AlertBar } from '@dhis2/ui-core';\nexport default function Notification(props) {\n  const {\n    isOpen,\n    message,\n    type\n  } = useSelector(state => state.notification);\n  if (!isOpen) return null;\n  return <AlertBar duration={5000} icon critical={type === 'error'} warning={type === 'warning'} success={type === 'success'}>\n            {message}\n        </AlertBar>;\n}","import React, { useState, useEffect } from 'react';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { DataQuery, useDataQuery, useDataEngine } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport OrgUnits from './components/OrgUnits';\nimport './App.css';\nimport { Card, MultiSelect, MultiSelectOption, MultiSelectField, Button, ButtonStrip, Table, TableHead, TableBody, TableRow, TableCellHead, TableCell } from '@dhis2/ui-core';\nimport ICUTable from './components/ICUTable';\nimport * as api from \"./mockapi\";\nimport { rootReducer } from './state/store';\nimport ICUBed from './components/ICUBed';\nimport ConfigureBedModal from './components/ConfigureBedModal';\nimport { setActiveICU, setMetaData, setActiveOrgUnit, updateICUStat, updateICUDistance } from './state/appState';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { getICUBeds, getMetaData, addBedEvent, removeBed, getICUStat, getActiveUser } from './state/apiActions';\nimport RegisterPatientModal from './components/RegisterPatientModal';\nimport useConfirmation from './components/useConfirmationHook';\nimport ICUMap from './components/ICUMap';\nimport Notification from './components/Notification';\nimport { hasPerm, ACTIONS } from './components/permissionUtils';\nimport { EXPERTISE_ATTRIBUTES, FACILITIES_ATTRIBUTES } from './constants';\n\nfunction getAttributeByName(bed, name) {\n  for (var attrib of bed.attributes) {\n    if (attrib.displayName === name) {\n      return attrib.value;\n    }\n  }\n\n  return \"\";\n}\n\nfunction ViewOrgICU() {\n  const activeOrgUnit = useSelector(state => state.app.activeOrgUnit);\n  const activeUser = useSelector(state => state.app.activeUser);\n  const bedData = useSelector(state => state.app.icuList);\n  const metaData = useSelector(state => state.app.metaData);\n  const dispatch = useDispatch();\n  const bedTypeId = 'XYNBoDZS0aV';\n  const covidTypeId = 'Xt5tV6OFSEW';\n  let bedTypeData = null;\n  let covidTypeData = null;\n\n  if (metaData) {\n    bedTypeData = metaData.trackedEntityType.trackedEntityTypeAttributes.find(({\n      id\n    }) => id === bedTypeId);\n    covidTypeData = metaData.trackedEntityType.trackedEntityTypeAttributes.find(({\n      id\n    }) => id === covidTypeId);\n  }\n\n  const [filters, setFilters] = useState({\n    [bedTypeId]: [],\n    [covidTypeId]: []\n  });\n  useEffect(() => {\n    if (bedData) {\n      for (var icu of bedData) {\n        if (icu.total === null) {\n          dispatch(getICUStat(icu, filters));\n          dispatch(updateICUStat({\n            icuId: icu.id,\n            stat: {\n              total: \"Updating...\",\n              available: null\n            }\n          }));\n        }\n      }\n    }\n  }, [bedData]);\n  useEffect(() => {\n    if (bedData) {\n      for (var icu of bedData) {\n        dispatch(getICUStat(icu, filters));\n      }\n    }\n  }, [filters]);\n\n  if (!activeOrgUnit) {\n    return <p>Please select an organization unit</p>;\n  }\n\n  if (activeOrgUnit.level === 5) {\n    return <ViewICUBeds />;\n  }\n\n  const onSelectICU = icu => {\n    dispatch(setActiveOrgUnit({\n      id: icu.id,\n      name: icu.name,\n      level: icu.level\n    }));\n    dispatch(setActiveICU({\n      id: icu.id,\n      beds: []\n    }));\n  };\n\n  const onUpdateDistance = (data, status) => {\n    if (data.rows && data.rows.length > 0 && data.rows[0].elements && data.rows[0].elements.length === bedData.length) {\n      for (var ind in bedData) {\n        if (data.rows[0].elements[ind].status === \"OK\") {\n          dispatch(updateICUDistance({\n            icuId: bedData[ind].id,\n            distance: `${data.rows[0].elements[ind].distance.text} (${data.rows[0].elements[ind].duration.text})`\n          }));\n        }\n      }\n    }\n  };\n\n  return activeOrgUnit.level < 6 && <>\n                <span className=\"t20\">Showing ICU Locations for <b>{activeOrgUnit.name}</b></span>\n                <div className=\"filter-area\">\n                    <MultiSelect selected={filters[bedTypeId]} placeholder={bedTypeData.displayName} onChange={({\n        selected\n      }) => {\n        setFilters({ ...filters,\n          [bedTypeId]: selected\n        });\n      }}>\n                        {bedTypeData && bedTypeData.optionSet.options.map((option, key) => <MultiSelectOption key={key} value={option.code} label={option.displayName} />)}\n                    </MultiSelect>\n                    <MultiSelect selected={filters[covidTypeId]} placeholder={covidTypeData.displayName} onChange={({\n        selected\n      }) => {\n        setFilters({ ...filters,\n          [covidTypeId]: selected\n        });\n      }}>\n                        {covidTypeData && covidTypeData.optionSet.options.map((option, key) => <MultiSelectOption key={key} value={option.code} label={option.displayName} />)}\n                    </MultiSelect>\n                </div>\n                <div className=\"icu-org\">\n                    <div className=\"icu-table\">\n                        <ICUTable data={bedData} onSelectICU={onSelectICU} />\n                    </div>\n                    <div className=\"icu-map\">\n                        <ICUMap onMarkerClick={ICUEntry => {\n          console.log(ICUEntry);\n        }} data={bedData.map(d => {\n          return {\n            name: d.name,\n            parent: d.parent,\n            geometry: d.geometry\n          };\n        })} origin={activeUser.origin} updateDistance={onUpdateDistance} />\n                    </div>\n                </div>\n            </>;\n}\n\nfunction ViewICUBeds() {\n  const activeUser = useSelector(state => state.app.activeUser);\n  const activeOrgUnit = useSelector(state => state.app.activeOrgUnit);\n  const activeICU = useSelector(state => state.app.activeICU);\n  const metaData = useSelector(state => state.app.metaData);\n  const programStage = useSelector(state => state.app.ICUEventId);\n  const [showConfigure, setShowConfigure] = useState(false);\n  const [bedModalOpen, setBedModalOpen] = useState(false);\n  const [patientModalOpen, setPatientModalOpen] = useState(false);\n  const [patientModalAction, setPatientModalAction] = useState(\"admit\");\n  const [selectedBed, setSelectedBed] = useState(null);\n  const [eventPerm, setEventPerm] = useState(false);\n  const [patientEditable, setPatientEditable] = useState(true);\n  const dispatch = useDispatch();\n  const confirmation = useConfirmation();\n  useEffect(() => {\n    if (metaData) {\n      dispatch(getICUBeds(activeICU.id, metaData.id));\n\n      if (hasPerm(ACTIONS.ADD_EVENT, activeUser, metaData.programAccess, metaData.trackedEntityType.access, activeICU.id)) {\n        setEventPerm(true);\n      }\n    }\n  }, [metaData, activeICU.id]);\n\n  const onViewBed = bed => {\n    setSelectedBed(bed);\n    setBedModalOpen(true);\n  };\n\n  const onOccupyBed = bed => {\n    setSelectedBed(bed);\n    setPatientEditable(true);\n    setPatientModalAction(\"admit\");\n    setPatientModalOpen(true); // dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Admitted\"));\n  };\n\n  const onReserveBed = bed => {\n    // confirmation.show(\"Do you want to confirm reserving this bed?\",\n    //     () => dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Reserved\")),\n    //     () => { }\n    // );\n    setSelectedBed(bed);\n    setPatientEditable(true);\n    setPatientModalAction(\"reserve\");\n    setPatientModalOpen(true);\n  };\n\n  const onDischargeBed = bed => {\n    confirmation.show(\"Do you want to confirm discharging this bed?\", () => dispatch(addBedEvent(bed.trackedEntityInstance, metaData.id, programStage, activeICU.id, \"Discharged\")), () => {});\n  };\n\n  const onViewPatient = bed => {\n    setSelectedBed(bed);\n    setPatientEditable(false);\n    setPatientModalOpen(true);\n  };\n\n  if (!activeOrgUnit) {\n    return <p>Please select an organization unit</p>;\n  }\n\n  const getAttributeText = (bed, attribId, key) => {\n    if (bed.attributes.find(a => a.attribute === attribId).value === \"true\") {\n      return <p key={key}>{metaData.trackedEntityType.trackedEntityTypeAttributes.find(a => a.id === attribId).formName}</p>;\n    }\n\n    return \"\";\n  };\n\n  return <>\n            <div className=\"inner-header\">\n                <span className=\"t20\">Showing ICU Bed status at <b>{activeOrgUnit.name}</b></span>\n                {hasPerm(ACTIONS.CONFIG_ICU, activeUser, metaData.programAccess, metaData.trackedEntityType.access, activeICU.id) && <Button onClick={() => setShowConfigure(true)} className=\"pull-right\">Configure Beds</Button>}\n            </div>\n            <div className=\"info\">\n                {activeICU.beds.length > 0 && <div className=\"contact\">\n                        <p><b>Facilities</b></p>\n                        {FACILITIES_ATTRIBUTES.map((attrib, key) => getAttributeText(activeICU.beds[0], attrib, key))}\n                    </div>}\n                {activeICU.beds.length > 0 && <div className=\"contact\">\n                        <p><b>Expertise</b></p>\n                        {EXPERTISE_ATTRIBUTES.map((attrib, key) => getAttributeText(activeICU.beds[0], attrib, key))}\n                    </div>}\n                <div className=\"contact\">\n                    <p><b>Primary Contact</b></p>\n                    <p>Dr. John Doe</p>\n                    <p>+94771234568</p>\n                    <p>+94717894562</p>\n                </div>\n            </div>\n            {activeICU && <>\n                    {showConfigure && <ViewConfigureBeds onBack={() => setShowConfigure(false)} />}\n                    {!showConfigure && <div className=\"icu-bed-container\">\n                            {!activeICU.beds.length && <p>No beds currently added</p>}\n                            {activeICU.beds.map((bed, key) => <ICUBed key={key} name={getAttributeByName(bed, \"ICU - Bed Number\")} status={bed.status ? bed.status : \"IDLE\"} onView={() => onViewBed(bed)} onOccupy={() => onOccupyBed(bed)} onDischarge={() => onDischargeBed(bed)} onReserve={() => onReserveBed(bed)} onViewPatient={() => onViewPatient(bed)} hasEventPerm={eventPerm} hasEditPerm={hasPerm(ACTIONS.CONFIG_ICU, activeUser, metaData.programAccess, metaData.trackedEntityType.access, activeICU.id)} />)}\n                        </div>}\n                </>}\n            {bedModalOpen && <ConfigureBedModal open={bedModalOpen} onClose={() => setBedModalOpen(false)} selectedBed={selectedBed} editable={false} />}\n            {patientModalOpen && <RegisterPatientModal open={patientModalOpen} onClose={() => setPatientModalOpen(false)} selectedBed={selectedBed} actionType={patientModalAction} editable={patientEditable} />}\n        </>;\n}\n\nfunction ViewConfigureBeds({\n  onBack\n}) {\n  const [bedModalOpen, setBedModalOpen] = useState(false);\n  const dispatch = useDispatch();\n  const activeICU = useSelector(state => state.app.activeICU);\n  const metaData = useSelector(state => state.app.metaData);\n  const [selectedBed, setSelectedBed] = useState(null);\n  const confirmation = useConfirmation(); // useEffect(() => {\n  //     dispatch(getICUBeds(activeICU.id, metaData.id));\n  // }, []);\n\n  const onAddBed = () => {\n    setSelectedBed(null);\n    setBedModalOpen(true);\n  };\n\n  const onSelectBed = bed => {\n    setSelectedBed(bed);\n    setBedModalOpen(true);\n  };\n\n  const onRemoveBed = bed => {\n    confirmation.show(\"Do you really want to remove this bed?\", () => {\n      dispatch(removeBed(activeICU.id, bed.enrollments[0].enrollment));\n    }, () => {});\n  };\n\n  return <>\n            <div className=\"inner-header\">\n                <ButtonStrip end>\n                    <Button onClick={onBack}>Back</Button>\n                    <Button primary onClick={onAddBed}>Add New Bed</Button>\n                </ButtonStrip>\n            </div>\n            <div className=\"inner-container\">\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCellHead>Bed No</TableCellHead>\n                            <TableCellHead>Bed Type</TableCellHead>\n                            <TableCellHead>Covid Type</TableCellHead>\n                            <TableCellHead>Action</TableCellHead>\n                        </TableRow>\n                    </TableHead>\n                    {activeICU && <TableBody>\n                            {activeICU.beds.map((bed, key) => <TableRow key={key}>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - Bed Number\")}</TableCell>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - Type\")}</TableCell>\n                                    <TableCell>{getAttributeByName(bed, \"ICU - COVID Type\")}</TableCell>\n                                    <TableCell>\n                                        <ButtonStrip>\n                                            <Button onClick={() => onSelectBed(bed)}>View Details</Button>\n                                            <Button destructive onClick={() => onRemoveBed(bed)}>Remove</Button>\n                                        </ButtonStrip>\n                                    </TableCell>\n                                </TableRow>)}\n                        </TableBody>}\n                </Table>\n            </div>\n            {bedModalOpen && <ConfigureBedModal open={bedModalOpen} onClose={() => setBedModalOpen(false)} selectedBed={selectedBed} editable={true} />}\n        </>;\n}\n\nfunction ContainerView({\n  children\n}) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getMetaData());\n    dispatch(getActiveUser());\n  }, []);\n  return <div style={{\n    height: \"100vh\"\n  }}>\n            {children}\n        </div>;\n}\n\nfunction MyApp() {\n  const dhisEngine = useDataEngine();\n  const customizedMiddleware = getDefaultMiddleware({\n    thunk: {\n      extraArgument: dhisEngine\n    }\n  });\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware\n  });\n  return <Provider store={store}>\n            <ContainerView>\n                <div className=\"container\">\n                    <div className=\"left-column\">\n                        <OrgUnits />\n                    </div>\n                    <div className=\"right-column\">\n                        <ViewOrgICU />\n                        {\n            /* <ViewICUBeds /> */\n          }\n                        {\n            /* <ViewConfigureBeds /> */\n          }\n                    </div>\n                </div>\n                <div style={{\n        bottom: 0,\n        left: 0,\n        paddingLeft: 16,\n        position: 'fixed',\n        width: '60%'\n      }}>\n                    <Notification />\n                </div>\n            </ContainerView>\n        </Provider>;\n}\n\nexport default MyApp;"],"sourceRoot":""}